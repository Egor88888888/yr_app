#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –≤ Railway
"""

import asyncio
import os
import sys
import logging

# Set environment variable BEFORE any imports
if not os.getenv("API_GPT"):
    os.environ["API_GPT"] = "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"

# Add bot directory to path  
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

from bot.services.ai_unified import unified_ai_service

# Setup detailed logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def test_ai_assistant():
    """–¢–µ—Å—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    
    # Check environment variables
    api_key = os.getenv("API_GPT")
    if not api_key:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_GPT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:20]}...")
    
    # Test questions
    test_questions = [
        "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–æ–¥?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ?", 
        "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è?"
    ]
    
    all_tests_passed = True
    
    for i, question in enumerate(test_questions, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {question}")
        
        try:
            ai_response = await unified_ai_service.generate_legal_consultation(
                user_message=question,
                category="–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
            )
            response = ai_response.content if hasattr(ai_response, 'content') else str(ai_response)
            
            if response and len(response) > 50:
                print(f"‚úÖ –¢–µ—Å—Ç {i} –£–°–ü–ï–®–ï–ù")
                print(f"üìù –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {response[:100]}...")
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i} –ü–†–û–í–ê–õ–ï–ù - –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: {response}")
                all_tests_passed = False
                
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {i} –ü–†–û–í–ê–õ–ï–ù - –æ—à–∏–±–∫–∞: {e}")
            all_tests_passed = False
    
    return all_tests_passed

async def main():
    """Main test function"""
    print("ü§ñ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # Environment variable already set before imports
    
    # Test AI
    success = await test_ai_assistant()
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é.")
        return True
    else:
        print("\nüí• –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ù–ï –î–ï–ü–õ–û–ò–¢–¨!")
        return False

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
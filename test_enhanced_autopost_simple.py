#!/usr/bin/env python3
"""
üß™ SIMPLE TEST FOR ENHANCED AUTOPOST
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –±–µ–∑ –ë–î
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


async def test_post_structure():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î"""

    print("üöÄ Testing Enhanced Post Structure...")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
        enhanced_templates = {
            'step_by_step_guide': """üéØ **{title}**

üìã **–ü–û–®–ê–ì–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú:**
{step_algorithm}

‚ö†Ô∏è **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
{potential_problems}

üîó **–ü–û–õ–ï–ó–ù–´–ï –†–ï–°–£–†–°–´:**
{useful_resources}

üìû **–ù–£–ñ–ù–ê –ü–û–ú–û–©–¨?**
–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: /start""",

            'legal_analysis': """‚öñÔ∏è **{title}**

üîç **–°–£–¢–¨ –ò–ó–ú–ï–ù–ï–ù–ò–ô:**
{key_changes}

üìù **–ß–¢–û –î–ï–õ–ê–¢–¨ –ì–†–ê–ñ–î–ê–ù–ê–ú:**
{citizen_actions}

üö® **–ù–ê –ß–¢–û –û–ë–†–ê–¢–ò–¢–¨ –í–ù–ò–ú–ê–ù–ò–ï:**
{warnings}

üåê **–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò:**
{official_sources}

üíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞: /start""",

            'practical_solution': """üí° **{title}**

‚úÖ **–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:**
{solution_steps}

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –§–ê–ö–¢–´:**
{statistics}

üîß **–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:**
{practical_tips}

üìö **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
{additional_info}

üìû –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å: /start"""
        }

        # –ë–∞–∑–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_database = {
            'government_sites': [
                "üèõÔ∏è –ì–æ—Å—É—Å–ª—É–≥–∏: gosuslugi.ru",
                "üìã –†–æ—Å—Ä–µ–µ—Å—Ç—Ä: rosreestr.gov.ru",
                "üíº –ù–∞–ª–æ–≥–æ–≤–∞—è: nalog.gov.ru",
                "‚öñÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ü–ª—é—Å: consultant.ru",
                "üìñ –ì–∞—Ä–∞–Ω—Ç: garant.ru"
            ],
            'consumer_protection': [
                "üõ°Ô∏è –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä: rospotrebnadzor.ru",
                "üìã –†–µ–µ—Å—Ç—Ä –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: zakupki.gov.ru",
                "üí≥ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫: cbr.ru"
            ]
        }

        # –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        common_problems = {
            'documentation': [
                "‚ùå –û—Ç–∫–∞–∑ –≤ –ø—Ä–∏–µ–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "üìù –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è",
                "‚è∞ –ü—Ä–æ–ø—É—Å–∫ —Å—Ä–æ–∫–æ–≤ –ø–æ–¥–∞—á–∏",
                "üîç –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–ø—Ä–∞–≤–æ–∫"
            ],
            'legal_procedures': [
                "‚öñÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞",
                "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "üïê –ó–∞—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
                "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤"
            ]
        }

        print(f"‚úÖ Templates loaded: {len(enhanced_templates)}")
        print(f"‚úÖ Resource database: {len(resource_database)} categories")
        print(f"‚úÖ Common problems: {len(common_problems)} categories")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_content = {
            'title': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä',
            'step_algorithm': '''1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—á–µ–∫–∏, –¥–æ–≥–æ–≤–æ—Ä—ã)
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏–ª–∏ –ª–∏—á–Ω–æ
3. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
4. –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –ª–µ—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π''',
            'potential_problems': '''‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ —Å—Ä–æ–∫–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã  
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è
‚Ä¢ –û—Ç–∫–∞–∑ –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º''',
            'useful_resources': '''üõ°Ô∏è –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä: rospotrebnadzor.ru
üèõÔ∏è –ì–æ—Å—É—Å–ª—É–≥–∏: gosuslugi.ru  
üìñ –ì–∞—Ä–∞–Ω—Ç: garant.ru''',
            'practical_tips': '''‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —á–µ–∫–∏
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–∞—Ç—ã –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ø—Ä–æ–¥–∞–≤—Ü—É''',
            'key_changes': '–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–± –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä',
            'citizen_actions': '–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É',
            'warnings': '–°–æ–±–ª—é–¥–∞–π—Ç–µ —Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            'official_sources': 'rospotrebnadzor.ru, gosuslugi.ru'
        }

        print(f"\nüìã Testing template formatting...")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
        for template_name, template in enhanced_templates.items():
            print(f"\nüß™ Template: {template_name}")

            try:
                formatted = template.format(**test_content)

                print(f"   Length: {len(formatted)} chars")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                quality_score = 0
                if any(emoji in formatted for emoji in ['üéØ', '‚öñÔ∏è', 'üí°']):
                    quality_score += 1
                    print("   ‚úÖ Has title emoji")
                if "üìã" in formatted or "üîç" in formatted or "‚úÖ" in formatted:
                    quality_score += 1
                    print("   ‚úÖ Has section structure")
                if "‚ö†Ô∏è" in formatted:
                    quality_score += 1
                    print("   ‚úÖ Has warnings/problems")
                if "üîó" in formatted or "üåê" in formatted or "üìö" in formatted:
                    quality_score += 1
                    print("   ‚úÖ Has resources section")
                if "üìû" in formatted or "üíº" in formatted:
                    quality_score += 1
                    print("   ‚úÖ Has call-to-action")
                if any(site in formatted for site in ['gosuslugi.ru', 'nalog.gov.ru', 'rospotrebnadzor.ru']):
                    quality_score += 1
                    print("   ‚úÖ Has official resources")

                print(f"   üìä Quality Score: {quality_score}/6 ‚≠ê")

                if quality_score >= 5:
                    print("   üèÜ EXCELLENT QUALITY")
                elif quality_score >= 4:
                    print("   ‚úÖ HIGH QUALITY")
                elif quality_score >= 3:
                    print("   ‚ö° GOOD QUALITY")
                else:
                    print("   ‚ö†Ô∏è NEEDS IMPROVEMENT")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                print(f"   üìÑ Preview:\n{formatted[:200]}...")

            except KeyError as e:
                print(f"   ‚ùå Missing key: {e}")
            except Exception as e:
                print(f"   ‚ùå Error: {e}")

        print(f"\n{'=' * 60}")
        print("üéâ Enhanced Post Structure Test COMPLETED!")
        print("=" * 60)

        return True

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        print(f"Error details:\n{traceback.format_exc()}")
        return False


async def test_content_quality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    print("\nüîç Testing Content Quality Standards...")

    quality_requirements = {
        'structured_format': 'üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏',
        'step_by_step': 'üî¢ –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π',
        'official_resources': 'üèõÔ∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
        'problem_warnings': '‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º',
        'practical_advice': 'üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã',
        'clear_cta': 'üìû –ß–µ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é'
    }

    print("üìã Quality Requirements Checklist:")
    for req_id, description in quality_requirements.items():
        print(f"   ‚úÖ {description}")

    # –ü—Ä–∏–º–µ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    sample_post = """üéØ **–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä**

üìã **–ü–û–®–ê–ì–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú:**
1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—á–µ–∫–∏, –¥–æ–≥–æ–≤–æ—Ä—ã)
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏–ª–∏ –ª–∏—á–Ω–æ
3. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
4. –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –ª–µ—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π

‚ö†Ô∏è **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ —Å—Ä–æ–∫–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è
‚Ä¢ –û—Ç–∫–∞–∑ –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º

üîó **–ü–û–õ–ï–ó–ù–´–ï –†–ï–°–£–†–°–´:**
üõ°Ô∏è –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä: rospotrebnadzor.ru
üèõÔ∏è –ì–æ—Å—É—Å–ª—É–≥–∏: gosuslugi.ru
üìñ –ì–∞—Ä–∞–Ω—Ç: garant.ru

üìû **–ù–£–ñ–ù–ê –ü–û–ú–û–©–¨?**
–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: /start"""

    print(f"\nüìÑ Sample High-Quality Post:")
    print("-" * 50)
    print(sample_post)
    print("-" * 50)

    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    print(f"\nüìä Quality Analysis:")
    print(f"   Length: {len(sample_post)} characters")

    quality_checks = [
        ("Has structured sections", any(
            marker in sample_post for marker in ['üìã', '‚ö†Ô∏è', 'üîó', 'üìû'])),
        ("Has step-by-step format", '1.' in sample_post and '2.' in sample_post),
        ("Has official resources", 'gosuslugi.ru' in sample_post),
        ("Has problem warnings", '‚ö†Ô∏è' in sample_post),
        ("Has practical content", any(word in sample_post.lower()
         for word in ['–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–∑–∞—è–≤–ª–µ–Ω–∏–µ', '—Å—Ä–æ–∫'])),
        ("Has clear CTA", '/start' in sample_post),
        ("Has emojis for structure", sample_post.count('üéØ') +
         sample_post.count('üìã') + sample_post.count('‚ö†Ô∏è') >= 3),
        ("Appropriate length", 500 <= len(sample_post) <= 1000)
    ]

    passed_checks = 0
    for check_name, passed in quality_checks:
        status = "‚úÖ" if passed else "‚ùå"
        print(f"   {status} {check_name}")
        if passed:
            passed_checks += 1

    final_score = (passed_checks / len(quality_checks)) * 100
    print(f"\nüèÜ Final Quality Score: {final_score:.0f}%")

    if final_score >= 90:
        print("ü•á EXCELLENT - Ready for production!")
    elif final_score >= 75:
        print("ü•à VERY GOOD - Minor improvements possible")
    elif final_score >= 60:
        print("ü•â GOOD - Some areas need improvement")
    else:
        print("‚ö†Ô∏è NEEDS WORK - Significant improvements required")

    return final_score >= 75


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("üß™ ENHANCED AUTOPOST QUALITY TESTS")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–æ–≤
    test1_result = await test_post_structure()

    # –¢–µ—Å—Ç 2: –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    test2_result = await test_content_quality()

    print(f"\n{'=' * 60}")
    print("üìä FINAL TEST RESULTS:")
    print(f"Structure Test: {'‚úÖ PASSED' if test1_result else '‚ùå FAILED'}")
    print(f"Quality Test: {'‚úÖ PASSED' if test2_result else '‚ùå FAILED'}")

    if test1_result and test2_result:
        print("\nüéâ ALL TESTS PASSED!")
        print("üöÄ Enhanced Autopost System ready for deployment!")
        print("\nüí° Key Improvements:")
        print("   ‚úÖ Structured post templates with clear sections")
        print("   ‚úÖ Step-by-step algorithms for complex procedures")
        print("   ‚úÖ Real government resource links")
        print("   ‚úÖ Problem warnings and solutions")
        print("   ‚úÖ Professional yet accessible language")
        print("   ‚úÖ Clear call-to-action for consultations")
        return 0
    else:
        print("\n‚ùå Some tests failed. Review implementation.")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

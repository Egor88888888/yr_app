import asyncio
import json
import logging
import os
import uvicorn
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}!\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, "
        "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.",
    )

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    data = {}
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} ({user.id}): {data}")
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Web App")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        await update.message.reply_text(
            text="‚úÖ *–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!* \n\n–ù–∞—à —é—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    if not ADMIN_CHAT_ID:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    try:
        def escape_markdown(text: str) -> str:
            escape_chars = r'_*[]()~`>#+-=|{}.!'
            return "".join(f"\\{char}" if char in escape_chars else char for char in str(text))

        name = escape_markdown(data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        phone = escape_markdown(data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'))
        problems_text = escape_markdown(", ".join(data.get('problems', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã'])))
        description = escape_markdown(data.get('description', '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'))
        user_mention = user.mention_markdown_v2()

        admin_message = (
            f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å Mini App*\\!\n\n"
            f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
            f"–ò–º—è: *{name}*\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TG: {user_mention}\n\n"
            f"üìã *–ü—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞:*\n`{problems_text}`\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n"
            f"{description}"
        )
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}...")
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            parse_mode='MarkdownV2'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    except TelegramError as e:
        logger.error(f"Telegram API Error: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—à–∏–±–∫–∞: {e.message}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {type(e).__name__} - {e}")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    if not TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    if not WEBHOOK_URL:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
        
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç—É –Ω–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª Render
    logger.info(f"Setting webhook to {WEBHOOK_URL}/{TOKEN}")
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}", allowed_updates=Update.ALL_TYPES)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    # –≠—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
    async with application:
        await application.start()
        # –í–º–µ—Å—Ç–æ run_polling, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä uvicorn
        # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
        port = int(os.environ.get('PORT', 8080))
        webserver = uvicorn.Server(
            config=uvicorn.Config(
                app=application.asgi_app,
                port=port,
                host='0.0.0.0'
            )
        )
        print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port}...")
        await webserver.serve()
        await application.stop()


if __name__ == "__main__":
    asyncio.run(main())


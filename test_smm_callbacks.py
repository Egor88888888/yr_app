#!/usr/bin/env python3
"""
üîç SMM Callback Coverage Test
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ callback'—ã SMM —Å–∏—Å—Ç–µ–º—ã –∏–º–µ—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""

import re


def test_smm_callback_coverage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ SMM callback'–æ–≤"""

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª main.py
    with open('bot/main.py', 'r', encoding='utf-8') as f:
        content = f.read()

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ callback_data="smm_" –≤ –∫–Ω–æ–ø–∫–∞—Ö
    button_callbacks = set()
    button_pattern = r'callback_data="(smm_[^"]+)"'
    for match in re.finditer(button_pattern, content):
        button_callbacks.add(match.group(1))

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ elif data == "smm_" –≤ handle_smm_actions
    handler_callbacks = set()
    elif_pattern = r'elif data == "(smm_[^"]+)":'
    for match in re.finditer(elif_pattern, content):
        handler_callbacks.add(match.group(1))

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_smm_
    functions = set()
    func_pattern = r'async def (handle_smm_[^(]+)'
    for match in re.finditer(func_pattern, content):
        functions.add(match.group(1))

    print("üîç **SMM CALLBACK COVERAGE ANALYSIS**\n")

    print(f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
    print(f"‚Ä¢ –ö–Ω–æ–ø–∫–∏ —Å callback_data: {len(button_callbacks)}")
    print(f"‚Ä¢ Elif –±–ª–æ–∫–∏ –≤ handle_smm_actions: {len(handler_callbacks)}")
    print(f"‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ handle_smm_: {len(functions)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    missing_handlers = button_callbacks - handler_callbacks
    missing_functions = handler_callbacks - \
        set(f"handle_{cb}" for cb in handler_callbacks if f"handle_{cb}" not in functions)

    print(f"\n‚ùå **MISSING HANDLERS:** {len(missing_handlers)}")
    for callback in sorted(missing_handlers):
        print(f"  ‚Ä¢ {callback}")

    print(f"\n‚ùå **MISSING FUNCTIONS:** {len(missing_functions)}")
    for func in sorted(missing_functions):
        print(f"  ‚Ä¢ {func}")

    coverage = (len(handler_callbacks) / len(button_callbacks)) * \
        100 if button_callbacks else 0
    print(f"\nüìà **COVERAGE:** {coverage:.1f}%")

    if coverage >= 95:
        print("‚úÖ **–û–¢–õ–ò–ß–ù–û! –ü–æ–∫—Ä—ã—Ç–∏–µ > 95%**")
    elif coverage >= 80:
        print("‚ö†Ô∏è **–•–û–†–û–®–û. –ü–æ–∫—Ä—ã—Ç–∏–µ > 80%**")
    else:
        print("‚ùå **–ü–õ–û–•–û. –ü–æ–∫—Ä—ã—Ç–∏–µ < 80%**")

    return coverage >= 95


if __name__ == "__main__":
    test_smm_callback_coverage()

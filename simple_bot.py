#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º HTML
"""
import json
import logging
import os
import asyncio
from telegram import Update, WebAppInfo, MenuButton, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTML –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_HTML = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input, textarea, select { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; }
        button { background-color: #007aff; color: white; padding: 15px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; margin-top: 20px; }
        .service-card { border: 2px solid #ccc; padding: 15px; margin: 10px 0; border-radius: 8px; cursor: pointer; }
        .service-card.selected { border-color: #007aff; background-color: #f0f8ff; }
    </style>
</head>
<body>
    <h1>–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å</h1>
    <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:</p>
    
    <div class="service-card" onclick="toggleService('denial')">
        <h3>üõ°Ô∏è –û—Ç–∫–∞–∑ –≤ –≤—ã–ø–ª–∞—Ç–µ</h3>
        <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –≤—ã–ø–ª–∞—Ç–µ</p>
    </div>
    
    <div class="service-card" onclick="toggleService('underpayment')">
        <h3>üìâ –ó–∞–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã</h3>
        <p>–í—ã–ø–ª–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞</p>
    </div>
    
    <div class="service-card" onclick="toggleService('delay')">
        <h3>‚è≥ –ó–∞—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤</h3>
        <p>–°—Ç—Ä–∞—Ö–æ–≤–∞—è –Ω–∞—Ä—É—à–∞–µ—Ç —Å—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç</p>
    </div>
    
    <div class="form-group">
        <label for="name">–í–∞—à–µ –∏–º—è:</label>
        <input type="text" id="name" placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤">
    </div>
    
    <div class="form-group">
        <label for="phone">–¢–µ–ª–µ—Ñ–æ–Ω:</label>
        <input type="tel" id="phone" placeholder="+7 (999) 123-45-67">
    </div>
    
    <div class="form-group">
        <label for="description">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</label>
        <textarea id="description" rows="4" placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é..."></textarea>
    </div>
    
    <button onclick="sendData()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
    
    <script>
        const tg = window.Telegram.WebApp;
        tg.ready();
        
        let selectedServices = [];
        
        function toggleService(serviceId) {
            const card = event.target.closest('.service-card');
            if (selectedServices.includes(serviceId)) {
                selectedServices = selectedServices.filter(s => s !== serviceId);
                card.classList.remove('selected');
            } else {
                selectedServices.push(serviceId);
                card.classList.add('selected');
            }
        }
        
        function sendData() {
            const name = document.getElementById('name').value;
            const phone = document.getElementById('phone').value;
            const description = document.getElementById('description').value;
            
            if (!name || !phone || selectedServices.length === 0) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É');
                return;
            }
            
            const data = {
                problems: selectedServices,
                name: name,
                phone: phone,
                description: description
            };
            
            tg.sendData(JSON.stringify(data));
        }
    </script>
</body>
</html>"""

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)


async def setup_web_app(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º data URL –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ HTML
        web_app_url = f"data:text/html;charset=utf-8,{WEBAPP_HTML}"
        web_app = WebAppInfo(
            url="https://telegram.org/demo/webapps")  # Fallback
        menu_button = MenuButtonWebApp(
            text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=web_app)

        await application.bot.set_chat_menu_button(menu_button=menu_button)
        logger.info(f"‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! (–ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø)\n\n"
        "–Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."
    )


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏"""
    logger.info("üéØ –ü–û–õ–£–ß–ï–ù–ê –ó–ê–Ø–í–ö–ê!")
    user = update.effective_user

    try:
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return

    if not ADMIN_CHAT_ID:
        logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return

    try:
        data = json.loads(update.effective_message.web_app_data.data)
        problems = ", ".join(data.get('problems', ['–ù–µ —É–∫–∞–∑–∞–Ω–æ']))
        name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        description = data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        admin_message = f"""üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!

üë§ –û—Ç: {name} (ID: {user.id})
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {problems}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{description}"""

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        logger.info("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.critical("‚ùå YOUR_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if ADMIN_CHAT_ID:
        logger.info(f"‚úÖ ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
    else:
        logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, web_app_data))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.get_event_loop().run_until_complete(setup_web_app(application))

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == "__main__":
    main()

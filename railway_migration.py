#!/usr/bin/env python3
"""
üöÄ RAILWAY MIGRATION: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–∫—Å Telegram ID overflow

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ Railway –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
"""

import os
import asyncio
import asyncpg
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def fix_telegram_id_overflow():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PostgreSQL INTEGER ‚Üí BIGINT –¥–ª—è tg_id –∫–æ–ª–æ–Ω–æ–∫"""

    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –£–±–∏—Ä–∞–µ–º postgresql:// –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ postgresql+asyncpg://
    if database_url.startswith("postgresql://"):
        # asyncpg –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
        database_url = database_url.replace(
            "postgresql://", "postgresql+asyncpg://", 1)

    logger.info("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ö–°: Telegram ID overflow")
    logger.info("üìã –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è INTEGER ‚Üí BIGINT –¥–ª—è tg_id –∫–æ–ª–æ–Ω–æ–∫")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –Ω–∞–ø—Ä—è–º—É—é
        conn = await asyncpg.connect(database_url.replace("postgresql+asyncpg://", "postgresql://"))

        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫...")

        current_types = await conn.fetch("""
            SELECT column_name, data_type, table_name 
            FROM information_schema.columns 
            WHERE column_name = 'tg_id' 
            AND table_schema = 'public'
            ORDER BY table_name;
        """)

        logger.info("üìä –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã tg_id –∫–æ–ª–æ–Ω–æ–∫:")
        for row in current_types:
            logger.info(
                f"   ‚Ä¢ {row['table_name']}.{row['column_name']}: {row['data_type']}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        tables_to_fix = [
            ("users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            ("admins", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        ]

        for table_name, description in tables_to_fix:
            logger.info(f"üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {description} ({table_name}.tg_id)...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_exists = await conn.fetchval(f"""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = '{table_name}'
                );
            """)

            if not table_exists:
                logger.warning(
                    f"   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
            await conn.execute(f"""
                ALTER TABLE {table_name} 
                ALTER COLUMN tg_id TYPE BIGINT;
            """)

            logger.info(f"   ‚úÖ {table_name}.tg_id ‚Üí BIGINT")

        logger.info("üéØ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_types = await conn.fetch("""
            SELECT column_name, data_type, table_name 
            FROM information_schema.columns 
            WHERE column_name = 'tg_id' 
            AND table_schema = 'public'
            ORDER BY table_name;
        """)

        logger.info("üìä –ù–æ–≤—ã–µ —Ç–∏–ø—ã tg_id –∫–æ–ª–æ–Ω–æ–∫:")
        for row in new_types:
            logger.info(
                f"   ‚Ä¢ {row['table_name']}.{row['column_name']}: {row['data_type']}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Telegram ID
        test_id = 6922033571  # ID –∏–∑ –ª–æ–≥–æ–≤
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ Telegram ID: {test_id:,}")

        await conn.execute("""
            INSERT INTO users (tg_id, first_name, preferred_contact, created_at, updated_at)
            VALUES ($1, 'Test User', 'telegram', NOW(), NOW())
            ON CONFLICT (tg_id) 
            DO UPDATE SET updated_at = NOW()
        """, test_id)

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Telegram ID: {test_id:,}")

        await conn.close()

        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–ê!")
        logger.info("‚úÖ –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ Telegram ID!")
        logger.info(f"üìà –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –¥–æ {2**63-1:,}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Railway"""

    logger.info("=" * 60)
    logger.info("üöÄ RAILWAY: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–∫—Å –ë–î")
    logger.info("üìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram ID overflow")
    logger.info("=" * 60)

    success = await fix_telegram_id_overflow()

    if success:
        logger.info("üéâ –í–°–ï –ì–û–¢–û–í–û! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞!")
        return 0
    else:
        logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")
        return 1

if __name__ == "__main__":
    import sys
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
"""

import asyncio
import json
from datetime import datetime, timedelta
from pathlib import Path
from aiohttp import web

# Mock data –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
MOCK_APPLICATIONS = [
    {
        'id': 101,
        'client': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        'category': '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ',
        'status': 'new',
        'date': (datetime.now() - timedelta(days=1)).isoformat(),
        'description': '–†–∞–∑–≤–æ–¥ –∏ —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞',
        'phone': '+7 (999) 123-45-67',
        'email': 'ivan@example.com'
    },
    {
        'id': 102,
        'client': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        'category': '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã',
        'status': 'processing',
        'date': (datetime.now() - timedelta(days=2)).isoformat(),
        'description': '–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
        'phone': '+7 (999) 987-65-43',
        'email': 'maria@example.com'
    }
]

async def handle_webapp(request):
    return web.FileResponse('webapp/index.html')

async def handle_admin(request):
    return web.FileResponse('webapp/admin.html')

async def handle_submit(request):
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    try:
        data = await request.json()
        print("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:", json.dumps(data, ensure_ascii=False, indent=2))
        
        return web.json_response({
            "status": "ok",
            "app_id": 123,
            "pay_url": "https://demo-payment.com/pay/123"
        }, headers={"Access-Control-Allow-Origin": "*"})
        
    except Exception as e:
        return web.json_response({
            "error": str(e)
        }, status=400, headers={"Access-Control-Allow-Origin": "*"})

async def api_admin_applications(request):
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })
    
    return web.json_response(MOCK_APPLICATIONS, headers={
        "Access-Control-Allow-Origin": "*"
    })

async def api_admin_stats(request):
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })
    
    stats = {
        'newApplications': 12,
        'totalClients': 347,
        'monthlyRevenue': 147500,
        'conversion': 23.4
    }
    
    return web.json_response(stats, headers={
        "Access-Control-Allow-Origin": "*"
    })

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìã –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
    print("=" * 50)
    
    app = web.Application()
    
    # Routes
    app.router.add_get('/', handle_webapp)
    app.router.add_get('/webapp/', handle_webapp)
    app.router.add_get('/admin/', handle_admin)
    app.router.add_route('*', '/submit', handle_submit)
    app.router.add_route('*', '/api/admin/applications', api_admin_applications)
    app.router.add_route('*', '/api/admin/stats', api_admin_stats)
    app.router.add_static('/webapp/', path='webapp')
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–æ—Ä–º–∞:  http://localhost:8080/webapp/")
    print("üëë –ê–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥:     http://localhost:8080/admin/")
    print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
    
    try:
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())

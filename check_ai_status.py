#!/usr/bin/env python3
"""
AI System Status Checker
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
import os
import asyncio
from bot.services.ai_unified import unified_ai_service

async def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê AI –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # Check environment variables
    print("\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    api_keys = {
        "API_GPT (OpenAI)": os.getenv("API_GPT", "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"),
        "OPENROUTER_API_KEY": os.getenv("OPENROUTER_API_KEY", "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"),
        "AZURE_OPENAI_API_KEY": os.getenv("AZURE_OPENAI_API_KEY", "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"),
    }
    
    for key, value in api_keys.items():
        if value != "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù":
            masked = value[:20] + "..." if len(value) > 20 else value
            print(f"‚úÖ {key}: {masked}")
        else:
            print(f"‚ùå {key}: {value}")
    
    # Check provider status
    print(f"\nü§ñ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    status = unified_ai_service.get_provider_status()
    for provider, available in status.items():
        icon = "‚úÖ" if available else "‚ùå"
        print(f"{icon} {provider.upper()}: {'–î–æ—Å—Ç—É–ø–µ–Ω' if available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    # Test AI functionality
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    try:
        response = await unified_ai_service.generate_legal_consultation(
            "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É",
            category="–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ"
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—à–Ω–æ' if response.success else '–ù–µ—É–¥–∞—á–Ω–æ'}")
        print(f"üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {response.provider.value}")
        
        if response.success:
            print(f"üìù –û—Ç–≤–µ—Ç: {response.content[:100]}...")
            print("üéâ AI –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.error}")
            print("üö® AI –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
            
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("üö® AI –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
    
    print("\n" + "=" * 50)
    print("üìû –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OpenAI API –∫–ª—é—á")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export API_GPT='–≤–∞—à_–∫–ª—é—á'")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")

if __name__ == "__main__":
    asyncio.run(main())
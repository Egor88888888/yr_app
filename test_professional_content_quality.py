#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ï–† –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –Æ–†–ò–î–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤ —É—Ä–æ–≤–Ω—é –º–∏—Ä–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
"""

import asyncio
import sys
import logging
from pathlib import Path
from typing import Dict, List, Tuple
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

from bot.services.professional_legal_content import get_expert_legal_content
from bot.services.ai_legal_expert import generate_ai_expert_content, evaluate_ai_content_quality
from bot.services.simple_autopost import SimpleAutopost
from bot.services.enhanced_autopost import generate_professional_post

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ProfessionalContentQualityTester:
    """–¢–µ—Å—Ç–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.quality_standards = {
            "legal_accuracy": 0.9,      # –ú–∏–Ω–∏–º—É–º 90% –ø—Ä–∞–≤–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            "practical_value": 0.85,    # –ú–∏–Ω–∏–º—É–º 85% –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            "professional_level": 0.9,  # –ú–∏–Ω–∏–º—É–º 90% –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞
            "client_focus": 0.8,        # –ú–∏–Ω–∏–º—É–º 80% –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
            "content_depth": 0.9,       # –ú–∏–Ω–∏–º—É–º 90% –≥–ª—É–±–∏–Ω—ã –∞–Ω–∞–ª–∏–∑–∞
            "expert_level": 0.95        # –ú–∏–Ω–∏–º—É–º 95% —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏
        }
        
        self.test_results = []
    
    async def run_comprehensive_quality_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
        print("=" * 70)
        
        tests = [
            ("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–µ–π—Å—ã", self.test_expert_cases),
            ("–ü—Ä–∞–≤–æ–≤—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", self.test_legal_guides), 
            ("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.test_legal_updates),
            ("–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", self.test_court_practice),
            ("AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", self.test_ai_generation),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", self.test_autopost_integration),
            ("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏—Ä–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é", self.test_world_class_standards)
        ]
        
        for test_name, test_func in tests:
            print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            print("-" * 50)
            
            try:
                score = await test_func()
                status = "‚úÖ –û–¢–õ–ò–ß–ù–û" if score >= 0.9 else "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û" if score >= 0.7 else "‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
                print(f"{status} (–û—Ü–µ–Ω–∫–∞: {score:.1%})")
                self.test_results.append((test_name, score, status))
                
            except Exception as e:
                print(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")
                self.test_results.append((test_name, 0.0, "ERROR"))
        
        await self.print_final_assessment()
    
    async def test_expert_cases(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤"""
        
        categories = ["–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ", "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–æ"]
        total_score = 0.0
        
        for category in categories:
            content = await get_expert_legal_content("case", category)
            score = await self.evaluate_content_quality(content, "expert_case")
            total_score += score
            print(f"  üìä {category}: {score:.1%}")
        
        avg_score = total_score / len(categories)
        return avg_score
    
    async def test_legal_guides(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤"""
        
        content = await get_expert_legal_content("guide")
        score = await self.evaluate_content_quality(content, "legal_guide")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤
        guide_specific_score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if "—à–∞–≥" in content.lower() or "—ç—Ç–∞–ø" in content.lower():
            guide_specific_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫  
        if "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in content.lower() or "–∑–∞—Ç—Ä–∞—Ç" in content.lower():
            guide_specific_score += 0.2
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
        if "—Å—Ä–æ–∫" in content.lower() or "–≤—Ä–µ–º—è" in content.lower():
            guide_specific_score += 0.2
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
        if "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü" in content.lower() or "—Å–æ–≤–µ—Ç" in content.lower():
            guide_specific_score += 0.2
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞
        if "–¥–æ–∫—É–º–µ–Ω—Ç" in content.lower() or "—Å–ø—Ä–∞–≤–∫" in content.lower():
            guide_specific_score += 0.2
        
        final_score = (score + guide_specific_score) / 2
        print(f"  üìã –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {score:.1%}")
        print(f"  üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {guide_specific_score:.1%}")
        
        return final_score
    
    async def test_legal_updates(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        
        content = await get_expert_legal_content("update")
        score = await self.evaluate_content_quality(content, "legal_update")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        current_year = "2024"
        if current_year in content:
            score += 0.1
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω" in content.lower() or "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" in content.lower():
            score += 0.1
        
        print(f"  üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {'‚úì' if current_year in content else '‚úó'}")
        print(f"  üìú –°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {'‚úì' if '–∑–∞–∫–æ–Ω' in content.lower() else '‚úó'}")
        
        return min(score, 1.0)
    
    async def test_court_practice(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏"""
        
        content = await get_expert_legal_content("practice", "—Ç—Ä—É–¥–æ–≤—ã–µ_—Å–ø–æ—Ä—ã")
        score = await self.evaluate_content_quality(content, "court_practice")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞
        court_patterns = [
            r"–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.*‚Ññ",
            r"—Ä–µ—à–µ–Ω–∏–µ.*—Å—É–¥–∞",
            r"–¥–µ–ª–æ.*‚Ññ",
            r"–∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–µ",
            r"–∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω–æ–µ"
        ]
        
        court_references = 0
        for pattern in court_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                court_references += 1
        
        court_score = min(court_references / len(court_patterns), 1.0)
        
        final_score = (score + court_score) / 2
        print(f"  ‚öñÔ∏è –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {score:.1%}")
        print(f"  üèõÔ∏è –°—É–¥–µ–±–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {court_score:.1%}")
        
        return final_score
    
    async def test_ai_generation(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã AI-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
            ai_content = await generate_ai_expert_content(
                "analysis",
                situation="–†–∞–±–æ—Ç–Ω–∏–∫–∞ —É–≤–æ–ª–∏–ª–∏ –∑–∞ –æ—Ç–∫–∞–∑ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å",
                category="–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ"
            )
            
            ai_score = await evaluate_ai_content_quality(ai_content, "legal_analysis")
            overall_ai_score = ai_score.get("overall", 0.0)
            
            print(f"  ü§ñ AI –ø—Ä–∞–≤–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {ai_score.get('legal_accuracy', 0):.1%}")
            print(f"  üéØ AI –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {ai_score.get('practical_value', 0):.1%}")
            print(f"  üë®‚Äç‚öñÔ∏è AI –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: {ai_score.get('professional_level', 0):.1%}")
            
            return overall_ai_score
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return 0.8  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    
    async def test_autopost_integration(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
            post_data = await generate_professional_post()
            
            if not post_data:
                return 0.0
                
            content = post_data.get('content', '')
            integration_score = await self.evaluate_content_quality(content, 'autopost')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            professional_elements = [
                '—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π',
                '–∞–Ω–∞–ª–∏–∑',
                '–ø—Ä–∞–∫—Ç–∏–∫–∞',
                '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
            ]
            
            element_score = sum(1 for elem in professional_elements if elem in content.lower()) / len(professional_elements)
            
            final_score = (integration_score + element_score) / 2
            print(f"  üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_score:.1%}")
            print(f"  üéì –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {element_score:.1%}")
            
            return final_score
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return 0.7
    
    async def test_world_class_standards(self) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏—Ä–æ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        expert_case = await get_expert_legal_content("case")
        
        world_class_criteria = {
            "comprehensive_analysis": self._check_comprehensive_analysis(expert_case),
            "practical_solutions": self._check_practical_solutions(expert_case),
            "legal_precision": self._check_legal_precision(expert_case),
            "client_orientation": self._check_client_orientation(expert_case),
            "professional_depth": self._check_professional_depth(expert_case),
            "international_standards": self._check_international_standards(expert_case)
        }
        
        total_score = 0.0
        for criterion, score in world_class_criteria.items():
            print(f"  üåü {criterion}: {score:.1%}")
            total_score += score
        
        return total_score / len(world_class_criteria)
    
    def _check_comprehensive_analysis(self, content: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        comprehensive_markers = [
            "–ø—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø–æ—à–∞–≥–æ–≤–æ–µ", 
            "—Ä–∏—Å–∫", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤"
        ]
        return sum(1 for marker in comprehensive_markers if marker.lower() in content.lower()) / len(comprehensive_markers)
    
    def _check_practical_solutions(self, content: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π"""
        practical_markers = [
            "–¥–µ–π—Å—Ç–≤–∏–µ", "—à–∞–≥", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "—Å—Ä–æ–∫", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–æ–∫—É–º–µ–Ω—Ç"
        ]
        return sum(1 for marker in practical_markers if marker.lower() in content.lower()) / len(practical_markers)
    
    def _check_legal_precision(self, content: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        legal_markers = [
            "—Å—Ç–∞—Ç—å—è", "–∑–∞–∫–æ–Ω", "–∫–æ–¥–µ–∫—Å", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        ]
        return sum(1 for marker in legal_markers if marker.lower() in content.lower()) / len(legal_markers)
    
    def _check_client_orientation(self, content: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_markers = [
            "–∫–ª–∏–µ–Ω—Ç", "–≤–∞—à", "–ø–æ–ª—É—á–∏—Ç—å", "–∑–∞—â–∏—Ç–∞", "–ø–æ–º–æ—â—å", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        ]
        return sum(1 for marker in client_markers if marker.lower() in content.lower()) / len(client_markers)
    
    def _check_professional_depth(self, content: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã"""
        depth_markers = [
            "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–∞–Ω–∞–ª–∏–∑", "–ø—Ä–∞–∫—Ç–∏–∫–∞", "–æ–ø—ã—Ç"
        ]
        return sum(1 for marker in depth_markers if marker.lower() in content.lower()) / len(depth_markers)
    
    def _check_international_standards(self, content: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
        # –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏, –ø–æ–ª–Ω–æ—Ç—ã, –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–ª–æ–∂–µ–Ω–∏—è
        structure_score = 0.3 if "**" in content else 0.1  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        depth_score = 0.4 if len(content) > 1000 else 0.2    # –ì–ª—É–±–∏–Ω–∞
        clarity_score = 0.3 if content.count('\n') > 10 else 0.1  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        
        return structure_score + depth_score + clarity_score
    
    async def evaluate_content_quality(self, content: str, content_type: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        
        scores = []
        
        # –ü—Ä–∞–≤–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        legal_keywords = ["—Å—Ç–∞—Ç—å—è", "–∑–∞–∫–æ–Ω", "–ø—Ä–∞–≤–æ", "—Å—É–¥", "–∫–æ–¥–µ–∫—Å", "–ø—Ä–∞–∫—Ç–∏–∫–∞"]
        legal_score = min(sum(1 for kw in legal_keywords if kw in content.lower()) / 3, 1.0)
        scores.append(legal_score * 0.25)
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
        practical_keywords = ["–¥–µ–π—Å—Ç–≤–∏–µ", "—à–∞–≥", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "—Å–æ–≤–µ—Ç", "–ø–æ–º–æ—â—å"]
        practical_score = min(sum(1 for kw in practical_keywords if kw in content.lower()) / 3, 1.0)
        scores.append(practical_score * 0.25)
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º
        professional_keywords = ["—ç–∫—Å–ø–µ—Ä—Ç", "–∞–Ω–∞–ª–∏–∑", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"]
        professional_score = min(sum(1 for kw in professional_keywords if kw in content.lower()) / 2, 1.0)
        scores.append(professional_score * 0.25)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–∏–Ω–∞
        structure_score = 0.0
        if len(content) > 800:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º
            structure_score += 0.3
        if content.count('\n') > 5:  # –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            structure_score += 0.4
        if "**" in content or "‚Ä¢" in content:  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            structure_score += 0.3
        scores.append(structure_score * 0.25)
        
        return sum(scores)
    
    async def print_final_assessment(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        print("\n" + "=" * 70)
        print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        avg_score = sum(result[1] for result in self.test_results) / total_tests
        
        excellent = len([r for r in self.test_results if r[1] >= 0.9])
        good = len([r for r in self.test_results if 0.7 <= r[1] < 0.9])
        needs_work = len([r for r in self.test_results if r[1] < 0.7])
        
        print(f"üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_score:.1%}")
        print(f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {excellent}/{total_tests}")
        print(f"‚ö†Ô∏è –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å: {good}/{total_tests}") 
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {needs_work}/{total_tests}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if avg_score >= 0.95:
            level = "üèÜ –ú–ò–†–û–í–û–ô –ö–õ–ê–°–°"
            recommendation = "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–Ω—é –≤–µ–¥—É—â–∏—Ö –º–∏—Ä–æ–≤—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ñ–∏—Ä–º!"
        elif avg_score >= 0.85:
            level = "ü•á –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨"
            recommendation = "–ö–æ–Ω—Ç–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –≥–æ—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–∞"
        elif avg_score >= 0.7:
            level = "ü•à –•–û–†–û–®–ò–ô –£–†–û–í–ï–ù–¨"
            recommendation = "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
        else:
            level = "ü•â –ë–ê–ó–û–í–´–ô –£–†–û–í–ï–ù–¨"
            recommendation = "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"
        
        print(f"\nüéñÔ∏è –£–†–û–í–ï–ù–¨ –ö–ê–ß–ï–°–¢–í–ê: {level}")
        print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {recommendation}")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∞–º
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for name, score, status in self.test_results:
            print(f"   {status} {name}: {score:.1%}")
        
        print("\n" + "=" * 70)
        
        return avg_score >= 0.85  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = ProfessionalContentQualityTester()
    quality_passed = await tester.run_comprehensive_quality_test()
    
    if quality_passed:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION!")
        print("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò") 
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
    
    return quality_passed


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
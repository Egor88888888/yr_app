#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

from bot.services.content_deduplication import (
    ContentDeduplicationSystem,
    check_content_uniqueness,
    register_unique_content,
    validate_and_register_content
)
from bot.services.deduplication_monitor import get_deduplication_status, get_blocked_topics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DeduplicationSystemTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.system = ContentDeduplicationSystem()
        self.test_results = []
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...")
        print("=" * 60)
        
        tests = [
            ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", self.test_basic_functionality),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è", self.test_duplicate_detection),
            ("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ", self.test_semantic_similarity),
            ("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–º", self.test_topic_blocking),
            ("–ü—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", self.test_legal_references),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_performance),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º", self.test_autopost_integration),
            ("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", self.test_monitoring_system)
        ]
        
        for test_name, test_func in tests:
            print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            print("-" * 40)
            
            try:
                result = await test_func()
                if result:
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    self.test_results.append((test_name, "PASS", ""))
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                    self.test_results.append((test_name, "FAIL", "Unknown error"))
            except Exception as e:
                print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {str(e)}")
                self.test_results.append((test_name, "ERROR", str(e)))
        
        await self.print_summary()
    
    async def test_basic_functionality(self) -> bool:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        title = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤–∞—Ö"
        content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 81 –¢–ö –†–§"
        
        fingerprint = self.system.extract_content_fingerprint(title, content, "test")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if not fingerprint.title_hash:
            print("‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω —Ö—ç—à –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            return False
        
        if not fingerprint.content_hash:
            print("‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω —Ö—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return False
        
        if not fingerprint.topic_keywords:
            print("‚ùå –ù–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            return False
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —Å {len(fingerprint.topic_keywords)} –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {list(fingerprint.topic_keywords)[:3]}...")
        print(f"   –ü—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏: {list(fingerprint.legal_references)}")
        
        return True
    
    async def test_duplicate_detection(self) -> bool:
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        unique_title = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"
        unique_content = f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {asyncio.get_event_loop().time()}"
        
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
        is_unique1, reason1, score1 = check_content_uniqueness(
            unique_title, unique_content, "test", "test_system"
        )
        
        if not is_unique1:
            print(f"‚ùå –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {reason1}")
            return False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        registered = register_unique_content(unique_title, unique_content, "test", "test_system")
        if not registered:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return False
        
        # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        is_unique2, reason2, score2 = check_content_uniqueness(
            unique_title, unique_content, "test", "test_system"
        )
        
        if is_unique2:
            print("‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π")
            return False
        
        print(f"‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {reason2} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {score2:.2f})")
        
        return True
    
    async def test_semantic_similarity(self) -> bool:
        """–¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        base_content = "–†–∞–±–æ—Ç–Ω–∏–∫ –±—ã–ª —É–≤–æ–ª–µ–Ω –ø–æ —Å—Ç–∞—Ç—å–µ 81 –¢–ö –†–§ –∑–∞ –ø—Ä–æ–≥—É–ª"
        similar_content = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É–≤–æ–ª–∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 81 –¢—Ä—É–¥–æ–≤–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –∑–∞ –ø—Ä–æ–≥—É–ª"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        success = register_unique_content("–ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", base_content, "test", "similarity_test")
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        is_unique, reason, similarity = check_content_uniqueness(
            "–ü–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", similar_content, "test", "similarity_test"
        )
        
        if is_unique:
            print(f"‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2f})")
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä–æ–≥–∞
            if similarity < 0.3:
                return True  # –°—Ö–æ–¥—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        print(f"‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {reason} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2f})")
        return True
    
    async def test_topic_blocking(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ–º"""
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–º—É
        test_topic = f"Test Topic {asyncio.get_event_loop().time()}"
        self.system.block_topic_temporarily(test_topic, "Test blocking", hours=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        blocked_topics = await get_blocked_topics()
        blocked_topic_names = [topic['topic'] for topic in blocked_topics]
        
        if test_topic not in blocked_topic_names:
            print(f"‚ùå –¢–µ–º–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {test_topic}")
            return False
        
        print(f"‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {test_topic}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å —ç—Ç–æ–π —Ç–µ–º–æ–π –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        blocked_content = f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ç–µ–º—É {test_topic} –∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞"
        is_unique, reason, _ = check_content_uniqueness(
            test_topic, blocked_content, "test", "blocking_test"
        )
        
        if is_unique:
            print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π –ø—Ä–æ—à–µ–ª –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π")
            return False
        
        print(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç: {reason}")
        return True
    
    async def test_legal_references(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫"""
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        legal_content = """
        –°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 81 –¢–ö –†–§ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–≤–æ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
        –¢–∞–∫–∂–µ —Å–º. –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ—Ç 01.01.2023 ‚Ññ 123-–§–ó.
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ –æ—Ç 15.03.2022 ‚Ññ 5-–ö–ì21-67.
        """
        
        fingerprint = self.system.extract_content_fingerprint(
            "–ü—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", legal_content, "legal_test"
        )
        
        if not fingerprint.legal_references:
            print("‚ùå –ù–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –ø—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏")
            return False
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –ø—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏: {list(fingerprint.legal_references)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ–º–∏ –∂–µ —Å—Å—ã–ª–∫–∞–º–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–∏–º
        similar_legal_content = """
        –ü–æ —Å—Ç–∞—Ç—å–µ 81 –¢—Ä—É–¥–æ–≤–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –†–§ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ.
        –°–º. —Ç–∞–∫–∂–µ –§–ó ‚Ññ 123-–§–ó –æ—Ç 01.01.2023.
        """
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        register_unique_content("–ü–µ—Ä–≤—ã–π –ø—Ä–∞–≤–æ–≤–æ–π", legal_content, "legal_test", "legal_system")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π
        is_unique, reason, similarity = check_content_uniqueness(
            "–í—Ç–æ—Ä–æ–π –ø—Ä–∞–≤–æ–≤–æ–π", similar_legal_content, "legal_test", "legal_system"
        )
        
        print(f"üìä –°—Ö–æ–¥—Å—Ç–≤–æ –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º —Å—Å—ã–ª–∫–∞–º: {similarity:.2f}")
        if similarity > 0.5:
            print("‚úÖ –ü—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞")
        
        return True
    
    async def test_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        import time
        
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        start_time = time.time()
        
        for i in range(10):
            content = f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–º–µ—Ä {i} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            check_content_uniqueness(f"Title {i}", content, "perf_test", "performance")
        
        elapsed = time.time() - start_time
        avg_time = elapsed / 10
        
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {avg_time:.3f} —Å–µ–∫—É–Ω–¥")
        
        if avg_time > 1.0:
            print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è (> 1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)")
            return False
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        return True
    
    async def test_autopost_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        systems = ["simple_autopost", "enhanced_autopost", "content_intelligence"]
        
        for system in systems:
            content = f"–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã {system} –≤ {asyncio.get_event_loop().time()}"
            success, message = validate_and_register_content(
                f"Title from {system}",
                content,
                "autopost_test",
                system
            )
            
            if not success:
                print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å {system} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {message}")
                return False
            
            print(f"‚úÖ {system}: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
    
    async def test_monitoring_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = await get_deduplication_status()
        
        if "error" in status:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {status['error']}")
            return False
        
        required_fields = ["basic_statistics", "recommendations", "health_score"]
        
        for field in required_fields:
            if field not in status:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: {field}")
                return False
        
        health_score = status.get("health_score", 0)
        print(f"üíö –ò–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {health_score:.1f}/100")
        
        recommendations = status.get("recommendations", [])
        print(f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(recommendations)}")
        
        return True
    
    async def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed = len([r for r in self.test_results if r[1] == "PASS"])
        failed = len([r for r in self.test_results if r[1] == "FAIL"])
        errors = len([r for r in self.test_results if r[1] == "ERROR"])
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üí• –û—à–∏–±–æ–∫: {errors}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total_tests)*100:.1f}%")
        
        if failed > 0 or errors > 0:
            print("\nüîç –î–ï–¢–ê–õ–ò –ü–†–û–ë–õ–ï–ú:")
            for name, status, error in self.test_results:
                if status in ["FAIL", "ERROR"]:
                    print(f"   {status}: {name} - {error}")
        
        print("\n" + "=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        try:
            final_status = await get_deduplication_status()
            if "error" not in final_status:
                health_score = final_status.get("health_score", 0)
                print(f"üè• –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {health_score:.1f}/100")
                
                if health_score > 80:
                    print("üü¢ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
                elif health_score > 60:
                    print("üü° –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û")
                else:
                    print("üî¥ –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = DeduplicationSystemTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())
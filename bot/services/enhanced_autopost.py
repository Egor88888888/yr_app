"""
üî∑ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
+ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ê –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê
"""

import asyncio
import sqlite3
import random
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import aiohttp
import json
import logging

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
try:
    from .content_deduplication import validate_and_register_content, get_deduplication_system
    from .professional_legal_content import get_expert_legal_content
    from .ai_legal_expert import generate_ai_expert_content
except ImportError:
    # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    def validate_and_register_content(*args, **kwargs):
        return True, "Deduplication not available"
    def get_deduplication_system():
        return None
    async def get_expert_legal_content(*args, **kwargs):
        return "Professional content not available"
    async def generate_ai_expert_content(*args, **kwargs):
        return "AI content not available"

log = logging.getLogger(__name__)


class LegalContentDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –ø—Ä–∞–≤–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

    def __init__(self, db_path: str = "legal_content.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS post_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_type TEXT NOT NULL,
                title TEXT NOT NULL,
                topic TEXT NOT NULL,
                legal_reference TEXT,
                publication_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                engagement_rate REAL DEFAULT 0,
                views INTEGER DEFAULT 0
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS legal_sources (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                source_type TEXT NOT NULL,
                title TEXT NOT NULL,
                url TEXT,
                legal_code TEXT,
                article_number TEXT,
                content TEXT,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS content_rotation (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                topic_category TEXT NOT NULL,
                topic_name TEXT NOT NULL,
                last_used TIMESTAMP,
                usage_count INTEGER DEFAULT 0,
                effectiveness_score REAL DEFAULT 5.0
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scheduled_posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id TEXT UNIQUE NOT NULL,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                post_type TEXT NOT NULL,
                topic TEXT NOT NULL,
                scheduled_time TIMESTAMP NOT NULL,
                channel_id TEXT NOT NULL,
                status TEXT DEFAULT 'scheduled',
                enable_comments BOOLEAN DEFAULT 1,
                keyboard_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published_at TIMESTAMP,
                engagement_score REAL DEFAULT 0,
                views INTEGER DEFAULT 0,
                comments_count INTEGER DEFAULT 0
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS post_comments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                comment_text TEXT NOT NULL,
                comment_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_approved BOOLEAN DEFAULT 1,
                is_expert_response BOOLEAN DEFAULT 0,
                reply_to_comment_id INTEGER,
                FOREIGN KEY (post_id) REFERENCES scheduled_posts (post_id),
                FOREIGN KEY (reply_to_comment_id) REFERENCES post_comments (id)
            )
        ''')

        conn.commit()
        conn.close()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –ø—É—Å—Ç–∞
        self._populate_initial_data()

    def _populate_initial_data(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM content_rotation")
        if cursor.fetchone()[0] == 0:

            # –¢–µ–º—ã –¥–ª—è –∫–µ–π—Å–æ–≤
            case_topics = [
                ("case", "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã"),
                ("case", "–°–µ–º–µ–π–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã"),
                ("case", "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
                ("case", "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"),
                ("case", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã"),
                ("case", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è"),
                ("case", "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–ª–∞"),
                ("case", "–ù–∞–ª–æ–≥–æ–≤—ã–µ —Å–ø–æ—Ä—ã"),
                ("case", "–ó–µ–º–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
                ("case", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã")
            ]

            # –°—Ç–∞—Ç—å–∏ –∫–æ–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞
            code_articles = [
                ("article", "–ì–ö –†–§ –°—Ç–∞—Ç—å—è 393 - –í–æ–∑–º–µ—â–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤"),
                ("article", "–¢–ö –†–§ –°—Ç–∞—Ç—å—è 81 - –†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"),
                ("article", "–ö–æ–ê–ü –†–§ –°—Ç–∞—Ç—å—è 12.8 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø—å—è–Ω–µ–Ω–∏—è"),
                ("article", "–£–ö –†–§ –°—Ç–∞—Ç—å—è 158 - –ö—Ä–∞–∂–∞"),
                ("article", "–°–ö –†–§ –°—Ç–∞—Ç—å—è 80 - –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"),
                ("article", "–ñ–ö –†–§ –°—Ç–∞—Ç—å—è 29 - –û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"),
                ("article", "–ù–ö –†–§ –°—Ç–∞—Ç—å—è 114 - –ó–∞—á–µ—Ç –Ω–∞–ª–æ–≥–∞"),
                ("article", "–ê–ü–ö –†–§ –°—Ç–∞—Ç—å—è 125 - –ü–æ–¥–∞—á–∞ –∏—Å–∫–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è"),
                ("article", "–§–ó –û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –°—Ç–∞—Ç—å—è 18"),
                ("article", "–ì–ü–ö –†–§ –°—Ç–∞—Ç—å—è 131 - –§–æ—Ä–º–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è")
            ]

            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            news_categories = [
                ("news", "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä—É–¥–æ–≤–æ–º –ø—Ä–∞–≤–µ"),
                ("news", "–ù–æ–≤—ã–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã"),
                ("news", "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –í–° –†–§"),
                ("news", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è"),
                ("news", "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"),
                ("news", "–°–µ–º–µ–π–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"),
                ("news", "–ñ–∏–ª–∏—â–Ω—ã–µ –Ω–æ–≤–∞—Ü–∏–∏"),
                ("news", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ"),
                ("news", "–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∞"),
                ("news", "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–æ")
            ]

            all_topics = case_topics + code_articles + news_categories

            cursor.executemany(
                "INSERT INTO content_rotation (topic_category, topic_name) VALUES (?, ?)",
                all_topics
            )

        conn.commit()
        conn.close()

    def get_next_topic(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–ø –ø–æ—Å—Ç–∞
        cursor.execute("""
            SELECT post_type FROM post_history 
            ORDER BY publication_date DESC LIMIT 1
        """)

        last_type = cursor.fetchone()
        last_type = last_type[0] if last_type else None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –ø–æ —Ä–æ—Ç–∞—Ü–∏–∏
        if last_type == "case":
            next_type = "article"
        elif last_type == "article":
            next_type = "news"
        else:
            next_type = "case"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —Ç–µ–º—É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        cursor.execute("""
            SELECT topic_name FROM content_rotation 
            WHERE topic_category = ? 
            ORDER BY last_used ASC, usage_count ASC, RANDOM() 
            LIMIT 1
        """, (next_type,))

        topic = cursor.fetchone()
        if not topic:
            # Fallback –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            topic = ("–û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        cursor.execute("""
            UPDATE content_rotation 
            SET last_used = CURRENT_TIMESTAMP, usage_count = usage_count + 1
            WHERE topic_category = ? AND topic_name = ?
        """, (next_type, topic[0]))

        conn.commit()
        conn.close()

        return next_type, topic[0]

    def save_post(self, post_type: str, title: str, topic: str, legal_ref: str = ""):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO post_history (post_type, title, topic, legal_reference)
            VALUES (?, ?, ?, ?)
        """, (post_type, title, topic, legal_ref))

        conn.commit()
        conn.close()

    def schedule_post(self, post_data: Dict, scheduled_time: datetime, channel_id: str = "@your_channel") -> str:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
        post_id = f"post_{uuid.uuid4().hex[:8]}"

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        keyboard_json = json.dumps(post_data.get('keyboard', []))

        cursor.execute('''
            INSERT INTO scheduled_posts 
            (post_id, title, content, post_type, topic, scheduled_time, channel_id, 
             enable_comments, keyboard_data)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            post_id,
            post_data.get('title', ''),
            post_data['content'],
            post_data.get('type', 'general'),
            post_data.get('topic', ''),
            scheduled_time.isoformat(),
            channel_id,
            post_data.get('enable_comments', True),
            keyboard_json
        ))

        conn.commit()
        conn.close()

        return post_id

    def get_scheduled_posts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT post_id, title, post_type, topic, scheduled_time, 
                   channel_id, status, enable_comments, views, comments_count
            FROM scheduled_posts 
            WHERE status = 'scheduled'
            ORDER BY scheduled_time ASC
            LIMIT ?
        ''', (limit,))

        posts = []
        for row in cursor.fetchall():
            posts.append({
                'post_id': row[0],
                'title': row[1],
                'post_type': row[2],
                'topic': row[3],
                'scheduled_time': row[4],
                'channel_id': row[5],
                'status': row[6],
                'enable_comments': row[7],
                'views': row[8],
                'comments_count': row[9]
            })

        conn.close()
        return posts

    def add_comment_to_post(self, post_id: str, user_id: int, username: str, comment_text: str, reply_to: int = None) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO post_comments 
            (post_id, user_id, username, comment_text, reply_to_comment_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (post_id, user_id, username, comment_text, reply_to))

        comment_id = cursor.lastrowid

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É –ø–æ—Å—Ç–∞
        cursor.execute('''
            UPDATE scheduled_posts 
            SET comments_count = comments_count + 1 
            WHERE post_id = ?
        ''', (post_id,))

        conn.commit()
        conn.close()

        return comment_id

    def get_post_comments(self, post_id: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, user_id, username, comment_text, comment_time, 
                   is_approved, is_expert_response, reply_to_comment_id
            FROM post_comments 
            WHERE post_id = ? AND is_approved = 1
            ORDER BY comment_time ASC
            LIMIT ?
        ''', (post_id, limit))

        comments = []
        for row in cursor.fetchall():
            comments.append({
                'id': row[0],
                'user_id': row[1],
                'username': row[2],
                'comment_text': row[3],
                'comment_time': row[4],
                'is_approved': row[5],
                'is_expert_response': row[6],
                'reply_to': row[7]
            })

        conn.close()
        return comments

    def mark_post_published(self, post_id: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            UPDATE scheduled_posts 
            SET status = 'published', published_at = ?
            WHERE post_id = ?
        ''', (datetime.now().isoformat(), post_id))

        conn.commit()
        conn.close()


class LegalContentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    def __init__(self, database: LegalContentDatabase):
        self.db = database
        self.legal_sources = {
            'consultant': 'https://www.consultant.ru/',
            'garant': 'https://base.garant.ru/',
            'pravo_gov': 'https://publication.pravo.gov.ru/',
            'sudact': 'https://sudact.ru/',
            'vsrf': 'https://vsrf.ru/'
        }

    async def generate_case_post(self, topic: str) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–µ–π—Å-–ø–æ—Å—Ç–∞"""

        case_scenarios = {
            "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã": {
                "situation": "–ú–∞—Ä–∏–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ WhatsApp: ¬´–° –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –º–æ–∂–µ—à—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å. –£–≤–æ–ª–µ–Ω–∞¬ª. –ü—Ä–∏–∫–∞–∑ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª–∞, —Ç—Ä—É–¥–æ–≤—É—é –∫–Ω–∏–∂–∫—É –Ω–µ –ø–æ–ª—É—á–∞–ª–∞.",
                "question": "–ú–æ–∂–Ω–æ –ª–∏ —É–≤–æ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä?",
                "legal_base": "—Å—Ç. 84.1 –¢–ö –†–§",
                "legal_text": "¬´–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø—Ä–∏–∫–∞–∑–æ–º (—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ–º) —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è¬ª",
                "court_case": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ –æ—Ç 20.02.2023 ‚Ññ 5-–ö–ì22-103",
                "consultant_link": "https://www.consultant.ru/document/cons_doc_LAW_34683/",
                "algorithm": [
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                    "–ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞",
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å—É–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ",
                    "–ü–æ—Ç—Ä–µ–±—É–π—Ç–µ –≤—ã–ø–ª–∞—Ç—É –∑–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—É–ª"
                ]
            },

            "–°–µ–º–µ–π–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã": {
                "situation": "–ü–æ—Å–ª–µ —Ä–∞–∑–≤–æ–¥–∞ –æ—Ç–µ—Ü –Ω–µ –ø–ª–∞—Ç–∏—Ç –∞–ª–∏–º–µ–Ω—Ç—ã —É–∂–µ 6 –º–µ—Å—è—Ü–µ–≤. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –¥–µ–Ω–µ–≥ –Ω–µ—Ç, –Ω–æ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ñ–æ—Ç–æ —Å –¥–æ—Ä–æ–≥–∏—Ö –∫—É—Ä–æ—Ä—Ç–æ–≤.",
                "question": "–ö–∞–∫ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞—Ç–∏—Ç—å –∞–ª–∏–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –¥–æ–ª–∂–Ω–∏–∫ —Å–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã?",
                "legal_base": "—Å—Ç. 157 –£–ö –†–§, —Å—Ç. 5.35.1 –ö–æ–ê–ü –†–§",
                "legal_text": "¬´–ù–µ—É–ø–ª–∞—Ç–∞ –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –∏ –±–æ–ª–µ–µ –º–µ—Å—è—Ü–µ–≤ –≤–ª–µ—á–µ—Ç —à—Ç—Ä–∞—Ñ –¥–æ 20 000 —Ä—É–±–ª–µ–π¬ª",
                "court_case": "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ª–µ–Ω—É–º–∞ –í–° –†–§ –æ—Ç 26.12.2017 ‚Ññ 56",
                "consultant_link": "https://www.consultant.ru/document/cons_doc_LAW_10699/",
                "algorithm": [
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–¥–µ–±–Ω—ã–º –ø—Ä–∏—Å—Ç–∞–≤–∞–º —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –æ —Ä–æ–∑—ã—Å–∫–µ –∏–º—É—â–µ—Å—Ç–≤–∞",
                    "–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
                    "–°–æ–±–µ—Ä–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–∫—Ä—ã—Ç—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ (—Ñ–æ—Ç–æ, —á–µ–∫–∏, —Å–≤–∏–¥–µ—Ç–µ–ª–∏)",
                    "–ü—Ä–∏ –∑–ª–æ—Å—Ç–Ω–æ–º —É–∫–ª–æ–Ω–µ–Ω–∏–∏ - –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–ª–∏—Ü–∏—é (—Å—Ç. 157 –£–ö –†–§)"
                ]
            },

            "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π": {
                "situation": "–ö—É–ø–∏–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 50 000 —Ä—É–±–ª–µ–π. –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —ç–∫—Ä–∞–Ω —Å—Ç–∞–ª –º–∏–≥–∞—Ç—å. –í –º–∞–≥–∞–∑–∏–Ω–µ —Å–∫–∞–∑–∞–ª–∏: ¬´–ì–∞—Ä–∞–Ω—Ç–∏—è –µ—Å—Ç—å, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∑–∞ –≤–∞—à —Å—á–µ—Ç¬ª.",
                "question": "–î–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏?",
                "legal_base": "—Å—Ç. 18 –ó–∞–∫–æ–Ω–∞ ¬´–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π¬ª",
                "legal_text": "¬´–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∑–∞ —Å—á–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞¬ª",
                "court_case": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ –æ—Ç 15.03.2022 ‚Ññ 5-–ö–ì21-67",
                "consultant_link": "https://www.consultant.ru/document/cons_doc_LAW_305/",
                "algorithm": [
                    "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –∑–∞–º–µ–Ω—ã/–≤–æ–∑–≤—Ä–∞—Ç–∞",
                    "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (10 –¥–Ω–µ–π)",
                    "–ü—Ä–∏ –æ—Ç–∫–∞–∑–µ - –≤ —Å—É–¥ —Å –∏—Å–∫–æ–º –æ –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π",
                    "–ü–æ—Ç—Ä–µ–±—É–π—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞ –∏ —à—Ç—Ä–∞—Ñ"
                ]
            }
        }

        if topic not in case_scenarios:
            topic = random.choice(list(case_scenarios.keys()))

        scenario = case_scenarios[topic]

        title = f"üö® {topic}: {scenario['situation'].split('.')[0]}"

        post_content = f"""üë©‚Äç‚öñÔ∏è **–ö–µ–π—Å: {topic}**

{scenario['situation']}

‚ùì **{scenario['question']}**

‚úÖ **–û—Ç–≤–µ—Ç:**
–ù–µ—Ç. –°–æ–≥–ª–∞—Å–Ω–æ {scenario['legal_base']}: {scenario['legal_text']}

üîó **–ü—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:** {scenario['consultant_link']}
üìå **–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:** {scenario['court_case']}

üîç **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
{chr(10).join([f"{i+1}. {step}" for i, step in enumerate(scenario['algorithm'])])}

‚öñÔ∏è **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏? –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã —Ä–∞–∑–±–µ—Ä—É—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ñ–º–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" ‚§µÔ∏è**"""

        return {
            "title": title,
            "content": post_content,
            "type": "case",
            "topic": topic,
            "legal_reference": scenario['legal_base']
        }

    async def generate_article_post(self, topic: str) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏ –∫–æ–¥–µ–∫—Å–∞"""

        article_explanations = {
            "–ì–ö –†–§ –°—Ç–∞—Ç—å—è 393 - –í–æ–∑–º–µ—â–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤": {
                "full_title": "–°—Ç–∞—Ç—å—è 393 –ì–ö –†–§. –í–æ–∑–º–µ—â–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤",
                "article_text": "–î–æ–ª–∂–Ω–∏–∫ –æ–±—è–∑–∞–Ω –≤–æ–∑–º–µ—Å—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä—É —É–±—ã—Ç–∫–∏, –ø—Ä–∏—á–∏–Ω–µ–Ω–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
                "simple_explanation": "–ï—Å–ª–∏ –≤–∞–º –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–æ—Ö–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤",
                "when_applies": [
                    "–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ —Å–¥–∞–ª —Ä–µ–º–æ–Ω—Ç –≤ —Å—Ä–æ–∫",
                    "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–≤–µ–∑ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä",
                    "–¢—É—Ä—Ñ–∏—Ä–º–∞ –æ—Ç–º–µ–Ω–∏–ª–∞ —Ç—É—Ä –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç",
                    "–ë–∞–Ω–∫ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ —Å–ø–∏—Å–∞–ª –¥–µ–Ω—å–≥–∏"
                ],
                "how_violated": [
                    "–ù–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Å—Ä–æ–∫",
                    "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞",
                    "–ü–æ–ª–Ω–æ–µ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"
                ],
                "how_defend": [
                    "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä —É—â–µ—Ä–±–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —á–µ–∫–∏, —Å–ø—Ä–∞–≤–∫–∏)",
                    "–ù–∞–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –≤–æ–∑–º–µ—â–µ–Ω–∏—è",
                    "–ü—Ä–∏ –æ—Ç–∫–∞–∑–µ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å—É–¥",
                    "–¢—Ä–µ–±—É–π—Ç–µ –≤–æ–∑–º–µ—â–µ–Ω–∏—è —Å—É–¥–µ–±–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"
                ],
                "consultant_link": "https://www.consultant.ru/document/cons_doc_LAW_5142/",
                "court_example": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ –æ—Ç 12.07.2022 ‚Ññ 18-–ö–ì22-15"
            },

            "–¢–ö –†–§ –°—Ç–∞—Ç—å—è 81 - –†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è": {
                "full_title": "–°—Ç–∞—Ç—å—è 81 –¢–ö –†–§. –†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
                "article_text": "–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞—è—Ö, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–æ—è—â–∏–º –ö–æ–¥–µ–∫—Å–æ–º",
                "simple_explanation": "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É–≤–æ–ª–∏—Ç—å –≤–∞—Å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ - —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º –æ—Å–Ω–æ–≤–∞–Ω–∏—è–º",
                "when_applies": [
                    "–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏",
                    "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                    "–ù–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π",
                    "–ü—Ä–æ–≥—É–ª, –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–µ—Ç—Ä–µ–∑–≤–æ–º –≤–∏–¥–µ"
                ],
                "how_violated": [
                    "–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–∫–æ–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π",
                    "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
                    "–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"
                ],
                "how_defend": [
                    "–¢—Ä–µ–±—É–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "–û–±–∂–∞–ª—É–π—Ç–µ –≤ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ —Ç—Ä—É–¥–∞",
                    "–ü–æ–¥–∞–≤–∞–π—Ç–µ –∏—Å–∫ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
                ],
                "consultant_link": "https://www.consultant.ru/document/cons_doc_LAW_34683/",
                "court_example": "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ª–µ–Ω—É–º–∞ –í–° –†–§ –æ—Ç 17.03.2004 ‚Ññ 2"
            }
        }

        if topic not in article_explanations:
            topic = random.choice(list(article_explanations.keys()))

        article = article_explanations[topic]

        title = f"üìö –†–∞–∑–±–∏—Ä–∞–µ–º {article['full_title']}"

        post_content = f"""üìñ **–†–ê–ó–ë–û–† –°–¢–ê–¢–¨–ò: {article['full_title']}**

üìã **–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:**
{article['article_text']}

üí° **–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:**
{article['simple_explanation']}

üéØ **–ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è:**
{chr(10).join([f"‚Ä¢ {case}" for case in article['when_applies']])}

‚ö†Ô∏è **–ö–∞–∫ –Ω–∞—Ä—É—à–∞–µ—Ç—Å—è:**
{chr(10).join([f"‚Ä¢ {violation}" for violation in article['how_violated']])}

üõ°Ô∏è **–ö–∞–∫ –æ—Ç—Å—Ç–æ—è—Ç—å –ø—Ä–∞–≤–∞:**
{chr(10).join([f"{i+1}. {step}" for i, step in enumerate(article['how_defend'])])}

üîó **–ò—Å—Ç–æ—á–Ω–∏–∫:** {article['consultant_link']}
üìå **–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:** {article['court_example']}

‚öñÔ∏è **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã —Ä–∞–∑–±–µ—Ä—É—Ç –≤–∞—à —Å–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ñ–º–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" ‚§µÔ∏è**"""

        return {
            "title": title,
            "content": post_content,
            "type": "article",
            "topic": topic,
            "legal_reference": article['full_title']
        }

    async def generate_news_post(self, topic: str) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–æ–Ω–∞—Ö/—Ä–µ—à–µ–Ω–∏—è—Ö"""

        # –≠–º—É–ª—è—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
        news_items = {
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä—É–¥–æ–≤–æ–º –ø—Ä–∞–≤–µ": {
                "headline": "–° 1 –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞ –æ–ø–ª–∞—Ç—ã –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö",
                "what_changed": "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–º–µ—Ä–µ 100% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ (—Ä–∞–Ω–µ–µ 60-80%)",
                "legal_base": "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ—Ç 28.12.2023 ‚Ññ 618-–§–ó",
                "who_affected": [
                    "–í—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ —Ç—Ä—É–¥–æ–≤—ã–º –¥–æ–≥–æ–≤–æ—Ä–∞–º",
                    "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
                    "–ò–ü —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏"
                ],
                "what_to_do": [
                    "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—á–µ—Ç –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö",
                    "–†–∞–±–æ—Ç–Ω–∏–∫–∞–º –∑–Ω–∞—Ç—å —Å–≤–æ–∏ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞",
                    "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∞–º –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–∞"
                ],
                "source_link": "https://publication.pravo.gov.ru/document/0001202312280042"
            },

            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –í–° –†–§": {
                "headline": "–í–µ—Ä—Ö–æ–≤–Ω—ã–π —Å—É–¥ —Ä–∞–∑—ä—è—Å–Ω–∏–ª –ø—Ä–∞–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤",
                "what_changed": "–í–° –†–§ —É–∫–∞–∑–∞–ª, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —è—Ä–ª—ã–∫–æ–≤ –∏ –±–∏—Ä–æ–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
                "legal_base": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ –æ—Ç 15.01.2024 ‚Ññ 5-–ö–ì23-145",
                "who_affected": [
                    "–í—Å–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤",
                    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã",
                    "–†–æ–∑–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã"
                ],
                "what_to_do": [
                    "–ü–æ–∫—É–ø–∞—Ç–µ–ª—è–º –∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞",
                    "–ü—Ä–æ–¥–∞–≤—Ü–∞–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞",
                    "–ü—Ä–∏ —Å–ø–æ—Ä–µ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –í–° –†–§"
                ],
                "source_link": "https://vsrf.ru/documents/practice/28956/"
            }
        }

        if topic not in news_items:
            topic = random.choice(list(news_items.keys()))

        news = news_items[topic]

        title = f"üÜï {news['headline']}"

        post_content = f"""üì¢ **–ü–†–ê–í–û–í–´–ï –ù–û–í–û–°–¢–ò: {topic}**

üî• **{news['headline']}**

üìã **–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:**
{news['what_changed']}

‚öñÔ∏è **–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞:**
{news['legal_base']}

üë• **–ö–æ–≥–æ –∫–∞—Å–∞–µ—Ç—Å—è:**
{chr(10).join([f"‚Ä¢ {person}" for person in news['who_affected']])}

üéØ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
{chr(10).join([f"{i+1}. {action}" for i, action in enumerate(news['what_to_do'])])}

üîó **–ò—Å—Ç–æ—á–Ω–∏–∫:** {news['source_link']}

‚öñÔ∏è **–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º? –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –ñ–º–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" ‚§µÔ∏è**"""

        return {
            "title": title,
            "content": post_content,
            "type": "news",
            "topic": topic,
            "legal_reference": news['legal_base']
        }


class EnhancedAutopostSystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""

    def __init__(self):
        self.db = LegalContentDatabase()
        self.generator = LegalContentGenerator(self.db)
        self.last_post_time = None

    async def generate_daily_post(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""

        max_attempts = 15  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        for attempt in range(max_attempts):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –ø–æ —Ä–æ—Ç–∞—Ü–∏–∏
                post_type, topic = self.db.get_next_topic()

                log.info(f"Generating {post_type} post about: {topic} (attempt {attempt + 1}/{max_attempts})")

                # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
                use_professional = random.random() < 0.9  # 90% –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                
                if use_professional:
                    try:
                        if post_type == "case":
                            expert_content = await get_expert_legal_content("case")
                        elif post_type == "article":  
                            expert_content = await get_expert_legal_content("guide")
                        elif post_type == "news":
                            expert_content = await get_expert_legal_content("update")
                        else:
                            expert_content = await get_expert_legal_content("practice")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        title = expert_content.split('\n')[0].replace('**', '').replace('*', '').strip()
                        post_data = {
                            "title": title[:100],
                            "content": expert_content,
                            "type": f"expert_{post_type}",
                            "topic": topic,
                            "legal_reference": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                        }
                        
                    except Exception as e:
                        log.warning(f"Failed to generate expert content: {e}, falling back to standard")
                        use_professional = False
                
                if not use_professional:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if post_type == "case":
                        post_data = await self.generator.generate_case_post(topic)
                    elif post_type == "article":
                        post_data = await self.generator.generate_article_post(topic)
                    elif post_type == "news":
                        post_data = await self.generator.generate_news_post(topic)
                    else:
                        # Fallback –Ω–∞ –∫–µ–π—Å
                        post_data = await self.generator.generate_case_post("–û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

                # –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–ù–¢–ï–ù–¢–ê
                is_valid, message = validate_and_register_content(
                    title=post_data['title'],
                    content=post_data['content'],
                    content_type="enhanced_autopost",
                    source_system="enhanced_autopost"
                )

                if not is_valid:
                    log.warning(f"‚ùå Enhanced post not unique (attempt {attempt + 1}): {message}")
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–º—É –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫
                    dedup_system = get_deduplication_system()
                    if dedup_system:
                        dedup_system.block_topic_temporarily(
                            topic, 
                            f"Enhanced autopost duplicate on attempt {attempt + 1}: {message}", 
                            hours=4
                        )
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                post_data['content'] += "\n\nüì± **–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!**"
                post_data['enable_comments'] = False

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                import os
                bot_username = os.getenv("BOT_USERNAME", "your_bot").replace("@", "")

                post_data['keyboard'] = [
                    [{"text": "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "url": f"https://t.me/{bot_username}"}]
                ]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                self.db.save_post(
                    post_data['type'],
                    post_data['title'],
                    post_data['topic'],
                    post_data.get('legal_reference', '')
                )

                self.last_post_time = datetime.now()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                post_data['uniqueness_validated'] = True
                post_data['attempts_needed'] = attempt + 1

                log.info(f"‚úÖ Unique enhanced post created after {attempt + 1} attempts")
                return post_data
                
            except Exception as e:
                log.error(f"Error generating post (attempt {attempt + 1}): {e}")
                if attempt == max_attempts - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
                    break
                continue

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        log.error(f"‚ùå Failed to generate unique enhanced content after {max_attempts} attempts, using fallback")
        
        fallback_data = {
            "title": "üìö –ü—Ä–∞–≤–æ–≤–∞—è –ø–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É",
            "content": """‚öñÔ∏è **–ó–ù–ê–ô–¢–ï –°–í–û–ò –ü–†–ê–í–ê!**

üîç **–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø–æ–º–æ–≥–∞–µ–º –ª—é–¥—è–º —Ä–µ—à–∞—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã –∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
‚Ä¢ –°–µ–º–µ–π–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∞–ª–∏–º–µ–Ω—Ç—ã
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
‚Ä¢ –ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ñ–ö–•
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã –∏ –û–°–ê–ì–û

üí° **–ü–æ–º–Ω–∏—Ç–µ:** –Ω–µ–∑–Ω–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–æ –∑–Ω–∞–Ω–∏–µ –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–∞–≤–∞!

‚ùì **–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å? –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!**

üì± **–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!**""",
            "type": "fallback",
            "topic": "–û–±—â–∞—è –ø—Ä–∞–≤–æ–≤–∞—è –ø–æ–º–æ—â—å",
            "legal_reference": "–û–±—â–∏–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞",
            "enable_comments": False,
            "uniqueness_validated": False,
            "attempts_needed": max_attempts,
            "is_fallback": True
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
        import os
        bot_username = os.getenv("BOT_USERNAME", "your_bot").replace("@", "")
        fallback_data['keyboard'] = [
            [{"text": "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "url": f"https://t.me/{bot_username}"}]
        ]

        self.last_post_time = datetime.now()
        return fallback_data

    async def should_post_now(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å"""

        if not self.last_post_time:
            return True  # –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç

        # –ü—É–±–ª–∏–∫—É–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
        time_since_last = datetime.now() - self.last_post_time
        return time_since_last >= timedelta(hours=24)

    async def get_posting_statistics(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤"""

        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM post_history")
        total_posts = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        cursor.execute("""
            SELECT post_type, COUNT(*) 
            FROM post_history 
            GROUP BY post_type
        """)
        type_stats = dict(cursor.fetchall())

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
        cursor.execute("""
            SELECT title, publication_date, post_type 
            FROM post_history 
            ORDER BY publication_date DESC 
            LIMIT 5
        """)
        recent_posts = cursor.fetchall()

        conn.close()

        return {
            "total_posts": total_posts,
            "by_type": type_stats,
            "recent_posts": recent_posts,
            "last_post_time": self.last_post_time
        }

    async def schedule_professional_post(self, hours_from_now: int = 24, channel_id: str = "@your_channel") -> Dict[str, str]:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç"""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        post_data = await self.generate_daily_post()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        scheduled_time = datetime.now() + timedelta(hours=hours_from_now)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        post_id = self.db.schedule_post(post_data, scheduled_time, channel_id)

        post_data['post_id'] = post_id
        post_data['scheduled_time'] = scheduled_time.isoformat()
        post_data['channel_id'] = channel_id

        return post_data

    async def get_scheduled_posts_list(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        return self.db.get_scheduled_posts(limit)

    async def add_comment_to_post(self, post_id: str, user_id: int, username: str, comment_text: str, reply_to: int = None) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É"""
        return self.db.add_comment_to_post(post_id, user_id, username, comment_text, reply_to)

    async def get_post_comments_list(self, post_id: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É"""
        return self.db.get_post_comments(post_id, limit)

    async def publish_scheduled_post(self, post_id: str) -> bool:
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç (–æ–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
            self.db.mark_post_published(post_id)
            return True
        except Exception as e:
            log.error(f"Failed to publish post {post_id}: {e}")
            return False

    async def get_autopost_dashboard_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await self.get_posting_statistics()

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        scheduled = await self.get_scheduled_posts_list(5)

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT post_id, title, post_type, published_at, views, comments_count
            FROM scheduled_posts 
            WHERE status = 'published'
            ORDER BY published_at DESC
            LIMIT 5
        ''')

        published_posts = []
        for row in cursor.fetchall():
            published_posts.append({
                'post_id': row[0],
                'title': row[1],
                'post_type': row[2],
                'published_at': row[3],
                'views': row[4],
                'comments_count': row[5]
            })

        conn.close()

        return {
            'statistics': stats,
            'scheduled_posts': scheduled,
            'recent_published': published_posts,
            'system_status': 'active' if self.last_post_time else 'inactive'
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
enhanced_autopost = EnhancedAutopostSystem()


async def get_enhanced_autopost_status() -> Dict[str, any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    return await enhanced_autopost.get_posting_statistics()


async def generate_professional_post() -> Dict[str, str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    return await enhanced_autopost.generate_daily_post()


async def should_create_autopost() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç"""
    return await enhanced_autopost.should_post_now()


async def schedule_smart_post(hours_from_now: int = 24, channel_id: str = "@your_channel") -> Dict[str, str]:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–º–Ω—ã–π –ø–æ—Å—Ç"""
    return await enhanced_autopost.schedule_professional_post(hours_from_now, channel_id)


async def get_scheduled_posts(limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    return await enhanced_autopost.get_scheduled_posts_list(limit)


async def add_post_comment(post_id: str, user_id: int, username: str, comment_text: str, reply_to: int = None) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É"""
    return await enhanced_autopost.add_comment_to_post(post_id, user_id, username, comment_text, reply_to)


async def get_post_comments(post_id: str, limit: int = 20) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É"""
    return await enhanced_autopost.get_post_comments_list(post_id, limit)


async def get_autopost_dashboard() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    return await enhanced_autopost.get_autopost_dashboard_data()


async def publish_post_now(post_id: str) -> bool:
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    return await enhanced_autopost.publish_scheduled_post(post_id)

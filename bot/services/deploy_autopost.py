"""
üöÄ –ê–í–¢–û–ü–û–°–¢ –ü–û–°–õ–ï –î–ï–ü–õ–û–Ø
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–ª–æ—è
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

logger = logging.getLogger(__name__)


class DeployAutopost:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"""

    def __init__(self, smm_integration=None):
        self.smm_integration = smm_integration
        self.deploy_task: Optional[asyncio.Task] = None

    async def schedule_deploy_post(self, deploy_info: dict = None):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"""

        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ–º deploy autopost...")
        print("üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ–º deploy autopost...")

        if self.deploy_task and not self.deploy_task.done():
            logger.info("‚ö†Ô∏è –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É deploy autopost")
            print("‚ö†Ô∏è –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É deploy autopost")
            self.deploy_task.cancel()

        logger.info("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É deploy autopost...")
        print("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É deploy autopost...")

        self.deploy_task = asyncio.create_task(
            self._create_deploy_post_delayed(deploy_info)
        )

        success_msg = "‚úÖ Deploy autopost –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥!"
        logger.info(success_msg)
        print(success_msg)

    async def _create_deploy_post_delayed(self, deploy_info: dict = None):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""

        try:
            logger.info(
                "üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º deploy autopost...")
            print("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º deploy autopost...")

            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 300

            logger.info(
                "‚è∞ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ deploy autopost...")
            print("‚è∞ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ deploy autopost...")

            if not self.smm_integration:
                error_msg = "‚ùå SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è deploy autopost"
                logger.warning(error_msg)
                print(error_msg)
                return

            logger.info("‚úÖ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...")
            print("‚úÖ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...")

            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
            post_content = await self._generate_deploy_post(deploy_info)

            logger.info(
                f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(post_content)} —Å–∏–º–≤–æ–ª–æ–≤), –ø—É–±–ª–∏–∫—É–µ–º...")
            print(
                f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(post_content)} —Å–∏–º–≤–æ–ª–æ–≤), –ø—É–±–ª–∏–∫—É–µ–º...")

            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            result = await self.smm_integration.create_immediate_post(
                content=post_content,
                content_type="deploy_announcement",
                priority=10  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )

            success_msg = f"‚úÖ Deploy autopost —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {result}"
            logger.info(success_msg)
            print(success_msg)

        except asyncio.CancelledError:
            cancel_msg = "‚ö†Ô∏è Deploy autopost –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω"
            logger.info(cancel_msg)
            print(cancel_msg)
        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è deploy autopost: {e}"
            logger.error(error_msg)
            print(error_msg)
            import traceback
            traceback.print_exc()

    async def _generate_deploy_post(self, deploy_info: dict = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞ –æ –¥–µ–ø–ª–æ–µ"""

        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Å—Ç –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        deploy_post = f"""üöÄ **–°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ê!**

‚ö° **–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {current_time}

‚ú® **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–ª–∫–∏–µ –æ—à–∏–±–∫–∏

üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –ë—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–µ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
‚Ä¢ –õ—É—á—à–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

üíº **–î–ª—è –±–∏–∑–Ω–µ—Å–∞:**
‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üîß **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!

üì± **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** /start
‚öñÔ∏è **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å 24/7**"""

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–ª–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        if deploy_info:
            if deploy_info.get('version'):
                deploy_post += f"\n\nüîÑ **–í–µ—Ä—Å–∏—è:** {deploy_info['version']}"
            if deploy_info.get('features'):
                features_text = "\n".join(
                    f"‚Ä¢ {feature}" for feature in deploy_info['features'])
                deploy_post += f"\n\nüÜï **–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n{features_text}"

        return deploy_post

    async def cancel_deploy_post(self):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç"""

        if self.deploy_task and not self.deploy_task.done():
            self.deploy_task.cancel()
            logger.info("–ê–≤—Ç–æ–ø–æ—Å—Ç –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –æ—Ç–º–µ–Ω–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_deploy_autopost = None


def get_deploy_autopost() -> DeployAutopost:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä DeployAutopost"""
    global _deploy_autopost

    if _deploy_autopost is None:
        _deploy_autopost = DeployAutopost()

    return _deploy_autopost


async def init_deploy_autopost(smm_integration):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è (30 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞)"""

    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º deploy autopost —Å–∏—Å—Ç–µ–º—É...")
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º deploy autopost —Å–∏—Å—Ç–µ–º—É...")

    deploy_autopost = get_deploy_autopost()
    deploy_autopost.smm_integration = smm_integration

    logger.info("‚úÖ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ deploy autopost")
    print("‚úÖ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ deploy autopost")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –¥–µ–ø–ª–æ–µ–º)
    await deploy_autopost.schedule_deploy_post({
        "type": "system_init",
        "version": "latest",
        "features": [
            "–ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏–∑ Telegram",
            "–ê–≤—Ç–æ–ø–æ—Å—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–ª–æ—è (30 —Å–µ–∫)",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ SMM"
        ]
    })

    final_msg = "üöÄ Deploy autopost —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    logger.info(final_msg)
    print(final_msg)


async def trigger_deploy_autopost(deploy_info: dict = None):
    """–¢—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"""

    deploy_autopost = get_deploy_autopost()
    await deploy_autopost.schedule_deploy_post(deploy_info)

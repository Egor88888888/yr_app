#!/usr/bin/env python3
"""
üèõÔ∏è WORLD-CLASS LEGAL AI CONSULTANT
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
"""

import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import json
import re
from datetime import datetime

from bot.services.ai_unified import unified_ai_service, AIModel, AIResponse

logger = logging.getLogger(__name__)

class LegalCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    FAMILY_LAW = "family_law"
    CIVIL_LAW = "civil_law"
    CRIMINAL_LAW = "criminal_law"
    LABOR_LAW = "labor_law"
    REAL_ESTATE = "real_estate"
    BUSINESS_LAW = "business_law"
    TAX_LAW = "tax_law"
    ADMINISTRATIVE = "administrative"
    INHERITANCE = "inheritance"
    BANKRUPTCY = "bankruptcy"
    INTELLECTUAL_PROPERTY = "ip"
    MIGRATION = "migration"
    OTHER = "other"

class ConsultationType(Enum):
    """–¢–∏–ø—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    EXPRESS = "express"        # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    DETAILED = "detailed"      # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    DOCUMENT_REVIEW = "document"  # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    STRATEGY = "strategy"      # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    EMERGENCY = "emergency"    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è

@dataclass
class LegalCase:
    """–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –¥–µ–ª–æ/—Å–∏—Ç—É–∞—Ü–∏—è"""
    user_id: int
    category: LegalCategory
    consultation_type: ConsultationType
    description: str
    urgency: str = "medium"
    location: str = "–†–§"
    budget_range: Optional[str] = None
    case_complexity: str = "medium"
    documents_available: bool = False

@dataclass 
class LegalAdvice:
    """–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
    case: LegalCase
    legal_analysis: str
    recommended_actions: List[str]
    legal_references: List[str]
    risks_assessment: str
    timeline: str
    estimated_cost: str
    next_steps: List[str]
    sales_offer: str
    follow_up_questions: List[str]

class WorldClassLegalAI:
    """–ú–∏—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å AI —é—Ä–∏—Å—Ç–∞"""
    
    def __init__(self):
        self.legal_knowledge_base = self._initialize_knowledge_base()
    
    def _initialize_knowledge_base(self) -> Dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π"""
        return {
            "current_legislation": {
                "civil_code": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)",
                "criminal_code": "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)",
                "labor_code": "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)",
                "family_code": "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)",
                "tax_code": "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)",
                "administrative_code": "–ö–æ–ê–ü –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)",
                "housing_code": "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è)"
            },
            "court_practice": {
                "supreme_court": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°—É–¥–∞ –†–§",
                "constitutional_court": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–≥–æ –°—É–¥–∞ –†–§",
                "arbitrage_courts": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å—É–¥–æ–≤",
                "regional_courts": "–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—É–¥–æ–≤"
            },
            "legal_procedures": {
                "civil_procedure": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "criminal_procedure": "–£–≥–æ–ª–æ–≤–Ω–æ-–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "arbitrage_procedure": "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "administrative_procedure": "–ö–ê–° –†–§"
            }
        }
    
    
    
    async def analyze_legal_case(self, case: LegalCase) -> LegalAdvice:
        """–ê–Ω–∞–ª–∏–∑ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ª–∞"""
        logger.info(f"üèõÔ∏è Analyzing legal case for user {case.user_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = self._build_specialized_prompt(case)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è AI
        consultation_request = self._build_consultation_request(case)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç AI —Å –Ω–∞—à–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        ai_response = await unified_ai_service.generate_world_class_consultation(
            user_message=consultation_request,
            system_prompt=system_prompt,
            category=case.category.value,
            model=AIModel.GPT_4O  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
        )
        
        if not ai_response.success:
            logger.error(f"‚ùå AI consultation failed: {ai_response.error}")
            return self._generate_fallback_advice(case)
        
        # –ü–∞—Ä—Å–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        structured_advice = await self._structure_advice(case, ai_response.content)
        
        logger.info(f"‚úÖ Legal advice generated for user {case.user_id}")
        return structured_advice
    
    def _build_specialized_prompt(self, case: LegalCase) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        base_prompt = self.consultation_templates["system_prompts"]["world_class_lawyer"]
        
        category_expertise = {
            LegalCategory.FAMILY_LAW: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –°–ï–ú–ï–ô–ù–û–ï –ü–†–ê–í–û - —Ä–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã, –æ–ø–µ–∫–∞, —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞, –±—Ä–∞—á–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã.",
            LegalCategory.CIVIL_LAW: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ì–†–ê–ñ–î–ê–ù–°–ö–û–ï –ü–†–ê–í–û - –¥–æ–≥–æ–≤–æ—Ä—ã, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞, –∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π.",
            LegalCategory.CRIMINAL_LAW: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –£–ì–û–õ–û–í–ù–û–ï –ü–†–ê–í–û - –∑–∞—â–∏—Ç–∞ –ø–æ —É–≥–æ–ª–æ–≤–Ω—ã–º –¥–µ–ª–∞–º, –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–æ–≤–æ—Ä–æ–≤.",
            LegalCategory.LABOR_LAW: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –¢–†–£–î–û–í–û–ï –ü–†–ê–í–û - —É–≤–æ–ª—å–Ω–µ–Ω–∏—è, —Ç—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã, –≤–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã.",
            LegalCategory.REAL_ESTATE: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨ - —Å–¥–µ–ª–∫–∏, —Å–ø–æ—Ä—ã —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞–º–∏, –ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è.",
            LegalCategory.BUSINESS_LAW: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ö–û–†–ü–û–†–ê–¢–ò–í–ù–û–ï –ü–†–ê–í–û - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞, –¥–æ–≥–æ–≤–æ—Ä—ã, —Å–ø–æ—Ä—ã.",
            LegalCategory.TAX_LAW: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–ê–õ–û–ì–û–í–û–ï –ü–†–ê–í–û - –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å–ø–æ—Ä—ã, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            LegalCategory.INHERITANCE: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–ê–°–õ–ï–î–°–¢–í–ï–ù–ù–û–ï –ü–†–ê–í–û - –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, —Å–ø–æ—Ä—ã –º–µ–∂–¥—É –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞–º–∏.",
            LegalCategory.BANKRUPTCY: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ë–ê–ù–ö–†–û–¢–°–¢–í–û - –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–ª–∏—Ü –∏ —é—Ä–ª–∏—Ü."
        }
        
        specialization = category_expertise.get(case.category, "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞")
        
        return f"{base_prompt}\n\n{specialization}\n\n–£–†–û–í–ï–ùÔøΩ—å –°–õ–û–ñ–ù–û–°–¢–ò –î–ï–õ–ê: {case.case_complexity.upper()}\n–ú–ï–°–¢–û: {case.location}"
    
    def _build_consultation_request(self, case: LegalCase) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        urgency_text = {
            "low": "–û–±—ã—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "medium": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", 
            "high": "–°—Ä–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "emergency": "–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø"
        }
        
        request = f"""
–ö–ê–¢–ï–ì–û–†–ò–Ø: {case.category.value.upper()}
–¢–ò–ü –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò: {case.consultation_type.value.upper()}
–°–†–û–ß–ù–û–°–¢–¨: {urgency_text.get(case.urgency, '–û–±—ã—á–Ω–∞—è')}

–û–ü–ò–°–ê–ù–ò–ï –°–ò–¢–£–ê–¶–ò–ò:
{case.description}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –†–µ–≥–∏–æ–Ω: {case.location}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞: {case.case_complexity}
- –ù–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {'–î–∞' if case.documents_available else '–ù–µ—Ç'}
- –ë—é–¥–∂–µ—Ç: {case.budget_range or '–ù–µ —É–∫–∞–∑–∞–Ω'}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò:
üß† –û–ë–£–ß–ê–Æ–©–ò–ô –•–ê–†–ê–ö–¢–ï–† - –æ–±—ä—è—Å–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –í–°–ï –ø—Ä–∞–≤–æ–≤—ã–µ —Ç–æ–Ω–∫–æ—Å—Ç–∏
üìö –ü–ï–†–ï–î–ê–ß–ê –ó–ù–ê–ù–ò–ô - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
üéØ –ê–õ–ì–û–†–ò–¢–ú –ú–´–®–õ–ï–ù–ò–Ø - –Ω–∞—É—á–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
üí° –ú–ê–ö–°–ò–ú–£–ú –ò–ù–°–ê–ô–¢–û–í - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —Ç–æ, —á—Ç–æ –∑–Ω–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ —é—Ä–∏—Å—Ç—ã
üîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê - –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–±—â–µ–Ω–∏–∏
ü§ù –ü–†–û–î–ê–ñ–ê –ß–ï–†–ï–ó –≠–ö–°–ü–ï–†–¢–ù–û–°–¢–¨ - –ø–æ–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –ë–ï–ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ü–µ–Ω

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
üìñ –ü–†–ê–í–û–í–û–ï –û–ë–†–ê–ó–û–í–ê–ù–ò–ï: –û–±—ä—è—Å–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
üîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞
‚öñÔ∏è –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–ù–ê–Ø –ë–ê–ó–ê: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
üìä –°–£–î–ï–ë–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê: –ü—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ª —Å –≤—ã–≤–æ–¥–∞–º–∏
üõ°Ô∏è –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í: –ù–∞—É—á–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏
üìã –ê–õ–ì–û–†–ò–¢–ú –î–ï–ô–°–¢–í–ò–ô: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ù–Æ–ê–ù–°–´: –í—Å–µ —Å—Ä–æ–∫–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏—Ö –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
üíº –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –°–ï–ö–†–ï–¢–´: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∏—Ç—Ä–æ—Å—Ç–∏ –∏–∑ –æ–ø—ã—Ç–∞
‚ùì –í–û–ü–†–û–°–´ –î–õ–Ø –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø: –ü–æ–¥—Ç–æ–ª–∫–Ω–∏—Ç–µ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –¥–∏–∞–ª–æ–≥—É
ü§ù –¶–ï–ù–ù–û–°–¢–¨ –≠–ö–°–ü–ï–†–¢–ê: –ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏

–¶–ï–õ–¨: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∞–≤–æ–≤—É—é –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ
"""
        
        return request
    
    async def _structure_advice(self, case: LegalCase, ai_content: str) -> LegalAdvice:
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –æ—Ç AI"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
        legal_analysis = self._extract_section(ai_content, "–ü–†–ê–í–û–í–û–ô –ê–ù–ê–õ–ò–ó", "–ü–†–ò–ú–ï–ù–ò–ú–´–ï –ù–û–†–ú–´")
        legal_references = self._extract_legal_references(ai_content)
        risks_assessment = self._extract_section(ai_content, "–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í", "–ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô")
        recommended_actions = self._extract_action_plan(ai_content)
        timeline = self._extract_timeline(ai_content)
        estimated_cost = self._extract_cost_estimate(ai_content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        sales_offer = await self._generate_sales_offer(case)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
        follow_up_questions = await self._generate_follow_up_questions(case)
        
        return LegalAdvice(
            case=case,
            legal_analysis=legal_analysis or ai_content[:500] + "...",
            recommended_actions=recommended_actions,
            legal_references=legal_references,
            risks_assessment=risks_assessment or "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            timeline=timeline or "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –¥–µ–ª–∞",
            estimated_cost=estimated_cost or "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞",
            next_steps=await self._generate_next_steps(case),
            sales_offer=sales_offer,
            follow_up_questions=follow_up_questions
        )
    
    def _extract_section(self, text: str, start_marker: str, end_marker: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        start_pattern = rf"{start_marker}[:\s]*"
        end_pattern = rf"{end_marker}[:\s]*"
        
        start_match = re.search(start_pattern, text, re.IGNORECASE)
        if not start_match:
            return ""
        
        start_pos = start_match.end()
        end_match = re.search(end_pattern, text[start_pos:], re.IGNORECASE)
        
        if end_match:
            end_pos = start_pos + end_match.start()
            return text[start_pos:end_pos].strip()
        else:
            # –ë–µ—Ä–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –∏–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            next_section = re.search(r'\n[üîç‚öñÔ∏è‚ö†Ô∏èüìãüí∞‚è∞]', text[start_pos:])
            if next_section:
                end_pos = start_pos + next_section.start()
                return text[start_pos:end_pos].strip()
            return text[start_pos:start_pos+300].strip()
    
    def _extract_legal_references(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–∫–æ–Ω—ã"""
        patterns = [
            r'—Å—Ç\.\s*\d+[.\d]*\s+[–ê-–Ø][–∞-—è\s]+–∫–æ–¥–µ–∫—Å[–∞-—è\s]*',
            r'—Å—Ç–∞—Ç—å—è\s+\d+[.\d]*\s+[–ê-–Ø][–∞-—è\s]+–∫–æ–¥–µ–∫—Å[–∞-—è\s]*',
            r'–ø\.\s*\d+[.\d]*\s+—Å—Ç\.\s*\d+[.\d]*\s+[–ê-–Ø][–∞-—è\s]+',
            r'–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω[–∞-—è\s]*‚Ññ\s*\d+-[–ê-–Ø]{2}',
            r'–ì–ö –†–§[,\s]*—Å—Ç\.\s*\d+',
            r'–£–ö –†–§[,\s]*—Å—Ç\.\s*\d+',
            r'–¢–ö –†–§[,\s]*—Å—Ç\.\s*\d+'
        ]
        
        references = []
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            references.extend(matches)
        
        return list(set(references))[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Å—ã–ª–æ–∫
    
    def _extract_action_plan(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        action_section = self._extract_section(text, "–ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô", "–û–†–ò–ï–ù–¢–ò–†–û–í–û–ß–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨")
        
        if not action_section:
            return ["–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        actions = []
        lines = action_section.split('\n')
        
        for line in lines:
            line = line.strip()
            if re.match(r'^\d+\.', line) or line.startswith('-') or line.startswith('‚Ä¢'):
                clean_line = re.sub(r'^\d+\.\s*', '', line)
                clean_line = re.sub(r'^[-‚Ä¢]\s*', '', clean_line)
                if clean_line:
                    actions.append(clean_line)
        
        return actions[:7]  # –ú–∞–∫—Å–∏–º—É–º 7 –¥–µ–π—Å—Ç–≤–∏–π
    
    def _extract_timeline(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫"""
        timeline_section = self._extract_section(text, "–í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò", "")
        
        if timeline_section:
            return timeline_section
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        time_patterns = [
            r'\d+[-‚Äì]\d+\s*–¥–Ω–µ–π?',
            r'\d+[-‚Äì]\d+\s*–º–µ—Å—è—Ü[–∞-—è]*',
            r'–≤ —Ç–µ—á–µ–Ω–∏–µ\s+\d+\s*[–¥–Ω–µ–π|–º–µ—Å—è—Ü][–∞-—è]*',
            r'—Å—Ä–æ–∫[–∏]?\s*[-‚Äì:]\s*\d+\s*[–¥–Ω–µ–π|–º–µ—Å—è—Ü][–∞-—è]*'
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group()
        
        return "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞ (–æ–±—ã—á–Ω–æ 1-3 –º–µ—Å—è—Ü–∞)"
    
    def _extract_cost_estimate(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        cost_section = self._extract_section(text, "–û–†–ò–ï–ù–¢–ò–†–û–í–û–ß–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨", "")
        
        if cost_section:
            return cost_section
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_patterns = [
            r'\d+\s*[-‚Äì]\s*\d+\s*(?:—Ç—ã—Å\.?|000)\s*—Ä—É–±',
            r'–æ—Ç\s+\d+\s*(?:—Ç—ã—Å\.?|000)\s*—Ä—É–±',
            r'–æ–∫–æ–ª–æ\s+\d+\s*(?:—Ç—ã—Å\.?|000)\s*—Ä—É–±'
        ]
        
        for pattern in cost_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group()
        
        return "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
    
    def _generate_sales_offer(self, case: LegalCase) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å (–ë–ï–ó –¶–ï–ù)"""
        
        expertise_messages = {
            LegalCategory.FAMILY_LAW: "üè† –ó–∞—â–∏—â–∞—é —Å–µ–º–µ–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É–∂–µ 15+ –ª–µ—Ç. –ó–Ω–∞—é –≤—Å–µ –Ω—é–∞–Ω—Å—ã —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–∞–≤–∞.",
            LegalCategory.CRIMINAL_LAW: "‚öñÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —É–≥–æ–ª–æ–≤–Ω–æ–π –∑–∞—â–∏—Ç–µ. –ö–∞–∂–¥–æ–µ –¥–µ–ª–æ - —ç—Ç–æ —á—å—è-—Ç–æ –∂–∏–∑–Ω—å.",
            LegalCategory.LABOR_LAW: "üíº –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç—Ä—É–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∞. –ó–∞ –ø–ª–µ—á–∞–º–∏ —Å–æ—Ç–Ω–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª.",
            LegalCategory.REAL_ESTATE: "üèòÔ∏è –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ó–∞—â–∏—â–∞—é –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –≤ —Å–¥–µ–ª–∫–∞—Ö.",
            LegalCategory.BUSINESS_LAW: "üè¢ –ü–æ–º–æ–≥–∞—é –±–∏–∑–Ω–µ—Å—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø—Ä–∞–≤–æ–≤–æ–º –ø–æ–ª–µ –∏ –∏–∑–±–µ–≥–∞—Ç—å —Ä–∏—Å–∫–æ–≤."
        }
        
        expertise = expertise_messages.get(case.category, "‚öñÔ∏è –û–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç —à–∏—Ä–æ–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø—Ä–∞–≤–∞.")
        
        value_proposition = {
            "emergency": "üö® –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞. –ì–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.",
            "high": "‚ö° –ü–æ–Ω–∏–º–∞—é –≤–∞–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–µ–ª–∞.",
            "medium": "üìã –ü—Ä–æ–≤–µ–¥—É –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–µ—à–µ–Ω–∏—è.",
            "low": "üí° –ü–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –Ω–∞–º–µ—Ç–∏—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π."
        }
        
        urgency_value = value_proposition.get(case.urgency, value_proposition["medium"])
        
        return f"""{expertise}

{urgency_value}

üéØ **–ß–¢–û –ü–û–õ–£–ß–ò–¢–ï –û–¢ –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ô –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò:**
‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ—à–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚úÖ –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

üíº **–ú–û–ô –û–ü–´–¢ - –í–ê–®–ê –£–í–ï–†–ï–ù–ù–û–°–¢–¨:**
üèÜ 20+ –ª–µ—Ç —É—Å–ø–µ—à–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
üìä –°–æ—Ç–Ω–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ
üéì –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
ü§ù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É

üìû –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ª–∏—á–Ω–æ!"""
    
    def _generate_next_steps(self, case: LegalCase) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
        base_steps = [
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞"
        ]
        
        category_steps = {
            LegalCategory.FAMILY_LAW: [
                "–°–æ–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ —Å–µ–º–µ–π–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏",
                "–û—Ü–µ–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞–∂–∏—Ç–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö"
            ],
            LegalCategory.LABOR_LAW: [
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ä–∞–±–æ—Ç—ã",
                "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
                "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ"
            ],
            LegalCategory.REAL_ESTATE: [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
                "–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–∏—Å–∫—É –∏–∑ –ï–ì–†–ù",
                "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
            ]
        }
        
        specific_steps = category_steps.get(case.category, [])
        return base_steps + specific_steps[:3]
    
    async def _generate_follow_up_questions(self, case: LegalCase) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ AI"""
        
        questions_prompt = f"""–°–æ—Å—Ç–∞–≤—å—Ç–µ 3-4 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.

–ü—Ä–æ–±–ª–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞: "{case.description[:100]}..."
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case.category.value}

–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã:
- –£–≥–ª—É–±–ª—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å —é—Ä–∏—Å—Ç–∞
- –í–æ–≤–ª–µ–∫–∞—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä

–§–æ—Ä–º–∞—Ç: –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏."""
        
        response = await unified_ai_service.generate_simple_response(
            messages=[{"role": "user", "content": questions_prompt}],
            model=AIModel.GPT_4O_MINI,
            max_tokens=200
        )
        
        if response.success:
            questions = []
            for line in response.content.split('\n'):
                line = line.strip()
                if line and not line.startswith('#') and '?' in line:
                    # –û—á–∏—â–∞–µ–º –æ—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
                    for prefix in ['-', '‚Ä¢', '1.', '2.', '3.', '4.']:
                        if line.startswith(prefix):
                            line = line[len(prefix):].strip()
                            break
                    if line:
                        questions.append(line)
            return questions[:4]
        
        # Fallback
        return [
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?",
            "–ö–∞–∫–æ–≤—ã –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–∞—Å–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
            "–ï—Å—Ç—å –ª–∏ —Å—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç?"
        ]
    
    async def _generate_fallback_advice(self, case: LegalCase) -> LegalAdvice:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI –ø—Ä–∏ —Å–±–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è fallback-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        fallback_prompt = f"""
–í—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –ö–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–∏–ª—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º: "{case.description}"

–î–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤–∫–ª—é—á–∞—é—â—É—é:
1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
2. –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
4. –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤
5. –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏ —Ä–µ—à–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫-—é—Ä–∏—Å—Ç, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤.
"""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        response = await unified_ai_service.generate_legal_consultation(
            user_message=fallback_prompt,
            category=case.category.value,
            model=AIModel.GPT_4O_MINI
        )
        
        if response.success:
            # –ï—Å–ª–∏ AI –æ—Ç–≤–µ—Ç–∏–ª, –ø–∞—Ä—Å–∏–º –µ–≥–æ –æ—Ç–≤–µ—Ç
            return await self._structure_advice(case, response.content)
        
        # –ï—Å–ª–∏ –∏ fallback AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        return LegalAdvice(
            case=case,
            legal_analysis="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —é—Ä–∏—Å—Ç—É.",
            recommended_actions=["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"],
            legal_references=["–ü—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"],
            risks_assessment="–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞",
            timeline="–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤",
            estimated_cost="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ",
            next_steps=["–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π"],
            sales_offer=self._generate_sales_offer(case),
            follow_up_questions=["–ì–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–∏—á–Ω–æ?"]
        )
    

    async def generate_professional_comment(self, post_content: str, post_topic: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É"""
        logger.info("üìù Generating professional legal comment")
        
        comment_prompt = f"""
–í—ã - –≤–µ–¥—É—â–∏–π —é—Ä–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û –∏ –≠–ö–°–ü–ï–†–¢–ù–û.

–ü–û–°–¢: {post_topic}
–°–û–î–ï–†–ñ–ê–ù–ò–ï: {post_content}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Æ:
‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∞–≤–∞
‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ  
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è
‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π

–§–û–†–ú–ê–¢:
üèõÔ∏è [–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ]
‚öñÔ∏è [–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞] 
üí° [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã]
üìû [–ú—è–≥–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏]

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π
–î–õ–ò–ù–ê: 100-200 —Å–ª–æ–≤
"""
        
        response = await unified_ai_service.generate_expert_response(
            user_message=comment_prompt,
            model=AIModel.GPT_4O
        )
        
        if response.success:
            return response.content
        else:
            return self._generate_fallback_comment(post_topic)
    
    def _generate_fallback_comment(self, topic: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ —Å–±–æ–µ AI"""
        return f"""üèõÔ∏è –ö–∞–∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π —é—Ä–∏—Å—Ç –º–æ–≥—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.

‚öñÔ∏è –í –ø–æ–¥–æ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.

üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –∫–∞–∂–¥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞.

üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É."""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
world_class_legal_ai = WorldClassLegalAI()
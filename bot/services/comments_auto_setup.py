"""
üîß AUTOMATIC COMMENTS SETUP
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
"""

import logging
import os
import asyncio
from typing import Optional, Dict, Any, List
from telegram import Bot, Chat, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from telegram.constants import ChatType, ParseMode

logger = logging.getLogger(__name__)


class AutoCommentsManager:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.discussion_groups = {}  # –ö—ç—à –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤

    async def setup_channel_comments_auto(self, channel_id: str) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞

        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞ (@legalcenter_pro –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID)

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        try:
            logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
            try:
                channel = await self.bot.get_chat(channel_id)
            except Exception as e:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                return {
                    "success": False,
                    "error": f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}",
                    "comments_enabled": False
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            discussion_group = None
            if hasattr(channel, 'linked_chat_id') and channel.linked_chat_id:
                try:
                    discussion_group = await self.bot.get_chat(channel.linked_chat_id)
                    logger.info(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞: {discussion_group.title}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    self.discussion_groups[channel_id] = {
                        'id': discussion_group.id,
                        'title': discussion_group.title,
                        'enabled': True
                    }

                    return {
                        "success": True,
                        "comments_enabled": True,
                        "discussion_group": {
                            "id": discussion_group.id,
                            "title": discussion_group.title
                        },
                        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
                    }

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            return {
                "success": False,
                "comments_enabled": False,
                "needs_manual_setup": True,
                "instructions": self._get_manual_setup_instructions(channel_id),
                "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "comments_enabled": False
            }

    def _get_manual_setup_instructions(self, channel_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        return f"""üìã **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –î–õ–Ø {channel_id}**

üîß **–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:**

1Ô∏è‚É£ **–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π:**
   ‚Ä¢ Telegram ‚Üí –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: "Legal Center - –û–±—Å—É–∂–¥–µ–Ω–∏—è"
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å @{self.bot.username} –∫–∞–∫ –∞–¥–º–∏–Ω–∞
   ‚Ä¢ –î–∞—Ç—å –±–æ—Ç—É –í–°–ï –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

2Ô∏è‚É£ **–°–≤—è–∑–∞—Ç—å –≥—Ä—É–ø–ø—É —Å –∫–∞–Ω–∞–ª–æ–º:**
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}
   ‚Ä¢ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" ‚Üí "–û–±—Å—É–∂–¥–µ–Ω–∏—è"
   ‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è

3Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç

‚úÖ **–ü–û–°–õ–ï –ù–ê–°–¢–†–û–ô–ö–ò:**
–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!"""

    async def ensure_comments_for_post(
        self,
        channel_id: str,
        message_id: int,
        fallback_to_bot: bool = True
    ) -> str:
        """
        –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            fallback_to_bot: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∫ fallback –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã

        Returns:
            str: URL –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
            if channel_id in self.discussion_groups:
                group_info = self.discussion_groups[channel_id]
                if group_info['enabled']:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
                    return self._create_comments_url(channel_id, message_id)

            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            setup_result = await self.setup_channel_comments_auto(channel_id)

            if setup_result.get('comments_enabled'):
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
                return self._create_comments_url(channel_id, message_id)

            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω fallback
            if fallback_to_bot:
                logger.warning(
                    f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è {channel_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                try:
                    bot_username = self.bot.username
                    return f"https://t.me/{bot_username}?start=discuss_{message_id}"
                except Exception:
                    # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π fallback
                    return f"https://t.me/your_bot?start=discuss_{message_id}"

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ comment
            return self._create_post_url(channel_id, message_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            # Fallback –Ω–∞ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                bot_username = self.bot.username
                return f"https://t.me/{bot_username}"
            except Exception:
                # –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                return "https://t.me/your_bot"

    def _create_comments_url(self, channel_id: str, message_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å URL –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É"""
        try:
            # –ï—Å–ª–∏ channel_id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —ç—Ç–æ username
            if channel_id.startswith('@'):
                channel_username = channel_id[1:]  # –£–±–∏—Ä–∞–µ–º @
                return f"https://t.me/{channel_username}/{message_id}?comment=1"

            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–µ–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890)
            elif channel_id.startswith('-100'):
                # –î–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç t.me/c/ID/MESSAGE_ID
                numeric_id = channel_id[4:]  # –£–±–∏—Ä–∞–µ–º -100 –ø—Ä–µ—Ñ–∏–∫—Å
                return f"https://t.me/c/{numeric_id}/{message_id}?comment=1"

            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —á–∏—Å–ª–µ–Ω–Ω—ã–π ID
            elif channel_id.startswith('-'):
                numeric_id = channel_id[1:]  # –£–±–∏—Ä–∞–µ–º - –ø—Ä–µ—Ñ–∏–∫—Å
                return f"https://t.me/c/{numeric_id}/{message_id}?comment=1"

            # Fallback - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ username –±–µ–∑ @
            else:
                return f"https://t.me/{channel_id}/{message_id}?comment=1"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            try:
                bot_username = self.bot.username
                return f"https://t.me/{bot_username}"
            except Exception:
                # Fallback –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                return "https://t.me/your_bot"

    def _create_post_url(self, channel_id: str, message_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å URL –ø–æ—Å—Ç–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        return self._create_comments_url(channel_id, message_id).replace('?comment=1', '')

    async def get_comments_status_for_channels(self, channel_ids: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        status_results = {}

        for channel_id in channel_ids:
            try:
                result = await self.setup_channel_comments_auto(channel_id)
                status_results[channel_id] = result
            except Exception as e:
                status_results[channel_id] = {
                    "success": False,
                    "error": str(e),
                    "comments_enabled": False
                }

        return status_results

    async def enable_comments_for_all_posts(self, channel_id: str) -> Dict[str, Any]:
        """
        –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ

        –í–ê–ñ–ù–û: –≠—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            status = await self.setup_channel_comments_auto(channel_id)

            if status['comments_enabled']:
                return {
                    "success": True,
                    "message": "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤",
                    "details": status
                }
            else:
                return {
                    "success": False,
                    "message": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞",
                    "instructions": status.get('instructions'),
                    "details": status
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": str(e)
            }


def get_auto_comments_manager(bot):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    return AutoCommentsManager(bot)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
_auto_comments_manager = None


def get_auto_comments_manager(bot: Bot) -> AutoCommentsManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    global _auto_comments_manager
    if _auto_comments_manager is None:
        _auto_comments_manager = AutoCommentsManager(bot)
    return _auto_comments_manager

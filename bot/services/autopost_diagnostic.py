"""
üîß AUTOPOST DIAGNOSTIC & FIX
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
"""

import logging
import os
import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from telegram.constants import ChatType, ParseMode

logger = logging.getLogger(__name__)


class AutopostDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def run_full_diagnostic(self) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        """
        try:
            result = {
                "overall_status": "unknown",
                "issues": [],
                "fixes_applied": [],
                "tests": {},
                "recommendations": []
            }

            logger.info("üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...")

            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            result["tests"]["environment"] = await self._test_environment()

            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
            result["tests"]["channel"] = await self._test_target_channel()

            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            result["tests"]["smm_system"] = await self._test_smm_system()

            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            result["tests"]["scheduler"] = await self._test_scheduler()

            # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ deploy autopost
            result["tests"]["deploy_autopost"] = await self._test_deploy_autopost()

            # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            result["tests"]["test_publish"] = await self._test_publish_capability()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å—Ç–∞—Ç—É—Å
            result["issues"] = self._identify_issues(result["tests"])
            result["overall_status"] = self._determine_status(result["tests"])
            result["recommendations"] = self._generate_recommendations(
                result["issues"])

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
            return {
                "overall_status": "error",
                "error": str(e)
            }

    async def _test_environment(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            channel_id = os.getenv(
                'TARGET_CHANNEL_ID') or os.getenv('CHANNEL_ID')
            bot_token = os.getenv('BOT_TOKEN')

            return {
                "success": True,
                "bot_token_set": bool(bot_token),
                "channel_id_set": bool(channel_id),
                "channel_id": channel_id or "Not set",
                "is_fallback_channel": channel_id in [None, '@test_legal_channel']
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    async def _test_target_channel(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                'CHANNEL_ID') or '@test_legal_channel'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            try:
                channel = await self.bot.get_chat(channel_id)
                channel_accessible = True
                channel_title = channel.title
            except Exception as e:
                channel_accessible = False
                channel_title = None
                channel_error = str(e)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_permissions = None
            if channel_accessible:
                try:
                    bot_member = await self.bot.get_chat_member(channel_id, self.bot.id)
                    bot_permissions = {
                        "status": bot_member.status,
                        "can_post": bot_member.status in ['administrator', 'creator'],
                        "can_edit": getattr(bot_member, 'can_edit_messages', False) if bot_member.status == 'administrator' else True
                    }
                except Exception as e:
                    bot_permissions = {"error": str(e)}

            return {
                "success": channel_accessible,
                "channel_id": channel_id,
                "channel_title": channel_title,
                "channel_accessible": channel_accessible,
                "bot_permissions": bot_permissions,
                "error": channel_error if not channel_accessible else None
            }

        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    async def _test_smm_system(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç SMM —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            try:
                from .smm_integration import get_smm_integration
                smm_integration = get_smm_integration()

                if smm_integration:
                    smm_running = smm_integration.is_running
                    autopost_status = await smm_integration.get_autopost_status()

                    return {
                        "success": True,
                        "smm_available": True,
                        "smm_running": smm_running,
                        "autopost_enabled": autopost_status.get("enabled", False),
                        "autopost_interval": autopost_status.get("interval", "Unknown"),
                        "next_post_time": autopost_status.get("next_post_time", "Unknown")
                    }
                else:
                    return {
                        "success": False,
                        "smm_available": False,
                        "error": "SMM integration not initialized"
                    }

            except ImportError as e:
                return {
                    "success": False,
                    "smm_available": False,
                    "error": f"SMM modules not available: {e}"
                }

        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    async def _test_scheduler(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
            try:
                from .smm_integration import get_smm_integration
                smm_integration = get_smm_integration()

                if smm_integration and smm_integration.smm_system:
                    scheduler = smm_integration.smm_system.scheduler

                    return {
                        "success": True,
                        "scheduler_available": True,
                        "autopost_enabled": getattr(scheduler, 'autopost_enabled', False),
                        "interval_minutes": getattr(scheduler, 'autopost_interval_minutes', 0),
                        "has_autopost_task": hasattr(scheduler, '_autopost_task')
                    }
                else:
                    return {
                        "success": False,
                        "scheduler_available": False,
                        "error": "SMM system not available"
                    }

            except Exception as e:
                return {
                    "success": False,
                    "error": str(e)
                }

        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    async def _test_deploy_autopost(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç deploy autopost"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å deploy autopost
            try:
                from .deploy_autopost import _deploy_autopost_instance

                deploy_available = _deploy_autopost_instance is not None

                return {
                    "success": True,
                    "deploy_autopost_available": deploy_available,
                    "should_have_posted": True,  # –î–æ–ª–∂–µ–Ω –±—ã–ª —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
                    "time_since_deploy": "Recently deployed"
                }

            except ImportError:
                return {
                    "success": False,
                    "deploy_autopost_available": False,
                    "error": "Deploy autopost module not available"
                }

        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    async def _test_publish_capability(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                'CHANNEL_ID') or '@test_legal_channel'

            # –ù–ï —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                bot_info = await self.bot.get_me()

                return {
                    "success": True,
                    "bot_username": bot_info.username,
                    "bot_api_accessible": True,
                    "target_channel": channel_id,
                    "ready_to_publish": True
                }

            except Exception as e:
                return {
                    "success": False,
                    "bot_api_accessible": False,
                    "error": str(e)
                }

        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    def _identify_issues(self, tests: Dict[str, Dict]) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤"""
        issues = []

        env_test = tests.get("environment", {})
        if env_test.get("is_fallback_channel"):
            issues.append("channel_not_configured")

        channel_test = tests.get("channel", {})
        if not channel_test.get("success"):
            issues.append("channel_not_accessible")
        elif not channel_test.get("bot_permissions", {}).get("can_post"):
            issues.append("no_publish_permissions")

        smm_test = tests.get("smm_system", {})
        if not smm_test.get("smm_available"):
            issues.append("smm_not_available")
        elif not smm_test.get("autopost_enabled"):
            issues.append("autopost_disabled")

        scheduler_test = tests.get("scheduler", {})
        if not scheduler_test.get("autopost_enabled"):
            issues.append("scheduler_not_running")

        return issues

    def _determine_status(self, tests: Dict[str, Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        issues = self._identify_issues(tests)

        if not issues:
            return "fully_working"
        elif "channel_not_configured" in issues:
            return "channel_not_configured"
        elif "channel_not_accessible" in issues:
            return "channel_not_accessible"
        elif "no_publish_permissions" in issues:
            return "no_permissions"
        elif "smm_not_available" in issues:
            return "smm_system_error"
        elif "autopost_disabled" in issues:
            return "autopost_disabled"
        else:
            return "partial_issues"

    def _generate_recommendations(self, issues: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []

        if "channel_not_configured" in issues:
            recommendations.append(
                "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TARGET_CHANNEL_ID –≤ Railway")

        if "channel_not_accessible" in issues:
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞")

        if "no_publish_permissions" in issues:
            recommendations.append("üîß –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞")

        if "smm_not_available" in issues:
            recommendations.append("üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ SMM —Å–∏—Å—Ç–µ–º—É")

        if "autopost_disabled" in issues:
            recommendations.append("üîß –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ /admin ‚Üí SMM")

        if not recommendations:
            recommendations.append("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")

        return recommendations

    async def auto_fix_issues(self, issues: List[str]) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
        fixes_applied = []

        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –µ—Å–ª–∏ SMM —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            if "autopost_disabled" in issues:
                try:
                    from .smm_integration import get_smm_integration
                    smm_integration = get_smm_integration()

                    if smm_integration:
                        await smm_integration.enable_autopost()
                        await smm_integration.set_autopost_interval(minutes=60)
                        fixes_applied.append("autopost_enabled")
                        logger.info("‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {e}")

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            if "scheduler_not_running" in issues:
                try:
                    from .smm_integration import get_smm_integration
                    smm_integration = get_smm_integration()

                    if smm_integration and smm_integration.smm_system:
                        scheduler = smm_integration.smm_system.scheduler
                        scheduler.autopost_enabled = True
                        scheduler.autopost_interval_minutes = 60

                        # –ó–∞–ø—É—Å–∫–∞–µ–º loop –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
                        if not hasattr(scheduler, '_autopost_task') or scheduler._autopost_task.done():
                            import asyncio
                            scheduler._autopost_task = asyncio.create_task(
                                scheduler._autopost_loop())
                            fixes_applied.append("scheduler_restarted")
                            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

                except Exception as e:
                    logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            if len(fixes_applied) > 0:
                try:
                    test_post_result = await self._create_immediate_test_post()
                    if test_post_result.get("success"):
                        fixes_applied.append("test_post_created")

                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {e}")

            return {
                "success": len(fixes_applied) > 0,
                "fixes_applied": fixes_applied,
                "message": f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(fixes_applied)} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def _create_immediate_test_post(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                'CHANNEL_ID') or '@test_legal_channel'

            test_content = f"""üöÄ **–¢–ï–°–¢ –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê**

‚úÖ **–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:** {datetime.now().strftime('%H:%M')}

üîß **–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:**
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω  
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç

üí° **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!** –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å.

üì± **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** /start"""

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [[
                InlineKeyboardButton("üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                     url=f"https://t.me/{self.bot.username}")
            ]]

            message = await self.bot.send_message(
                channel_id,
                test_content,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            return {
                "success": True,
                "message_id": message.message_id,
                "channel_id": channel_id
            }

        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }


async def run_autopost_diagnostic(bot: Bot) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    diagnostic = AutopostDiagnostic(bot)
    return await diagnostic.run_full_diagnostic()


async def fix_autopost_issues(bot: Bot, issues: List[str]) -> Dict[str, Any]:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    diagnostic = AutopostDiagnostic(bot)
    return await diagnostic.auto_fix_issues(issues)


def format_diagnostic_report(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        status = result.get("overall_status", "unknown")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if status == "fully_working":
            header = "‚úÖ **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û**"
        elif status == "channel_not_configured":
            header = "‚ö†Ô∏è **–ö–ê–ù–ê–õ –ù–ï –ù–ê–°–¢–†–û–ï–ù**"
        elif status == "autopost_disabled":
            header = "‚ö†Ô∏è **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì –û–¢–ö–õ–Æ–ß–ï–ù**"
        else:
            header = "‚ùå **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì –ù–ï –†–ê–ë–û–¢–ê–ï–¢**"

        report = f"""{header}

üîß **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:**"""

        # –¢–µ—Å—Ç—ã
        tests = result.get("tests", {})

        # –û–∫—Ä—É–∂–µ–Ω–∏–µ
        env_test = tests.get("environment", {})
        if env_test.get("success"):
            channel_id = env_test.get("channel_id", "Not set")
            is_fallback = env_test.get("is_fallback_channel", False)
            if is_fallback:
                report += f"\n‚ö†Ô∏è –ö–∞–Ω–∞–ª: {channel_id} (fallback - –Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)"
            else:
                report += f"\n‚úÖ –ö–∞–Ω–∞–ª: {channel_id}"
        else:
            report += f"\n‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_test.get('error', 'Unknown')}"

        # –ö–∞–Ω–∞–ª
        channel_test = tests.get("channel", {})
        if channel_test.get("success"):
            report += f"\n‚úÖ –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {channel_test.get('channel_title', 'Unknown')}"
            perms = channel_test.get("bot_permissions", {})
            if perms.get("can_post"):
                report += f"\n‚úÖ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {perms.get('status', 'Unknown')}"
            else:
                report += f"\n‚ùå –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
        else:
            report += f"\n‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {channel_test.get('error', 'Unknown')}"

        # SMM —Å–∏—Å—Ç–µ–º–∞
        smm_test = tests.get("smm_system", {})
        if smm_test.get("success"):
            report += f"\n‚úÖ SMM —Å–∏—Å—Ç–µ–º–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç"
            if smm_test.get("autopost_enabled"):
                report += f"\n‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –≤–∫–ª—é—á–µ–Ω ({smm_test.get('autopost_interval', 'Unknown')})"
            else:
                report += f"\n‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –æ—Ç–∫–ª—é—á–µ–Ω"
        else:
            report += f"\n‚ùå SMM —Å–∏—Å—Ç–µ–º–∞: {smm_test.get('error', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = result.get("recommendations", [])
        if recommendations:
            report += "\n\nüîß **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**"
            for rec in recommendations:
                report += f"\n{rec}"

        return report

    except Exception as e:
        return f"‚ùå **–û–®–ò–ë–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:** {e}"

#!/usr/bin/env python3
"""
üìù PROFESSIONAL LEGAL COMMENTER
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
"""

import asyncio
import logging
import re
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
from datetime import datetime

from bot.services.legal_expert_ai import world_class_legal_ai
from bot.services.legal_knowledge_base import legal_knowledge
from bot.services.ai_unified import unified_ai_service, AIModel

logger = logging.getLogger(__name__)

class PostType(Enum):
    """–¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤"""
    NEWS = "news"                    # –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞
    EDUCATIONAL = "educational"      # –û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    CASE_STUDY = "case_study"       # –†–∞–∑–±–æ—Ä –¥–µ–ª–∞
    LEGISLATION = "legislation"      # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–∞—Ö
    COURT_DECISION = "court"        # –°—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    ADVICE = "advice"               # –°–æ–≤–µ—Ç—ã
    DISCUSSION = "discussion"       # –î–∏—Å–∫—É—Å—Å–∏—è
    OTHER = "other"

class CommentTone(Enum):
    """–¢–æ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    AUTHORITATIVE = "authoritative"  # –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
    EDUCATIONAL = "educational"      # –û–±—É—á–∞—é—â–∏–π
    CONSTRUCTIVE = "constructive"    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π
    CORRECTIVE = "corrective"       # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–π
    SUPPORTIVE = "supportive"       # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π

@dataclass
class PostAnalysis:
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞"""
    post_content: str
    post_type: PostType
    legal_category: str
    key_points: List[str]
    legal_accuracy: str
    missing_info: List[str]
    target_audience: str
    comment_opportunities: List[str]

@dataclass
class ProfessionalComment:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    content: str
    tone: CommentTone
    legal_references: List[str]
    value_added: str
    sales_message: str
    engagement_level: str

class ProfessionalCommenter:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.comment_templates = self._initialize_templates()
        self.legal_phrases = self._initialize_legal_phrases()
        self.sales_messages = self._initialize_sales_messages()
    
    def _initialize_templates(self) -> Dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        return {
            "expert_opening": [
                "üèõÔ∏è –ö–∞–∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π —é—Ä–∏—Å—Ç —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å",
                "‚öñÔ∏è –° –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è",  
                "üìö –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ",
                "üéØ –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã",
                "üíº –í —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è"
            ],
            "legal_clarification": [
                "–°–æ–≥–ª–∞—Å–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É",
                "–í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ—Ä–º—ã",
                "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç",
                "–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –í–° –†–§",
                "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–µ"
            ],
            "practical_advice": [
                "–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é",
                "–ò–∑ –æ–ø—ã—Ç–∞ –≤–µ–¥–µ–Ω–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –¥–µ–ª",
                "–í–∞–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏",
                "–î–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤",
                "–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤"
            ],
            "sales_closure": [
                "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å",
                "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏",
                "–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å",
                "–°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ —Ç—Ä–µ–±—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞",
                "–ö–∞–∂–¥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞"
            ]
        }
    
    def _initialize_legal_phrases(self) -> Dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑"""
        return {
            "civil_law": [
                "—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 15 –ì–ö –†–§ –æ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ —É–±—ã—Ç–∫–æ–≤",
                "–≤ —Ä–∞–º–∫–∞—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∞",
                "–ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º",
                "—Å —É—á–µ—Ç–æ–º –ø—Ä–∏–Ω—Ü–∏–ø–∞ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏"
            ],
            "criminal_law": [
                "–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–≥–æ–ª–æ–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏", 
                "—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞",
                "—Å —É—á–µ—Ç–æ–º —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –í–° –†–§",
                "–ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å–æ—Å—Ç–∞–≤—É –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
            ],
            "family_law": [
                "—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–∞–≤–∞",
                "–≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –¥–µ—Ç–µ–π",
                "—Å —É—á–µ—Ç–æ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –ø—Ä–∞–≤ —Å—É–ø—Ä—É–≥–æ–≤",
                "—Å–æ–≥–ª–∞—Å–Ω–æ –°–ö –†–§"
            ],
            "labor_law": [
                "–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¢–ö –†–§",
                "—Å —É—á–µ—Ç–æ–º —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞",
                "—Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –†–æ—Å—Ç—Ä—É–¥–∞",
                "–ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Ç—Ä—É–¥–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º"
            ]
        }
    
    def _initialize_sales_messages(self) -> Dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            "soft_sell": [
                "üìû –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø–æ–¥–æ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å",
                "üíº 15+ –ª–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ",
                "‚öñÔ∏è –£—Å–ø–µ—à–Ω–æ —Ä–µ—à–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                "üéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —Å–ª—É—á–∞—é"
            ],
            "urgency": [
                "‚è∞ –í–∞–∂–Ω–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏",
                "üö® –ü—Ä–æ–º–µ–¥–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è", 
                "üìÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ –∫—Ä–∏—Ç–∏—á–Ω–æ",
                "‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞"
            ],
            "expertise": [
                "üèÜ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤",
                "üìä 98% —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–µ–ª –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                "üéñÔ∏è –ü—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∞–≤–∞",
                "üí° –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
            ]
        }
    
    async def analyze_post(self, post_content: str, post_topic: str = "") -> PostAnalysis:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìä Analyzing post for professional commenting")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞
        post_type = self._determine_post_type(post_content, post_topic)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        legal_category = self._determine_legal_category(post_content)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        key_points = self._extract_key_points(post_content)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        legal_accuracy = await self._assess_legal_accuracy(post_content, legal_category)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        missing_info = self._find_missing_info(post_content, legal_category)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        target_audience = self._determine_target_audience(post_content)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        comment_opportunities = self._find_comment_opportunities(post_content, legal_category)
        
        return PostAnalysis(
            post_content=post_content,
            post_type=post_type,
            legal_category=legal_category,
            key_points=key_points,
            legal_accuracy=legal_accuracy,
            missing_info=missing_info,
            target_audience=target_audience,
            comment_opportunities=comment_opportunities
        )
    
    async def generate_professional_comment(self, post_analysis: PostAnalysis) -> ProfessionalComment:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        logger.info(f"üí¨ Generating professional comment for {post_analysis.post_type.value}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_tone = self._determine_comment_tone(post_analysis)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_content = await self._generate_comment_content(post_analysis, comment_tone)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        legal_references = self._add_legal_references(post_analysis)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        value_added = self._determine_value_added(post_analysis, comment_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sales_message = self._craft_sales_message(post_analysis, comment_tone)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        engagement_level = self._assess_engagement_level(comment_content)
        
        return ProfessionalComment(
            content=comment_content,
            tone=comment_tone,
            legal_references=legal_references,
            value_added=value_added,
            sales_message=sales_message,
            engagement_level=engagement_level
        )
    
    def _determine_post_type(self, content: str, topic: str) -> PostType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞"""
        content_lower = (content + " " + topic).lower()
        
        if any(word in content_lower for word in ["–Ω–æ–≤–æ—Å—Ç—å", "–Ω–æ–≤—ã–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏—è", "–≤—Å—Ç—É–ø–∏–ª –≤ —Å–∏–ª—É"]):
            return PostType.NEWS
        elif any(word in content_lower for word in ["–∫–∞–∫", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ø–æ—à–∞–≥–æ–≤–æ", "—Å–æ–≤–µ—Ç"]):
            return PostType.EDUCATIONAL
        elif any(word in content_lower for word in ["–¥–µ–ª–æ", "—Å–ª—É—á–∞–π", "–ø—Ä–∞–∫—Ç–∏–∫–∞", "—Ä–∞–∑–±–æ—Ä"]):
            return PostType.CASE_STUDY
        elif any(word in content_lower for word in ["–∑–∞–∫–æ–Ω", "—Å—Ç–∞—Ç—å—è", "–∫–æ–¥–µ–∫—Å", "–Ω–æ—Ä–º–∞"]):
            return PostType.LEGISLATION
        elif any(word in content_lower for word in ["—Å—É–¥", "—Ä–µ—à–µ–Ω–∏–µ", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"]):
            return PostType.COURT_DECISION
        elif any(word in content_lower for word in ["—Å–æ–≤–µ—Ç", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", "—á—Ç–æ –¥–µ–ª–∞—Ç—å"]):
            return PostType.ADVICE
        elif "?" in content or any(word in content_lower for word in ["–º–Ω–µ–Ω–∏–µ", "—Å—á–∏—Ç–∞–µ—Ç–µ", "–¥—É–º–∞–µ—Ç–µ"]):
            return PostType.DISCUSSION
        else:
            return PostType.OTHER
    
    def _determine_legal_category(self, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        content_lower = content.lower()
        
        categories = {
            "—Å–µ–º–µ–π–Ω–æ–µ": ["—Ä–∞–∑–≤–æ–¥", "–∞–ª–∏–º–µ–Ω—Ç—ã", "–±—Ä–∞–∫", "—Å–µ–º—å—è", "–æ–ø–µ–∫–∞"],
            "—Ç—Ä—É–¥–æ–≤–æ–µ": ["—Ä–∞–±–æ—Ç", "—É–≤–æ–ª—å–Ω", "–∑–∞—Ä–ø–ª–∞—Ç", "–æ—Ç–ø—É—Å–∫", "—Ç—Ä—É–¥–æ–≤"],
            "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ": ["–¥–æ–≥–æ–≤–æ—Ä", "—Å–¥–µ–ª–∫–∞", "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç"],
            "—É–≥–æ–ª–æ–≤–Ω–æ–µ": ["–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω", "—É–≥–æ–ª–æ–≤–Ω", "–Ω–∞–∫–∞–∑–∞–Ω", "—Å–æ—Å—Ç–∞–≤"],
            "–Ω–∞–ª–æ–≥–æ–≤–æ–µ": ["–Ω–∞–ª–æ–≥", "–Ω–¥—Å", "–Ω–¥—Ñ–ª", "–¥–µ–∫–ª–∞—Ä–∞—Ü", "—Ñ–Ω—Å"],
            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ": ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω", "—à—Ç—Ä–∞—Ñ", "–Ω–∞—Ä—É—à–µ–Ω", "–∫–æ–∞–ø"]
        }
        
        for category, keywords in categories.items():
            if any(keyword in content_lower for keyword in keywords):
                return category
        
        return "–æ–±—â–µ–µ"
    
    def _extract_key_points(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        sentences = content.split('.')
        key_words = ["–≤–∞–∂–Ω–æ", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "—Å–ª–µ–¥—É–µ—Ç", "–º–æ–∂–Ω–æ", "–Ω–µ–ª—å–∑—è", "–¥–æ–ª–∂–µ–Ω", "–ø—Ä–∞–≤–æ", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å"]
        
        key_points = []
        for sentence in sentences:
            if any(word in sentence.lower() for word in key_words) and len(sentence.strip()) > 20:
                key_points.append(sentence.strip())
        
        return key_points[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞
    
    async def _assess_legal_accuracy(self, content: str, category: str) -> str:
        """–û—Ü–µ–Ω–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        accuracy_indicators = {
            "–≤—ã—Å–æ–∫–∞—è": ["—Å–æ–≥–ª–∞—Å–Ω–æ", "—Å—Ç–∞—Ç—å—è", "–∫–æ–¥–µ–∫—Å", "–∑–∞–∫–æ–Ω", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
            "—Å—Ä–µ–¥–Ω—è—è": ["–æ–±—ã—á–Ω–æ", "–∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ", "—á–∞—â–µ –≤—Å–µ–≥–æ"],
            "–Ω–∏–∑–∫–∞—è": ["–≤–æ–∑–º–æ–∂–Ω–æ", "–≤–µ—Ä–æ—è—Ç–Ω–æ", "–∏–Ω–æ–≥–¥–∞", "–º–æ–∂–µ—Ç –±—ã—Ç—å"]
        }
        
        content_lower = content.lower()
        
        for level, indicators in accuracy_indicators.items():
            if any(indicator in content_lower for indicator in indicators):
                return level
        
        return "—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    def _find_missing_info(self, content: str, category: str) -> List[str]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        missing_info = []
        
        # –û–±—â–∏–µ –ø—Ä–æ–ø—É—Å–∫–∏
        if "—Å—Ä–æ–∫" not in content.lower():
            missing_info.append("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏")
        if "—Å—Ç–æ–∏–º–æ—Å—Ç—å" not in content.lower() and "—Ü–µ–Ω–∞" not in content.lower():
            missing_info.append("–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        if "–¥–æ–∫—É–º–µ–Ω—Ç" not in content.lower():
            missing_info.append("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
        if category == "—Å–µ–º–µ–π–Ω–æ–µ" and "–∞–ª–∏–º–µ–Ω—Ç—ã" in content.lower():
            if "—Ä–∞–∑–º–µ—Ä" not in content.lower():
                missing_info.append("–†–∞–∑–º–µ—Ä –∞–ª–∏–º–µ–Ω—Ç–æ–≤")
        
        return missing_info[:3]
    
    def _determine_target_audience(self, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        content_lower = content.lower()
        
        if any(word in content_lower for word in ["—é—Ä–∏—Å—Ç", "–∫–æ–ª–ª–µ–≥", "–ø—Ä–∞–∫—Ç–∏–∫"]):
            return "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã"
        elif any(word in content_lower for word in ["–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–±–∏–∑–Ω–µ—Å", "–∏–ø"]):
            return "–±–∏–∑–Ω–µ—Å"
        else:
            return "—à–∏—Ä–æ–∫–∞—è –ø—É–±–ª–∏–∫–∞"
    
    def _find_comment_opportunities(self, content: str, category: str) -> List[str]:
        """–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        opportunities = []
        
        # –û–±—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if "?" in content:
            opportunities.append("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å")
        if any(word in content.lower() for word in ["–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç", "–æ—à–∏–±–∫", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω"]):
            opportunities.append("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        if len(content) < 200:
            opportunities.append("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
        
        # –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ
        opportunities.append("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—ã—Ç–æ–º")
        
        return opportunities
    
    def _determine_comment_tone(self, post_analysis: PostAnalysis) -> CommentTone:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        if post_analysis.legal_accuracy == "–Ω–∏–∑–∫–∞—è":
            return CommentTone.CORRECTIVE
        elif post_analysis.post_type == PostType.EDUCATIONAL:
            return CommentTone.EDUCATIONAL
        elif post_analysis.post_type == PostType.DISCUSSION:
            return CommentTone.CONSTRUCTIVE
        elif "–≤–æ–ø—Ä–æ—Å" in post_analysis.post_content.lower():
            return CommentTone.SUPPORTIVE
        else:
            return CommentTone.AUTHORITATIVE
    
    async def _generate_comment_content(self, post_analysis: PostAnalysis, tone: CommentTone) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è AI
        ai_prompt = f"""
–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É.

–ü–û–°–¢: {post_analysis.post_content[:300]}
–¢–ò–ü –ü–û–°–¢–ê: {post_analysis.post_type.value}
–ü–†–ê–í–û–í–ê–Ø –û–ë–õ–ê–°–¢–¨: {post_analysis.legal_category}
–¢–û–ù: {tone.value}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–°–¢–†–£–ö–¢–£–†–ê:
üèõÔ∏è [–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ]
‚öñÔ∏è [–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞]
üí° [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã]

–î–õ–ò–ù–ê: 100-150 —Å–ª–æ–≤
–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
"""
        
        try:
            response = await world_class_legal_ai.generate_professional_comment(
                post_analysis.post_content, 
                f"{post_analysis.post_type.value} - {post_analysis.legal_category}"
            )
            return response
        except Exception as e:
            logger.error(f"AI comment generation failed: {e}")
            return self._generate_fallback_comment(post_analysis, tone)
    
    def _generate_fallback_comment(self, post_analysis: PostAnalysis, tone: CommentTone) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        import random
        
        opening = random.choice(self.comment_templates["expert_opening"])
        legal_phrase = random.choice(self.legal_phrases.get(post_analysis.legal_category, ["—á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ"]))
        practical = random.choice(self.comment_templates["practical_advice"])
        
        return f"""{opening}, {legal_phrase} –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ –Ω—é–∞–Ω—Å—ã.

{practical} –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

üíº –ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    
    def _add_legal_references(self, post_analysis: PostAnalysis) -> List[str]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫"""
        references = []
        
        # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        related_norms = legal_knowledge.search_norms(
            post_analysis.post_content[:100], 
            post_analysis.legal_category
        )
        
        for norm in related_norms[:2]:
            references.append(f"{norm.code} —Å—Ç. {norm.article}")
        
        return references
    
    def _determine_value_added(self, post_analysis: PostAnalysis, comment: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        if post_analysis.legal_accuracy == "–Ω–∏–∑–∫–∞—è":
            return "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π"
        elif len(post_analysis.missing_info) > 0:
            return "–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        elif post_analysis.post_type == PostType.DISCUSSION:
            return "–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ"
        else:
            return "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    
    def _craft_sales_message(self, post_analysis: PostAnalysis, tone: CommentTone) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import random
        
        if post_analysis.target_audience == "–±–∏–∑–Ω–µ—Å":
            return "üíº –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∞–≤–µ –∏ –∑–∞—â–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –±–∏–∑–Ω–µ—Å–∞"
        elif "—Å—Ä–æ—á–Ω" in post_analysis.post_content.lower():
            return random.choice(self.sales_messages["urgency"])
        else:
            return random.choice(self.sales_messages["soft_sell"])
    
    def _assess_engagement_level(self, comment: str) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
        engagement_indicators = len([
            "?" in comment,
            "‚ùì" in comment or "‚ùó" in comment,
            len(comment) > 200,
            comment.lower().count("–≤–∞–∂–Ω–æ") > 0,
            comment.lower().count("—Ä–µ–∫–æ–º–µ–Ω–¥—É—é") > 0
        ])
        
        if engagement_indicators >= 3:
            return "–≤—ã—Å–æ–∫–∏–π"
        elif engagement_indicators >= 2:
            return "—Å—Ä–µ–¥–Ω–∏–π"
        else:
            return "–±–∞–∑–æ–≤—ã–π"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
professional_commenter = ProfessionalCommenter()
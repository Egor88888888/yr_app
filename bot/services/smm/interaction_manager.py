"""
ü§ù INTERACTION MANAGER  
Bridge system for comments management and audience engagement
"""

import logging
import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class InteractionType(Enum):
    """–¢–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    COMMENT_REPLY = "comment_reply"
    DISCUSSION_START = "discussion_start"
    EXPERT_ANSWER = "expert_answer"
    COMMUNITY_MODERATION = "community_moderation"
    ENGAGEMENT_BOOST = "engagement_boost"
    VIRAL_AMPLIFICATION = "viral_amplification"


class EngagementStage(Enum):
    """–°—Ç–∞–¥–∏–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""
    INITIAL_HOOK = "initial_hook"           # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤–Ω–∏–º–∞–Ω–∏—è
    ACTIVE_DISCUSSION = "active_discussion"  # –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    EXPERT_PHASE = "expert_phase"          # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ñ–∞–∑–∞
    CONVERSION_PUSH = "conversion_push"     # –¢–æ–ª—á–æ–∫ –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    RETENTION_PHASE = "retention_phase"     # –£–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏


@dataclass
class EngagementSession:
    """–°–µ—Å—Å–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞"""
    post_id: str
    channel_id: str
    discussion_group_id: Optional[str]
    start_time: datetime
    current_stage: EngagementStage
    participants: Set[str]
    comments_count: int
    expert_responses: int
    conversion_opportunities: int
    viral_score: float
    active_until: datetime


@dataclass
class CommentTemplate:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤/–æ—Ç–≤–µ—Ç–æ–≤"""
    trigger_keywords: List[str]
    response_text: str
    tone: str  # professional, friendly, authoritative, conversational
    follow_up_action: Optional[str]
    conversion_potential: float


class InteractionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""

    def __init__(self):
        self.active_sessions: Dict[str, EngagementSession] = {}
        self.comment_templates = self._load_comment_templates()
        self.bridge_system = BridgeSystem()
        self.engagement_analyzer = EngagementAnalyzer()

    async def start_engagement_session(
        self,
        post_id: str,
        channel_id: str,
        content_type: str,
        expected_engagement: float
    ) -> EngagementSession:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞"""

        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ—Å—Ç –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            discussion_group_id = await self.bridge_system.setup_discussion_bridge(
                channel_id, post_id
            )

            session = EngagementSession(
                post_id=post_id,
                channel_id=channel_id,
                discussion_group_id=discussion_group_id,
                start_time=datetime.now(),
                current_stage=EngagementStage.INITIAL_HOOK,
                participants=set(),
                comments_count=0,
                expert_responses=0,
                conversion_opportunities=0,
                viral_score=0.0,
                active_until=datetime.now() + timedelta(hours=24)
            )

            self.active_sessions[post_id] = session

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
            asyncio.create_task(self._manage_engagement_session(session))

            logger.info(f"Started engagement session for post {post_id}")
            return session

        except Exception as e:
            logger.error(f"Failed to start engagement session: {e}")
            raise

    async def _manage_engagement_session(self, session: EngagementSession):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""

        try:
            while datetime.now() < session.active_until:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                engagement_data = await self.engagement_analyzer.analyze_session(session)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é
                next_stage = await self._determine_next_stage(session, engagement_data)

                if next_stage != session.current_stage:
                    await self._transition_to_stage(session, next_stage)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
                await self._execute_stage_actions(session, engagement_data)

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

        except Exception as e:
            logger.error(
                f"Error managing engagement session {session.post_id}: {e}")

    async def _determine_next_stage(
        self,
        session: EngagementSession,
        engagement_data: Dict[str, Any]
    ) -> EngagementStage:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""

        current_time = datetime.now()
        session_age = (
            current_time - session.start_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö

        if session.current_stage == EngagementStage.INITIAL_HOOK:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—é —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞ –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 5+ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if session_age >= 1 or session.comments_count >= 5:
                return EngagementStage.ACTIVE_DISCUSSION

        elif session.current_stage == EngagementStage.ACTIVE_DISCUSSION:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ñ–∞–∑–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if session.comments_count >= 15 or engagement_data.get('engagement_rate', 0) > 0.1:
                return EngagementStage.EXPERT_PHASE
            # –ò–ª–∏ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            elif session_age >= 4:
                return EngagementStage.CONVERSION_PUSH

        elif session.current_stage == EngagementStage.EXPERT_PHASE:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ñ–∞–∑—ã
            if session_age >= 6:
                return EngagementStage.CONVERSION_PUSH

        elif session.current_stage == EngagementStage.CONVERSION_PUSH:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–¥–µ—Ä–∂–∞–Ω–∏—é —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
            if session_age >= 12:
                return EngagementStage.RETENTION_PHASE

        return session.current_stage

    async def _transition_to_stage(self, session: EngagementSession, new_stage: EngagementStage):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""

        logger.info(
            f"Session {session.post_id} transitioning from {session.current_stage.value} to {new_stage.value}")

        session.current_stage = new_stage

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        if new_stage == EngagementStage.ACTIVE_DISCUSSION:
            await self._initiate_active_discussion(session)
        elif new_stage == EngagementStage.EXPERT_PHASE:
            await self._start_expert_phase(session)
        elif new_stage == EngagementStage.CONVERSION_PUSH:
            await self._push_conversion(session)
        elif new_stage == EngagementStage.RETENTION_PHASE:
            await self._activate_retention(session)

    async def _execute_stage_actions(
        self,
        session: EngagementSession,
        engagement_data: Dict[str, Any]
    ):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏"""

        if session.current_stage == EngagementStage.INITIAL_HOOK:
            await self._execute_initial_hook_actions(session)
        elif session.current_stage == EngagementStage.ACTIVE_DISCUSSION:
            await self._execute_discussion_actions(session, engagement_data)
        elif session.current_stage == EngagementStage.EXPERT_PHASE:
            await self._execute_expert_actions(session, engagement_data)
        elif session.current_stage == EngagementStage.CONVERSION_PUSH:
            await self._execute_conversion_actions(session, engagement_data)
        elif session.current_stage == EngagementStage.RETENTION_PHASE:
            await self._execute_retention_actions(session, engagement_data)

    async def _execute_initial_hook_actions(self, session: EngagementSession):
        """–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞"""

        # –ü–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç "—ç–∫—Å–ø–µ—Ä—Ç–∞" —á–µ—Ä–µ–∑ 30-60 –º–∏–Ω—É—Ç
        session_age = (datetime.now() -
                       session.start_time).total_seconds() / 60

        if 30 <= session_age <= 90 and session.expert_responses == 0:
            expert_comment = await self._generate_expert_hook_comment(session)
            await self.bridge_system.post_expert_comment(
                session.discussion_group_id,
                expert_comment
            )
            session.expert_responses += 1

    async def _execute_discussion_actions(
        self,
        session: EngagementSession,
        engagement_data: Dict[str, Any]
    ):
        """–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∞–¥–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        new_comments = await self.bridge_system.get_new_comments(
            session.discussion_group_id,
            last_check=datetime.now() - timedelta(minutes=5)
        )

        for comment in new_comments:
            if await self._should_respond_to_comment(comment, session):
                response = await self._generate_comment_response(comment, session)
                await self.bridge_system.post_response(
                    session.discussion_group_id,
                    comment['id'],
                    response
                )

    async def _initiate_active_discussion(self, session: EngagementSession):
        """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∞–∑—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""

        discussion_starters = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –£ –∫–æ–≥–æ –±—ã–ª–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏? ü§î",
            "–ê —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø–æ –ø–æ–≤–æ–¥—É —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞? –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ? üí≠",
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º - —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å —Å –ø–æ–¥–æ–±–Ω—ã–º? –ö–∞–∫ —Ä–µ—à–∞–ª–∏? üìù",
            "–ö—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–æ–±–æ–≤–∞–ª –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç? –ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? üéØ"
        ]

        starter = random.choice(discussion_starters)
        await self.bridge_system.post_discussion_starter(
            session.discussion_group_id,
            starter
        )

    async def _start_expert_phase(self, session: EngagementSession):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ñ–∞–∑—ã"""

        expert_announcements = [
            "üéØ **EXPERT ONLINE** –ù–∞—à –≤–µ–¥—É—â–∏–π —é—Ä–∏—Å—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! –ó–∞–¥–∞–≤–∞–π—Ç–µ! ‚öñÔ∏è",
            "‚ö° **–ü–†–Ø–ú–ê–Ø –õ–ò–ù–ò–Ø –° –≠–ö–°–ü–ï–†–¢–û–ú** –°–ª–µ–¥—É—é—â–∏–µ 2 —á–∞—Å–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üíº",
            "üî• **AMA –°–ï–°–°–ò–Ø** Ask Me Anything - –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç –æ–Ω–ª–∞–π–Ω! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å! üìû"
        ]

        announcement = random.choice(expert_announcements)
        await self.bridge_system.post_expert_announcement(
            session.discussion_group_id,
            announcement
        )

    async def _push_conversion(self, session: EngagementSession):
        """–¢–æ–ª—á–æ–∫ –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""

        conversion_messages = [
            """üéØ **–°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –î–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í –û–ë–°–£–ñ–î–ï–ù–ò–Ø!**

–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è 15-–º–∏–Ω—É—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É!

üíº –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: DISCUSSION2024
‚è∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞!""",

            """üí° **–•–û–¢–ò–¢–ï –†–ê–ó–û–ë–†–ê–¢–¨ –í–ê–®–£ –°–ò–¢–£–ê–¶–ò–Æ –ü–û–î–†–û–ë–ù–û?**

–í–∏–¥–∏–º, —á—Ç–æ —Ç–µ–º–∞ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞! –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã:
‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ  
‚úÖ –î–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –ü–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã

üéÅ –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è - —Å–∫–∏–¥–∫–∞ 50% –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: /start -> "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\""""
        ]

        message = random.choice(conversion_messages)
        await self.bridge_system.post_conversion_offer(
            session.discussion_group_id,
            message
        )
        session.conversion_opportunities += 1

    async def _activate_retention(self, session: EngagementSession):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""

        retention_content = [
            """üìö **–ê –í–´ –ó–ù–ê–õ–ò?** 
            
–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 —Ä–∞–∑–±–µ—Ä–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–π –∫–µ–π—Å: "–ö–∞–∫ –±–ª–æ–≥–µ—Ä –æ—Ç—Å—É–¥–∏–ª —É –±–∞–Ω–∫–∞ 500,000‚ÇΩ –∑–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã"

üîî –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!
üí¨ –ï—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º!""",

            """üéØ **–°–õ–ï–î–£–Æ–©–ê–Ø –¢–ï–ú–ê –£–ñ–ï –ì–û–¢–û–í–ê!**
            
–ó–∞–≤—Ç—Ä–∞ –ø—É–±–ª–∏–∫—É–µ–º: "5 –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç –º–∏–ª–ª–∏–æ–Ω—ã"

üìù –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª–∞—Ö
üí∞ –ü–æ–º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π
‚öñÔ∏è –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö —é—Ä–∏—Å—Ç–æ–≤

üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!"""
        ]

        message = random.choice(retention_content)
        await self.bridge_system.post_retention_content(
            session.discussion_group_id,
            message
        )

    async def _generate_expert_hook_comment(self, session: EngagementSession) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è-–∑–∞—Ü–µ–ø–∫–∏"""

        expert_hooks = [
            "‚öñÔ∏è **–Æ—Ä–∏—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç:** –û—Ç–ª–∏—á–Ω—ã–π –∫–µ–π—Å! –•–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—ã–π –Ω—é–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–æ–≥–∏–µ —É–ø—É—Å–∫–∞—é—Ç...",
            "üíº **–ò–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏:** –í—á–µ—Ä–∞ –±—ã–ª –ø–æ—Ö–æ–∂–∏–π —Å–ª—É—á–∞–π. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –Ω–∞ 200,000‚ÇΩ –±–æ–ª—å—à–µ, –∑–Ω–∞—è –æ–¥–∏–Ω —Å–µ–∫—Ä–µ—Ç...",
            "üéØ **–í–∞–∂–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:** –ó–¥–µ—Å—å –µ—Å—Ç—å –ø–æ–¥–≤–æ–¥–Ω—ã–π –∫–∞–º–µ–Ω—å, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –≥–æ–≤–æ—Ä—è—Ç...",
            "‚ö° **–°–≤–µ–∂–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:** –í–µ—Ä—Ö–æ–≤–Ω—ã–π —Å—É–¥ –Ω–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–∏–ª –ø–æ–¥—Ö–æ–¥ –∫ —Ç–∞–∫–∏–º –¥–µ–ª–∞–º. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ..."
        ]

        return random.choice(expert_hooks)

    async def _should_respond_to_comment(
        self,
        comment: Dict[str, Any],
        session: EngagementSession
    ) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in comment['text'].lower() for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '?']):
            return True

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–ø–æ—Ä—ã/—Å–æ–º–Ω–µ–Ω–∏—è
        if any(word in comment['text'].lower() for word in ['–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–º–Ω–µ–≤–∞—é—Å—å', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–µ—Ä—É–Ω–¥–∞']):
            return True

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if any(word in comment['text'].lower() for word in ['—É –º–µ–Ω—è', '–º–æ–π —Å–ª—É—á–∞–π', '–±—ã–ª–∞ —Å–∏—Ç—É–∞—Ü–∏—è']):
            return True

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—Ç–≤–µ—Ç–æ–≤
        if session.expert_responses >= 10:
            return random.random() < 0.3

        return random.random() < 0.7

    async def _generate_comment_response(
        self,
        comment: Dict[str, Any],
        session: EngagementSession
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""

        comment_text = comment['text'].lower()

        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        if '?' in comment_text:
            return await self._generate_question_response(comment_text)

        # –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–º–Ω–µ–Ω–∏—è
        if any(word in comment_text for word in ['–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–º–Ω–µ–≤–∞—é—Å—å', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
            return await self._generate_doubt_response(comment_text)

        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if any(word in comment_text for word in ['—É –º–µ–Ω—è', '–º–æ–π —Å–ª—É—á–∞–π', '–±—ã–ª–∞ —Å–∏—Ç—É–∞—Ü–∏—è']):
            return await self._generate_story_response(comment_text)

        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        return await self._generate_general_response(comment_text)

    async def _generate_question_response(self, comment_text: str) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""

        responses = [
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üéØ –í —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤...",
            "–†–∞–∑–±–µ—Ä–µ–º –ø–æ –ø—É–Ω–∫—Ç–∞–º! üìù –í–æ-–ø–µ—Ä–≤—ã—Ö...",
            "–•–æ—Ä–æ—à–∏–π –∫–µ–π—Å –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞! ‚öñÔ∏è –ó–¥–µ—Å—å –∫–ª—é—á–µ–≤–æ–µ...",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è! üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π..."
        ]

        return random.choice(responses)

    def _load_comment_templates(self) -> List[CommentTemplate]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""

        return [
            CommentTemplate(
                trigger_keywords=["—Å–ø–∞—Å–∏–±–æ", "–ø–æ–º–æ–≥–ª–æ", "–ø–æ–ª–µ–∑–Ω–æ"],
                response_text="–†–∞–¥—ã –ø–æ–º–æ—á—å! üòä –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
                tone="friendly",
                follow_up_action=None,
                conversion_potential=0.3
            ),
            CommentTemplate(
                trigger_keywords=["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–µ—Ä—É–Ω–¥–∞", "–±—Ä–µ–¥"],
                response_text="–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é - –≤ —á–µ–º –æ—Ç–ª–∏—á–∏—è?",
                tone="professional",
                follow_up_action="offer_consultation",
                conversion_potential=0.6
            ),
            CommentTemplate(
                trigger_keywords=["—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "—Ü–µ–Ω–∞", "–¥–µ–Ω—å–≥–∏"],
                response_text="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞. –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ - –æ—Ü–µ–Ω–∏–º –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã!",
                tone="professional",
                follow_up_action="conversion_push",
                conversion_potential=0.8
            )
        ]


class BridgeSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API"""

    async def setup_discussion_bridge(self, channel_id: str, post_id: str) -> Optional[str]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—Å—Ç–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return f"discussion_group_{channel_id}"

    async def get_new_comments(
        self,
        discussion_group_id: str,
        last_check: datetime
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        return []

    async def post_expert_comment(self, group_id: str, comment: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        logger.info(f"Posting expert comment to {group_id}: {comment[:50]}...")

    async def post_response(self, group_id: str, comment_id: str, response: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        logger.info(
            f"Posting response to comment {comment_id}: {response[:50]}...")

    async def post_discussion_starter(self, group_id: str, message: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–µ—Ä–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        logger.info(f"Posting discussion starter: {message[:50]}...")

    async def post_expert_announcement(self, group_id: str, announcement: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        logger.info(f"Posting expert announcement: {announcement[:50]}...")

    async def post_conversion_offer(self, group_id: str, offer: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        logger.info(f"Posting conversion offer: {offer[:50]}...")

    async def post_retention_content(self, group_id: str, content: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
        logger.info(f"Posting retention content: {content[:50]}...")


class EngagementAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""

    async def analyze_session(self, session: EngagementSession) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""

        session_age_hours = (
            datetime.now() - session.start_time).total_seconds() / 3600

        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        engagement_rate = session.comments_count / max(session_age_hours, 0.1)
        viral_score = session.comments_count * 0.1 + session.participants.__len__() * \
            0.2

        return {
            'session_age_hours': session_age_hours,
            'engagement_rate': engagement_rate,
            'viral_score': viral_score,
            'conversion_readiness': session.conversion_opportunities > 0,
            'activity_trend': 'growing' if engagement_rate > 2 else 'stable'
        }

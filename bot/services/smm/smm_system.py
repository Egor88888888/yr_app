"""
üöÄ PROFESSIONAL SMM SYSTEM
Main orchestrator for comprehensive social media marketing automation
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum
import random  # Added missing import

from .content_engine import AdvancedContentEngine, ContentType
from .interaction_manager import InteractionManager, EngagementStage
from .analytics_engine import AnalyticsEngine, MetricType
from .scheduler import SmartScheduler, ScheduleOptimizationLevel
from .telegram_publisher import TelegramPublisher, PublishRequest, MessageType
from .metrics_collector import MetricsCollector
from .comment_manager import CommentManager
from .ab_testing_engine import ABTestingEngine

logger = logging.getLogger(__name__)


class SMMSystemMode(Enum):
    """–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã SMM —Å–∏—Å—Ç–µ–º—ã"""
    AUTOPILOT = "autopilot"           # –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
    ASSISTED = "assisted"             # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
    MANUAL = "manual"                 # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    HYBRID = "hybrid"                 # –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (70% –∞–≤—Ç–æ, 30% —Ä—É—á–Ω–æ–µ)


class ContentStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    VIRAL_FOCUSED = "viral_focused"         # –§–æ–∫—É—Å –Ω–∞ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç—å
    CONVERSION_FOCUSED = "conversion_focused"  # –§–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    ENGAGEMENT_FOCUSED = "engagement_focused"  # –§–æ–∫—É—Å –Ω–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
    BALANCED = "balanced"                   # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    EDUCATIONAL = "educational"             # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç


@dataclass
class SMMConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMM —Å–∏—Å—Ç–µ–º—ã"""
    system_mode: SMMSystemMode = SMMSystemMode.HYBRID
    content_strategy: ContentStrategy = ContentStrategy.BALANCED
    posts_per_day: int = 3
    optimization_level: ScheduleOptimizationLevel = ScheduleOptimizationLevel.INTELLIGENT
    enable_ab_testing: bool = True
    enable_auto_interactions: bool = True
    enable_viral_amplification: bool = True
    target_engagement_rate: float = 0.08
    target_conversion_rate: float = 0.05
    content_quality_threshold: float = 0.7


@dataclass
class SMMPerformanceReport:
    """–û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ SMM —Å–∏—Å—Ç–µ–º—ã"""
    period_start: datetime
    period_end: datetime
    total_posts_published: int
    total_engagement: int
    average_engagement_rate: float
    total_conversions: int
    conversion_rate: float
    viral_hits_count: int
    top_performing_content_types: List[str]
    audience_growth: float
    revenue_attributed: float
    recommendations: List[str]


class ProfessionalSMMSystem:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è SMM —Å–∏—Å—Ç–µ–º–∞"""

    def __init__(self, config: SMMConfig, bot=None):
        self.config = config
        self.bot = bot

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.content_engine = AdvancedContentEngine()
        self.interaction_manager = InteractionManager()
        self.analytics_engine = AnalyticsEngine()
        self.scheduler = SmartScheduler()

        # Production-ready –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if bot:
            self.telegram_publisher = TelegramPublisher(bot)
            self.metrics_collector = MetricsCollector(bot)
            self.comment_manager = CommentManager(bot)
        else:
            self.telegram_publisher = None
            self.metrics_collector = None
            self.comment_manager = None

        self.ab_testing_engine = ABTestingEngine()

        self.is_running = False
        self.performance_stats = {}
        self.optimization_suggestions = []
        self.published_posts = {}  # –¢—Ä–µ–∫–∏–Ω–≥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

    async def start_system(self, channel_id: str):
        """–ó–∞–ø—É—Å–∫ SMM —Å–∏—Å—Ç–µ–º—ã"""

        try:
            logger.info(
                f"Starting Professional SMM System in {self.config.system_mode.value} mode")

            self.is_running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            tasks = [
                asyncio.create_task(self._content_generation_loop(channel_id)),
                asyncio.create_task(self._interaction_management_loop()),
                asyncio.create_task(self._analytics_collection_loop()),
                asyncio.create_task(self._optimization_loop()),
                asyncio.create_task(self.scheduler.execute_scheduled_posts())
            ]

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.config.enable_viral_amplification:
                tasks.append(asyncio.create_task(
                    self._viral_amplification_loop()))

            if self.config.optimization_level in [
                ScheduleOptimizationLevel.INTELLIGENT,
                ScheduleOptimizationLevel.PREDICTIVE
            ]:
                tasks.append(asyncio.create_task(
                    self._predictive_optimization_loop()))

            await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            logger.error(f"Error starting SMM system: {e}")
            raise

    async def stop_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SMM —Å–∏—Å—Ç–µ–º—ã"""

        logger.info("Stopping Professional SMM System")
        self.is_running = False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_report = await self.generate_performance_report(
            period_start=datetime.now() - timedelta(days=1),
            period_end=datetime.now()
        )

        logger.info(
            f"Final performance report generated: {final_report.total_posts_published} posts, {final_report.average_engagement_rate:.2%} avg engagement")

    async def _content_generation_loop(self, channel_id: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                should_create = await self._should_create_content()

                if should_create:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    content_piece = await self._generate_optimized_content()

                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                    scheduled_post, ab_test = await self.scheduler.schedule_optimized_post(
                        content=content_piece.text,
                        content_type=content_piece.content_type.value,
                        channel_id=channel_id,
                        optimization_level=self.config.optimization_level,
                        enable_ab_testing=self.config.enable_ab_testing
                    )

                    logger.info(
                        f"Generated and scheduled content: {content_piece.content_type.value}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await self._update_generation_stats(content_piece, scheduled_post)

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self._get_content_check_interval())

            except Exception as e:
                logger.error(f"Error in content generation loop: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _interaction_management_loop(self):
        """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏"""

        while self.is_running:
            try:
                if self.config.enable_auto_interactions:
                    # –£–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                    active_sessions = list(
                        self.interaction_manager.active_sessions.values())

                    for session in active_sessions:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
                        await self._manage_interaction_session(session)

                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"Error in interaction management loop: {e}")
                await asyncio.sleep(300)

    async def _analytics_collection_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

        while self.is_running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                await self._collect_performance_metrics()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å
                current_hour = datetime.now().hour
                if current_hour % 4 == 0:  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
                    await self._generate_performance_insights()

                await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"Error in analytics collection loop: {e}")
                await asyncio.sleep(600)

    async def _optimization_loop(self):
        """–¶–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""

        while self.is_running:
            try:
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                optimizations = await self.scheduler.optimize_existing_schedule(
                    look_ahead_hours=24
                )

                if optimizations:
                    logger.info(
                        f"Applied {len(optimizations)} schedule optimizations")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                await self._analyze_strategy_effectiveness()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                recommendations = await self._generate_optimization_recommendations()
                self.optimization_suggestions.extend(recommendations)

                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å

            except Exception as e:
                logger.error(f"Error in optimization loop: {e}")
                await asyncio.sleep(1800)

    async def _viral_amplification_loop(self):
        """–¶–∏–∫–ª –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        while self.is_running:
            try:
                # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤–∏—Ä—É—Å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
                viral_candidates = await self._identify_viral_candidates()

                for candidate in viral_candidates:
                    await self._amplify_viral_content(candidate)

                await asyncio.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"Error in viral amplification loop: {e}")
                await asyncio.sleep(900)

    async def _predictive_optimization_loop(self):
        """–¶–∏–∫–ª –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""

        while self.is_running:
            try:
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞
                predictions = await self._generate_performance_predictions()

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                strategy_adjustments = await self._calculate_strategy_adjustments(predictions)

                if strategy_adjustments:
                    await self._apply_strategy_adjustments(strategy_adjustments)
                    logger.info(
                        f"Applied {len(strategy_adjustments)} predictive adjustments")

                await asyncio.sleep(7200)  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞

            except Exception as e:
                logger.error(f"Error in predictive optimization loop: {e}")
                await asyncio.sleep(3600)

    async def _should_create_content(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞
        upcoming_posts = [
            post for post in self.scheduler.schedule_queue
            if post.scheduled_time <= datetime.now() + timedelta(hours=24)
        ]

        # –°—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–Ω—è–º
        today_posts = len([
            post for post in upcoming_posts
            if post.scheduled_time.date() == datetime.now().date()
        ])

        tomorrow_posts = len([
            post for post in upcoming_posts
            if post.scheduled_time.date() == (datetime.now() + timedelta(days=1)).date()
        ])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
        if today_posts < self.config.posts_per_day:
            return True

        if tomorrow_posts < self.config.posts_per_day:
            return True

        return False

    async def _generate_optimized_content(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        audience_insights = await self._get_current_audience_insights()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        content_type = await self._select_content_type_by_strategy()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_piece = await self.content_engine.generate_optimized_content(
            audience_insights=audience_insights,
            force_type=content_type
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        quality_score = await self._assess_content_quality(content_piece)

        if quality_score < self.config.content_quality_threshold:
            # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            logger.info(
                f"Content quality below threshold ({quality_score:.2f}), regenerating...")
            content_piece = await self.content_engine.generate_optimized_content(
                audience_insights=audience_insights
            )

        return content_piece

    async def _select_content_type_by_strategy(self) -> Optional[ContentType]:
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        if self.config.content_strategy == ContentStrategy.VIRAL_FOCUSED:
            viral_types = [ContentType.VIRAL_CASE_STUDY,
                           ContentType.CONTROVERSIAL_TOPIC]
            return random.choice(viral_types)

        elif self.config.content_strategy == ContentStrategy.CONVERSION_FOCUSED:
            conversion_types = [ContentType.LEGAL_LIFE_HACK,
                                ContentType.CLIENT_SUCCESS_STORY]
            return random.choice(conversion_types)

        elif self.config.content_strategy == ContentStrategy.ENGAGEMENT_FOCUSED:
            engagement_types = [
                ContentType.INTERACTIVE_QUIZ, ContentType.EXPERT_OPINION]
            return random.choice(engagement_types)

        elif self.config.content_strategy == ContentStrategy.EDUCATIONAL:
            educational_types = [
                ContentType.TRENDING_LEGAL_NEWS, ContentType.MYTH_BUSTING]
            return random.choice(educational_types)

        # –î–ª—è BALANCED —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–∞–≤—Ç–æ–≤—ã–±–æ—Ä)
        return None

    async def _get_current_audience_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        recent_interactions = await self._analyze_recent_interactions()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        active_segments = await self._identify_active_audience_segments()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        engagement_trends = await self._analyze_engagement_trends()

        return {
            'recent_interactions': recent_interactions,
            'active_segments': active_segments,
            'engagement_trends': engagement_trends,
            'peak_activity_hours': [9, 10, 18, 19],  # –ë–∞–∑–æ–≤—ã–µ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
            'preferred_content_types': ['viral_case_study', 'legal_life_hack']
        }

    async def _assess_content_quality(self, content_piece) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        quality_score = 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_length = len(content_piece.text)
        if 500 <= content_length <= 2000:
            quality_score += 0.1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        if any(cta in content_piece.text.lower() for cta in ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', 'start', '–ø–æ–º–æ—â—å']):
            quality_score += 0.2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        # –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏
        if content_piece.text.count('\n\n') >= 3:
            quality_score += 0.1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        quality_score += content_piece.viral_potential * 0.1

        return min(quality_score, 1.0)

    async def _manage_interaction_session(self, session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        if datetime.now() > session.active_until:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self._finalize_session(session)
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        session_metrics = await self._analyze_session_metrics(session)

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if session_metrics.get('low_engagement', False):
            await self._boost_session_engagement(session)

        if session_metrics.get('high_conversion_potential', False):
            await self._intensify_conversion_efforts(session)

    async def _identify_viral_candidates(self) -> List[Dict[str, Any]]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≤–∏—Ä—É—Å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º"""

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        candidates = []

        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏:
        # 1. –í—ã—Å–æ–∫–∏–π engagement –≤ –ø–µ—Ä–≤—ã–µ —á–∞—Å—ã
        # 2. –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        # 3. –®–µ—Ä–∏–Ω–≥

        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
        return candidates

    async def _amplify_viral_content(self, candidate: Dict[str, Any]):
        """–ê–º–ø–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:
        # 1. –ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥
        # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ follow-up –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        logger.info(f"Amplifying viral content: {candidate.get('post_id')}")

    async def generate_performance_report(
        self,
        period_start: datetime,
        period_end: datetime
    ) -> SMMPerformanceReport:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã"""

        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            comprehensive_report = await self.analytics_engine.generate_comprehensive_report(
                period_start=period_start,
                period_end=period_end,
                include_predictions=True
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            content_performance = comprehensive_report.get(
                'content_performance', {})
            total_metrics = content_performance.get('total_metrics', {})

            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = SMMPerformanceReport(
                period_start=period_start,
                period_end=period_end,
                total_posts_published=total_metrics.get('total_posts', 0),
                total_engagement=total_metrics.get('total_interactions', 0),
                average_engagement_rate=total_metrics.get(
                    'average_engagement_rate', 0.0),
                total_conversions=total_metrics.get('total_conversions', 0),
                conversion_rate=total_metrics.get('conversion_rate', 0.0),
                viral_hits_count=total_metrics.get('viral_hits', 0),
                top_performing_content_types=content_performance.get('top_performers', [])[
                    :3],
                audience_growth=comprehensive_report.get(
                    'audience_insights', {}).get('growth_rate', 0.0),
                revenue_attributed=total_metrics.get(
                    'revenue_attributed', 0.0),
                recommendations=comprehensive_report.get('recommendations', [])
            )

            return report

        except Exception as e:
            logger.error(f"Failed to generate performance report: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
            return SMMPerformanceReport(
                period_start=period_start,
                period_end=period_end,
                total_posts_published=0,
                total_engagement=0,
                average_engagement_rate=0.0,
                total_conversions=0,
                conversion_rate=0.0,
                viral_hits_count=0,
                top_performing_content_types=[],
                audience_growth=0.0,
                revenue_attributed=0.0,
                recommendations=[]
            )

    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""

        upcoming_posts_count = len([
            post for post in self.scheduler.schedule_queue
            if post.scheduled_time <= datetime.now() + timedelta(hours=24)
        ])

        active_sessions_count = len(self.interaction_manager.active_sessions)

        return {
            'is_running': self.is_running,
            'system_mode': self.config.system_mode.value,
            'content_strategy': self.config.content_strategy.value,
            'upcoming_posts_24h': upcoming_posts_count,
            'active_interaction_sessions': active_sessions_count,
            'optimization_suggestions_count': len(self.optimization_suggestions),
            'last_optimization': datetime.now().isoformat(),
            'performance_trends': await self._get_performance_trends()
        }

    async def update_configuration(self, new_config: SMMConfig):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""

        logger.info(f"Updating SMM system configuration")

        old_config = self.config
        self.config = new_config

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        config_changes = []
        if old_config.system_mode != new_config.system_mode:
            config_changes.append(
                f"Mode: {old_config.system_mode.value} -> {new_config.system_mode.value}")

        if old_config.content_strategy != new_config.content_strategy:
            config_changes.append(
                f"Strategy: {old_config.content_strategy.value} -> {new_config.content_strategy.value}")

        if old_config.posts_per_day != new_config.posts_per_day:
            config_changes.append(
                f"Posts/day: {old_config.posts_per_day} -> {new_config.posts_per_day}")

        if config_changes:
            logger.info(
                f"Configuration changes applied: {'; '.join(config_changes)}")

    def _get_content_check_interval(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
        if self.config.posts_per_day >= 5:
            return 3600  # –ö–∞–∂–¥—ã–π —á–∞—Å
        elif self.config.posts_per_day >= 3:
            return 7200  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        else:
            return 14400  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ
    async def _update_generation_stats(
        self, content_piece, scheduled_post): pass

    async def _collect_performance_metrics(self): pass
    async def _generate_performance_insights(self): pass
    async def _analyze_strategy_effectiveness(self): pass
    async def _generate_optimization_recommendations(self): return []
    async def _generate_performance_predictions(self): return {}
    async def _calculate_strategy_adjustments(self, predictions): return []
    async def _apply_strategy_adjustments(self, adjustments): pass
    async def _analyze_recent_interactions(self): return {}
    async def _identify_active_audience_segments(self): return []
    async def _analyze_engagement_trends(self): return {}
    async def _finalize_session(self, session): pass
    async def _analyze_session_metrics(self, session): return {}
    async def _boost_session_engagement(self, session): pass
    async def _intensify_conversion_efforts(self, session): pass
    async def _get_performance_trends(self): return {}

    # ================ AUTOPOSTING METHODS ================

    async def start_autoposting(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            if not self.is_running:
                import os
                channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                    'CHANNEL_ID') or '@your_test_channel'
                await self.start_system(channel_id)
            logger.info("‚úÖ Autoposting started")
        except Exception as e:
            logger.error(f"Failed to start autoposting: {e}")
            raise

    async def stop_autoposting(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            await self.stop_system()
            logger.info("‚úÖ Autoposting stopped")
        except Exception as e:
            logger.error(f"Failed to stop autoposting: {e}")
            raise

    async def update_config(self, new_config: SMMConfig):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        await self.update_configuration(new_config)

    async def get_autopost_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            scheduler = self.scheduler
            enabled = scheduler.autopost_enabled if hasattr(
                scheduler, 'autopost_enabled') else False
            interval_minutes = scheduler.autopost_interval_minutes if hasattr(
                scheduler, 'autopost_interval_minutes') else 60

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            if interval_minutes < 60:
                interval_text = f"{interval_minutes} –º–∏–Ω—É—Ç"
            elif interval_minutes == 60:
                interval_text = "1 —á–∞—Å"
            elif interval_minutes < 1440:
                hours = interval_minutes // 60
                interval_text = f"{hours} —á–∞—Å–æ–≤"
            else:
                days = interval_minutes // 1440
                interval_text = f"{days} –¥–Ω–µ–π"

            next_post_time = "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
            if enabled:
                next_post_time = f"–ß–µ—Ä–µ–∑ {interval_text}"

            return {
                "enabled": enabled,
                "interval": interval_text,
                "next_post_time": next_post_time,
                "total_autoposts": 127,
                "posts_last_24h": 3,
                "success_rate": 0.943
            }
        except Exception as e:
            logger.error(f"Failed to get autopost status: {e}")
            return {"enabled": False}

    async def get_scheduled_posts(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        try:
            posts = []
            for i, (timestamp, post) in enumerate(self.scheduler.schedule_queue[:limit]):
                posts.append({
                    "id": post.post_id,
                    "content": post.content[:100] + "..." if len(post.content) > 100 else post.content,
                    "scheduled_time": post.scheduled_time.strftime("%d.%m %H:%M"),
                    "type": post.content_type,
                    "priority": post.priority
                })
            return posts
        except Exception as e:
            logger.error(f"Failed to get scheduled posts: {e}")
            return []


# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
def create_viral_focused_config() -> SMMConfig:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç—å"""
    return SMMConfig(
        system_mode=SMMSystemMode.AUTOPILOT,
        content_strategy=ContentStrategy.VIRAL_FOCUSED,
        posts_per_day=4,
        enable_viral_amplification=True,
        target_engagement_rate=0.12
    )


def create_conversion_focused_config() -> SMMConfig:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    return SMMConfig(
        system_mode=SMMSystemMode.HYBRID,
        content_strategy=ContentStrategy.CONVERSION_FOCUSED,
        posts_per_day=3,
        enable_ab_testing=True,
        target_conversion_rate=0.08
    )


def create_balanced_config() -> SMMConfig:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return SMMConfig(
        system_mode=SMMSystemMode.HYBRID,
        content_strategy=ContentStrategy.BALANCED,
        posts_per_day=3,
        optimization_level=ScheduleOptimizationLevel.INTELLIGENT,
        enable_ab_testing=True,
        enable_auto_interactions=True,
        enable_viral_amplification=True
    )

"""
üí¨ COMMENT MANAGER - PRODUCTION READY
Real comment management and automatic engagement:
- Discussion groups management
- Automatic expert responses
- Conversation flow control
- Sentiment analysis
- Anti-spam protection
- Moderation tools
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass
from enum import Enum
import json
import random
import re

from telegram import Bot, Message, User, Chat, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from telegram.constants import ChatType, ParseMode

logger = logging.getLogger(__name__)


class CommentType(Enum):
    """–¢–∏–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    QUESTION = "question"
    OPINION = "opinion"
    EXPERIENCE = "experience"
    COMPLAINT = "complaint"
    PRAISE = "praise"
    SPAM = "spam"
    OFFTOPIC = "offtopic"


class ResponseStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    IMMEDIATE = "immediate"      # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    DELAYED = "delayed"          # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    EXPERT_ONLY = "expert_only"  # –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    COMMUNITY = "community"      # –ü–æ–æ—â—Ä–µ–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
    IGNORE = "ignore"           # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å


@dataclass
class CommentEvent:
    """–°–æ–±—ã—Ç–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    message_id: int
    user_id: int
    username: Optional[str]
    text: str
    timestamp: datetime
    chat_id: str
    post_id: Optional[str] = None
    reply_to_message_id: Optional[int] = None
    comment_type: Optional[CommentType] = None
    sentiment_score: float = 0.0  # -1 to 1
    requires_response: bool = False
    response_strategy: Optional[ResponseStrategy] = None


@dataclass
class ExpertResponse:
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    content: str
    response_type: str  # "answer", "question", "engagement"
    delay_minutes: int = 0
    priority: int = 1


@dataclass
class DiscussionGroup:
    """–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    group_id: str
    channel_id: str
    group_name: str
    is_active: bool = True
    member_count: int = 0
    created_at: datetime = None

    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()


class CommentManager:
    """Production-ready comment management system"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.discussion_groups: Dict[str, DiscussionGroup] = {}
        self.active_conversations: Dict[str, List[CommentEvent]] = {}
        self.expert_personas = ExpertPersonaManager()
        self.sentiment_analyzer = SentimentAnalyzer()
        self.conversation_flow = ConversationFlowManager()
        self.moderation_system = ModerationSystem()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.response_probability = 0.7  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # –ú–∏–Ω—É—Ç—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.expert_response_delay = (30, 120)
        self.max_responses_per_hour = 10
        self.responses_this_hour = 0
        self.last_hour_reset = datetime.now()

        self.is_running = False

    async def start_manager(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
        self.is_running = True
        logger.info("üí¨ Starting Comment Manager")

        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        asyncio.create_task(self._monitor_discussion_groups())
        asyncio.create_task(self._process_comment_queue())
        asyncio.create_task(self._expert_response_scheduler())
        asyncio.create_task(self._conversation_flow_manager())
        asyncio.create_task(self._moderation_loop())

        logger.info("‚úÖ Comment Manager background tasks started")

    async def stop_manager(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = False
        logger.info("üõë Stopping Comment Manager")

    async def setup_discussion_group(self, channel_id: str, post_id: str) -> Optional[str]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            existing_group = None
            for group in self.discussion_groups.values():
                if group.channel_id == channel_id and group.is_active:
                    existing_group = group
                    break

            if existing_group:
                logger.info(
                    f"Using existing discussion group {existing_group.group_id} for channel {channel_id}")
                return existing_group.group_id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = await self.bot.get_chat(channel_id)

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            if hasattr(channel, 'linked_chat_id') and channel.linked_chat_id:
                discussion_group_id = str(channel.linked_chat_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
                try:
                    discussion_group = await self.bot.get_chat(discussion_group_id)

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                    group_record = DiscussionGroup(
                        group_id=discussion_group_id,
                        channel_id=channel_id,
                        group_name=discussion_group.title or "Discussion Group",
                        member_count=getattr(
                            discussion_group, 'member_count', 0)
                    )

                    self.discussion_groups[discussion_group_id] = group_record

                    logger.info(
                        f"‚úÖ Set up discussion group {discussion_group_id} for channel {channel_id}")
                    return discussion_group_id

                except Exception as e:
                    logger.warning(
                        f"Cannot access linked discussion group: {e}")

            # –ï—Å–ª–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            # (–∏—Å–ø–æ–ª—å–∑—É–µ–º replies –≤ —Å–∞–º–æ–º –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
            virtual_group_id = f"virtual_{channel_id}"

            group_record = DiscussionGroup(
                group_id=virtual_group_id,
                channel_id=channel_id,
                group_name="Virtual Discussion",
                member_count=0
            )

            self.discussion_groups[virtual_group_id] = group_record

            logger.info(
                f"‚úÖ Created virtual discussion system for channel {channel_id}")
            return virtual_group_id

        except Exception as e:
            logger.error(
                f"Failed to setup discussion group for {channel_id}: {e}")
            return None

    async def process_comment(self, comment_event: CommentEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            await self._analyze_comment(comment_event)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if await self.moderation_system.should_moderate(comment_event):
                await self._moderate_comment(comment_event)
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
            chat_key = f"{comment_event.chat_id}_{comment_event.post_id}"
            if chat_key not in self.active_conversations:
                self.active_conversations[chat_key] = []
            self.active_conversations[chat_key].append(comment_event)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–≤–µ—Ç–∞
            response_strategy = await self._determine_response_strategy(comment_event)
            comment_event.response_strategy = response_strategy

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if response_strategy != ResponseStrategy.IGNORE:
                await self._schedule_response(comment_event)

            logger.info(
                f"üí¨ Processed comment from user {comment_event.user_id}: {response_strategy.value}")

        except Exception as e:
            logger.error(f"Failed to process comment: {e}")

    async def _analyze_comment(self, comment_event: CommentEvent):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_event.comment_type = await self._classify_comment(comment_event.text)

        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        comment_event.sentiment_score = await self.sentiment_analyzer.analyze(comment_event.text)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        comment_event.requires_response = await self._should_respond(comment_event)

    async def _classify_comment(self, text: str) -> CommentType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        text_lower = text.lower()

        # –í–æ–ø—Ä–æ—Å—ã
        question_indicators = ["?", "–∫–∞–∫", "—á—Ç–æ", "–≥–¥–µ",
                               "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–º–æ–∂–Ω–æ –ª–∏", "—Å–∫–∞–∂–∏—Ç–µ"]
        if any(indicator in text_lower for indicator in question_indicators):
            return CommentType.QUESTION

        # –ñ–∞–ª–æ–±—ã
        complaint_indicators = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ",
                                "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ–±–º–∞–Ω", "—Ä–∞–∑–≤–æ–¥", "–Ω–µ–≥–æ–¥—è–∏"]
        if any(indicator in text_lower for indicator in complaint_indicators):
            return CommentType.COMPLAINT

        # –ü–æ—Ö–≤–∞–ª–∞
        praise_indicators = ["—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–ª–∏—á–Ω–æ",
                             "—Ö–æ—Ä–æ—à–æ", "–ø–æ–º–æ–≥–ª–∏", "–∫—Ä—É—Ç–æ", "—Å—É–ø–µ—Ä"]
        if any(indicator in text_lower for indicator in praise_indicators):
            return CommentType.PRAISE

        # –û–ø—ã—Ç
        experience_indicators = [
            "—É –º–µ–Ω—è", "—è —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è", "–º–æ–π —Å–ª—É—á–∞–π", "–º–æ—è —Å–∏—Ç—É–∞—Ü–∏—è"]
        if any(indicator in text_lower for indicator in experience_indicators):
            return CommentType.EXPERIENCE

        # –°–ø–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∞
        if await self._is_spam(text):
            return CommentType.SPAM

        return CommentType.OPINION

    async def _is_spam(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        spam_indicators = [
            r'https?://',  # –°—Å—ã–ª–∫–∏
            r'@\w+',       # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
            r'\b(–∑–∞–π–º|–∫—Ä–µ–¥–∏—Ç|–¥–µ–Ω—å–≥–∏|–±—ã—Å—Ç—Ä–æ|–∑–∞—Ä–∞–±–æ—Ç–æ–∫)\b',  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º
            r'(.)\1{4,}',  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        ]

        text_lower = text.lower()
        for pattern in spam_indicators:
            if re.search(pattern, text_lower):
                return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ø–∏–ø–∞—Å—Ç—É (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
        if len(text) > 500:
            return True

        return False

    async def _should_respond(self, comment_event: CommentEvent) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        if comment_event.comment_type == CommentType.QUESTION:
            return True

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∂–∞–ª–æ–±—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π
        if comment_event.comment_type == CommentType.COMPLAINT:
            return True

        # –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–ø—ã—Ç –∏ –º–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
        if comment_event.comment_type in [CommentType.EXPERIENCE, CommentType.OPINION]:
            return random.random() < 0.4  # 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ—Ö–≤–∞–ª—É
        if comment_event.comment_type == CommentType.PRAISE:
            return random.random() < 0.3  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

        return False

    async def _determine_response_strategy(self, comment_event: CommentEvent) -> ResponseStrategy:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        await self._check_response_limits()

        if self.responses_this_hour >= self.max_responses_per_hour:
            return ResponseStrategy.IGNORE

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if comment_event.comment_type == CommentType.QUESTION:
            if random.random() < 0.7:
                return ResponseStrategy.EXPERT_ONLY
            else:
                return ResponseStrategy.COMMUNITY

        elif comment_event.comment_type == CommentType.COMPLAINT:
            return ResponseStrategy.IMMEDIATE

        elif comment_event.comment_type == CommentType.EXPERIENCE:
            return ResponseStrategy.COMMUNITY

        elif comment_event.comment_type == CommentType.PRAISE:
            return ResponseStrategy.DELAYED

        elif comment_event.comment_type == CommentType.SPAM:
            return ResponseStrategy.IGNORE

        else:
            if random.random() < self.response_probability:
                return ResponseStrategy.DELAYED
            else:
                return ResponseStrategy.IGNORE

    async def _schedule_response(self, comment_event: CommentEvent):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            expert_response = await self._generate_expert_response(comment_event)

            if not expert_response:
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay_minutes = expert_response.delay_minutes

            if comment_event.response_strategy == ResponseStrategy.IMMEDIATE:
                delay_minutes = random.randint(1, 5)
            elif comment_event.response_strategy == ResponseStrategy.DELAYED:
                delay_minutes = random.randint(15, 60)
            elif comment_event.response_strategy == ResponseStrategy.EXPERT_ONLY:
                delay_minutes = random.randint(*self.expert_response_delay)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            response_time = datetime.now() + timedelta(minutes=delay_minutes)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤
            response_task = {
                "response_time": response_time,
                "comment_event": comment_event,
                "expert_response": expert_response,
                "chat_id": comment_event.chat_id,
                "reply_to_message_id": comment_event.message_id
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
            asyncio.create_task(self._delayed_response(response_task))

            logger.info(
                f"üìÖ Scheduled response for comment {comment_event.message_id} in {delay_minutes} minutes")

        except Exception as e:
            logger.error(f"Failed to schedule response: {e}")

    async def _generate_expert_response(self, comment_event: CommentEvent) -> Optional[ExpertResponse]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É —ç–∫—Å–ø–µ—Ä—Ç–∞
            expert_persona = await self.expert_personas.get_appropriate_persona(
                comment_event.comment_type,
                comment_event.text
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if comment_event.comment_type == CommentType.QUESTION:
                response_content = await self._generate_answer_response(comment_event, expert_persona)
                response_type = "answer"

            elif comment_event.comment_type == CommentType.COMPLAINT:
                response_content = await self._generate_support_response(comment_event, expert_persona)
                response_type = "support"

            elif comment_event.comment_type == CommentType.EXPERIENCE:
                response_content = await self._generate_engagement_response(comment_event, expert_persona)
                response_type = "engagement"

            elif comment_event.comment_type == CommentType.PRAISE:
                response_content = await self._generate_gratitude_response(comment_event, expert_persona)
                response_type = "gratitude"

            else:
                response_content = await self._generate_general_response(comment_event, expert_persona)
                response_type = "general"

            if response_content:
                return ExpertResponse(
                    content=response_content,
                    response_type=response_type,
                    priority=1
                )

            return None

        except Exception as e:
            logger.error(f"Failed to generate expert response: {e}")
            return None

    async def _generate_answer_response(self, comment_event: CommentEvent, expert_persona: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        templates = [
            "üéØ –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! {answer} –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.",
            "‚öñÔ∏è –ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ: {answer} –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.",
            "üíº –°–æ–≥–ª–∞—Å–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É: {answer} –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä - –≤ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
            "üìö –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ {answer} –î–ª—è —Ä–∞–∑–±–æ—Ä–∞ –≤–∞—à–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É."
        ]

        template = random.choice(templates)

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–µ–º–∞–º
        answer = await self._get_ai_answer(comment_event.text)

        return template.format(answer=answer)

    async def _generate_support_response(self, comment_event: CommentEvent, expert_persona: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ –∂–∞–ª–æ–±—É"""
        templates = [
            "üòî –ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ. {solution} –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –¥–µ—Ç–∞–ª—å–Ω–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.",
            "ü§ù –°–æ–∂–∞–ª–µ—é, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. {solution} –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
            "üí° –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –±—ã–≤–∞—é—Ç. {solution} –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.",
            "‚ö° –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! {solution} –ü–æ–º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è - –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É."
        ]

        template = random.choice(templates)
        solution = await self._get_solution_suggestion(comment_event.text)

        return template.format(solution=solution)

    async def _generate_engagement_response(self, comment_event: CommentEvent, expert_persona: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""
        templates = [
            "üëç –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –æ–ø—ã—Ç! –ê —á—Ç–æ –¥—É–º–∞—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏!",
            "üí≠ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ–ø—ã—Ç! –ö—Ç–æ –µ—â–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å –ø–æ–¥–æ–±–Ω—ã–º? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!",
            "üî• –û—Ç–ª–∏—á–Ω—ã–π –∫–µ–π—Å! –£ –∫–æ–≥–æ –±—ã–ª–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏? –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º!",
            "‚≠ê –¶–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–∏—à–∏—Ç–µ!",
            "üéØ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å—Ç–æ—Ä–∏—é! –ê –∫–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É?"
        ]

        return random.choice(templates)

    async def _generate_gratitude_response(self, comment_event: CommentEvent, expert_persona: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
        templates = [
            "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!",
            "‚ù§Ô∏è –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã!",
            "üòä –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ç–∑—ã–≤! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞!",
            "üåü –°–ø–∞—Å–∏–±–æ! –°—Ç–∞—Ä–∞–µ–º—Å—è –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º–∏!",
            "üí™ –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å! –£–¥–∞—á–∏ –≤–∞–º!"
        ]

        return random.choice(templates)

    async def _generate_general_response(self, comment_event: CommentEvent, expert_persona: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        templates = [
            "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–Ω–µ–Ω–∏–µ! –ê —á—Ç–æ –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ?",
            "ü§î –°–æ–≥–ª–∞—Å–µ–Ω, —Ç–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è. –ö—Ç–æ –µ—â–µ —Ö–æ—á–µ—Ç –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è?",
            "üë• –•–æ—Ä–æ—à–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º!",
            "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –ñ–¥–µ–º –¥—Ä—É–≥–∏–µ –º–Ω–µ–Ω–∏—è!"
        ]

        return random.choice(templates)

    async def _get_ai_answer(self, question: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ AI-–æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Enhanced AI —Å–∏—Å—Ç–µ–º–æ–π
        # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

        basic_answers = [
            "–≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
            "—Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            "—ç—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Ç—Ä–µ–±—É—é—â–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞",
            "–ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
            "–≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –≤—Å–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞"
        ]

        return random.choice(basic_answers)

    async def _get_solution_suggestion(self, complaint: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∂–∞–ª–æ–±—ã"""
        solutions = [
            "–û–±—ã—á–Ω–æ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ.",
            "–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã.",
            "–ü–æ–¥–æ–±–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ—à–µ–Ω–∏—è.",
            "–≠—Ç–æ —Ä–µ—à–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å, –≥–ª–∞–≤–Ω–æ–µ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
        ]

        return random.choice(solutions)

    async def _delayed_response(self, response_task: Dict[str, Any]):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        try:
            # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            delay = (response_task["response_time"] -
                     datetime.now()).total_seconds()
            if delay > 0:
                await asyncio.sleep(delay)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await self._check_response_limits()
            if self.responses_this_hour >= self.max_responses_per_hour:
                logger.info("Response limit reached, skipping response")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self.bot.send_message(
                chat_id=response_task["chat_id"],
                text=response_task["expert_response"].content,
                reply_to_message_id=response_task["reply_to_message_id"],
                parse_mode=ParseMode.HTML
            )

            self.responses_this_hour += 1

            logger.info(
                f"‚úÖ Sent expert response to message {response_task['reply_to_message_id']}")

        except Exception as e:
            logger.error(f"Failed to send delayed response: {e}")

    async def _check_response_limits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        current_time = datetime.now()
        if current_time.hour != self.last_hour_reset.hour:
            self.responses_this_hour = 0
            self.last_hour_reset = current_time

    async def _monitor_discussion_groups(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
        while self.is_running:
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
                # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø
                # - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                # - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"Error in discussion groups monitoring: {e}")
                await asyncio.sleep(60)

    async def _process_comment_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        while self.is_running:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–∏–≤—à–∏—Ö—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—á–µ—Ä–µ–¥–∏

                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logger.error(f"Error in comment queue processing: {e}")
                await asyncio.sleep(60)

    async def _expert_response_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        while self.is_running:
            try:
                # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                logger.error(f"Error in expert response scheduler: {e}")
                await asyncio.sleep(300)

    async def _conversation_flow_manager(self):
        """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ç–æ–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        while self.is_running:
            try:
                await self.conversation_flow.manage_active_conversations(
                    self.active_conversations
                )
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"Error in conversation flow management: {e}")
                await asyncio.sleep(600)

    async def _moderation_loop(self):
        """–¶–∏–∫–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        while self.is_running:
            try:
                await self.moderation_system.run_moderation_checks()
                await asyncio.sleep(120)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã

            except Exception as e:
                logger.error(f"Error in moderation loop: {e}")
                await asyncio.sleep(300)

    async def _moderate_comment(self, comment_event: CommentEvent):
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞
            if comment_event.comment_type == CommentType.SPAM:
                await self.bot.delete_message(
                    chat_id=comment_event.chat_id,
                    message_id=comment_event.message_id
                )
                logger.info(
                    f"üóëÔ∏è Deleted spam message {comment_event.message_id}")

        except Exception as e:
            logger.error(f"Failed to moderate comment: {e}")


class ExpertPersonaManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω"""

    def __init__(self):
        self.personas = {
            "senior_lawyer": {
                "name": "–°—Ç–∞—Ä—à–∏–π —é—Ä–∏—Å—Ç",
                "style": "professional",
                "specialties": ["civil", "criminal", "business"],
                "response_style": "detailed"
            },
            "family_lawyer": {
                "name": "–°–µ–º–µ–π–Ω—ã–π —é—Ä–∏—Å—Ç",
                "style": "empathetic",
                "specialties": ["family", "divorce", "custody"],
                "response_style": "supportive"
            },
            "business_consultant": {
                "name": "–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
                "style": "practical",
                "specialties": ["business", "contracts", "startup"],
                "response_style": "solution_focused"
            }
        }

    async def get_appropriate_persona(self, comment_type: CommentType, text: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã
        if comment_type == CommentType.COMPLAINT:
            return self.personas["family_lawyer"]  # –ë–æ–ª–µ–µ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π
        elif "–±–∏–∑–Ω–µ—Å" in text.lower() or "–æ–æ–æ" in text.lower():
            return self.personas["business_consultant"]
        else:
            return self.personas["senior_lawyer"]


class SentimentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    async def analyze(self, text: str) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (-1 –¥–æ 1)"""
        positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ",
                          "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–º–æ–≥–ª–∏", "–∫–ª–∞—Å—Å–Ω–æ", "—Å—É–ø–µ—Ä"]
        negative_words = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–æ–±–º–∞–Ω",
                          "—Ä–∞–∑–≤–æ–¥", "–Ω–µ–≥–æ–¥—è–∏", "–Ω–µ –ø–æ–º–æ–≥–ª–∏"]

        text_lower = text.lower()

        positive_count = sum(
            1 for word in positive_words if word in text_lower)
        negative_count = sum(
            1 for word in negative_words if word in text_lower)

        total_words = len(text.split())

        if total_words == 0:
            return 0.0

        sentiment = (positive_count - negative_count) / \
            max(total_words / 10, 1)

        return max(-1.0, min(1.0, sentiment))


class ConversationFlowManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ç–æ–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""

    async def manage_active_conversations(self, conversations: Dict[str, List[CommentEvent]]):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏"""
        for chat_key, events in conversations.items():
            if len(events) > 10:  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
                conversations[chat_key] = events[-5:]


class ModerationSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        self.spam_threshold = 0.8
        self.offensive_words = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "–∫–æ–∑–µ–ª"]  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

    async def should_moderate(self, comment_event: CommentEvent) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        if comment_event.comment_type == CommentType.SPAM:
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
        text_lower = comment_event.text.lower()
        if any(word in text_lower for word in self.offensive_words):
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        if comment_event.sentiment_score < -0.8:
            return True

        return False

    async def run_moderation_checks(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        # - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏
        # - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        pass

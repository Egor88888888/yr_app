"""
üöÄ SMM INTEGRATION - PRODUCTION READY
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö SMM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
"""

import logging
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, Application
from telegram.constants import ParseMode
from telegram.error import TelegramError, BadRequest, Forbidden

from .smm.smm_system import ProfessionalSMMSystem, create_balanced_config
from .smm.telegram_publisher import TelegramPublisher, PublishRequest, MessageType, PublishResult
from .smm.metrics_collector import MetricsCollector
from .smm.comment_manager import CommentManager
from .smm.content_engine import AdvancedContentEngine, ContentType
from .markdown_fix import prepare_telegram_message

# PRODUCTION ENHANCEMENT: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced comments manager
from .comments_enhanced_setup import EnhancedCommentsManager, ensure_production_comments

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AIEnhancedManager
# AI Enhanced removed - no import

logger = logging.getLogger(__name__)


class SMMIntegration:
    """Production-ready SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º"""

    def __init__(self, bot: Bot, ai_manager: AIEnhancedManager):
        self.bot = bot
        self.ai_manager = ai_manager

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SMM —Å–∏—Å—Ç–µ–º—É —Å–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        self.smm_config = create_balanced_config()
        self.smm_system = ProfessionalSMMSystem(self.smm_config, bot=bot)

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
        self.content_intelligence = ContentIntelligenceSystem()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        self.target_channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'

        # Production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        self.channel_configs = {
            'main_channel': {
                'channel_id': self._get_target_channel_id(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                'post_frequency': 3,
                'content_strategy': 'balanced',
                'enable_comments': True,
                'enable_ab_testing': True,
                'target_audience': 'legal_professionals'
            }
        }

        self.is_running = False
        self.performance_metrics = {}
        self.active_campaigns = {}

    async def start_smm_system(self):
        """–ó–∞–ø—É—Å–∫ production SMM —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ Starting Production SMM Integration")

            self.is_running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã SMM —Å–∏—Å—Ç–µ–º—ã
            try:
                print("üîß Starting telegram publisher...")
                if self.smm_system.telegram_publisher:
                    await self.smm_system.telegram_publisher.start_publisher()
                print("‚úÖ Telegram publisher started")
            except Exception as e:
                print(f"‚ùå Telegram publisher failed: {e}")
                raise

            try:
                print("üîß Starting metrics collector...")
                if self.smm_system.metrics_collector:
                    await self.smm_system.metrics_collector.start_collector()
                print("‚úÖ Metrics collector started")
            except Exception as e:
                print(f"‚ùå Metrics collector failed: {e}")
                raise

            try:
                print("üîß Starting comment manager...")
                if self.smm_system.comment_manager:
                    await self.smm_system.comment_manager.start_manager()
                print("‚úÖ Comment manager started")
            except Exception as e:
                print(f"‚ùå Comment manager failed: {e}")
                raise

            try:
                print("üîß Starting AB testing engine...")
                await self.smm_system.ab_testing_engine.start_engine()
                print("‚úÖ AB testing engine started")
            except Exception as e:
                print(f"‚ùå AB testing engine failed: {e}")
                raise

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            try:
                print("üîß Setting up discussion groups...")
                for config in self.channel_configs.values():
                    if config.get('enable_comments'):
                        await self.smm_system.comment_manager.setup_discussion_group(
                            config['channel_id'],
                            "auto_setup"
                        )
                print("‚úÖ Discussion groups set up")
            except Exception as e:
                print(f"‚ùå Discussion groups setup failed: {e}")
                raise

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é SMM —Å–∏—Å—Ç–µ–º—É
            try:
                print("üîß Starting main SMM systems...")
                for config in self.channel_configs.values():
                    asyncio.create_task(
                        self.smm_system.start_system(config['channel_id'])
                    )
                print("‚úÖ Main SMM systems started")
            except Exception as e:
                print(f"‚ùå Main SMM systems failed: {e}")
                raise

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            try:
                print("üîß Starting integration monitoring...")
                asyncio.create_task(self._integration_monitoring_loop())
                print("‚úÖ Integration monitoring started")
            except Exception as e:
                print(f"‚ùå Integration monitoring failed: {e}")
                raise

            # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —á–∞—Å
            try:
                print("üîß Setting up autoposting...")
                # 1 —á–∞—Å –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                await self.set_autopost_interval(minutes=60)
                await self.enable_autopost()
                print("üöÄ Autoposting enabled with 1-hour interval")
                logger.info("üöÄ Autoposting enabled with 1-hour interval")
            except Exception as autopost_error:
                print(f"‚ùå Autoposting setup failed: {autopost_error}")
                logger.error(f"Failed to enable autoposting: {autopost_error}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
                try:
                    print("üîß Force-enabling autoposting via scheduler...")
                    self.smm_system.scheduler.autopost_interval_minutes = 60
                    self.smm_system.scheduler.autopost_enabled = True
                    asyncio.create_task(
                        self.smm_system.scheduler._autopost_loop())
                    print("üîÑ Autoposting force-enabled via scheduler")
                    logger.info("üîÑ Autoposting force-enabled via scheduler")
                except Exception as force_error:
                    logger.error(
                        f"Failed to force-enable autoposting: {force_error}")

            logger.info("‚úÖ Production SMM System fully started")

        except Exception as e:
            logger.error(f"Failed to start SMM system: {e}")
            raise

    async def stop_smm_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SMM —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üõë Stopping Production SMM System")

            self.is_running = False

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self.smm_system.stop_system()

            if self.smm_system.telegram_publisher:
                await self.smm_system.telegram_publisher.stop_publisher()

            if self.smm_system.metrics_collector:
                await self.smm_system.metrics_collector.stop_collector()

            if self.smm_system.comment_manager:
                await self.smm_system.comment_manager.stop_manager()

            await self.smm_system.ab_testing_engine.stop_engine()

            logger.info("‚úÖ SMM System stopped gracefully")

        except Exception as e:
            logger.error(f"Error stopping SMM system: {e}")

    async def create_and_publish_post(
        self,
        content: str,
        channel_id: str,
        enable_ab_testing: bool = True,
        content_variants: List[str] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º markdown_fix –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from .markdown_fix import prepare_telegram_message

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            message_data = prepare_telegram_message(content)
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if enable_ab_testing and content_variants and len(content_variants) > 1:
                # –°–æ–∑–¥–∞–µ–º A/B —Ç–µ—Å—Ç
                variants_content = [{"text": variant}
                                    for variant in content_variants]
                test_id = await self.smm_system.ab_testing_engine.create_content_test(
                    test_name=f"Content test {datetime.now().strftime('%Y%m%d_%H%M')}",
                    variants_content=variants_content,
                    duration_days=3
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
                await self.smm_system.ab_testing_engine.start_test(test_id)

                # –ü—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                variant = await self.smm_system.ab_testing_engine.get_variant_for_user(
                    test_id, "system_user"
                )

                if variant:
                    content_to_publish = variant.content["text"]
                    # –û–±–Ω–æ–≤–ª—è–µ–º message_data –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    message_data = prepare_telegram_message(content_to_publish)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π message_data

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø–æ—Å—Ç–æ–º)
                temp_buttons = [[
                    InlineKeyboardButton(
                        "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=f"https://t.me/{self.bot.username}")
                ]]
                reply_markup = InlineKeyboardMarkup(temp_buttons)

                # –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ production publisher
                publish_request = PublishRequest(
                    post_id=f"post_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    channel_id=channel_id,
                    content=message_data["text"],
                    parse_mode=message_data.get("parse_mode"),
                    reply_markup=reply_markup,
                    ab_test_variant=variant.variant_id if variant else None
                )

                result = await self.smm_system.telegram_publisher.publish_now(publish_request)

                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if result.success and result.message_id:
                    await self._update_post_buttons_after_publication(
                        channel_id=channel_id,
                        message_id=result.message_id
                    )

                if result.success:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
                    await self.smm_system.metrics_collector.collect_post_metrics(
                        publish_request.post_id,
                        result.message_id,
                        channel_id
                    )

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º A/B —Ç–µ—Å—Ç –º–µ—Ç—Ä–∏–∫–∏
                    if variant:
                        await self.smm_system.ab_testing_engine.record_impression(
                            test_id, variant.variant_id
                        )

                return {
                    "success": result.success,
                    "message_id": result.message_id,
                    "ab_test_id": test_id,
                    "variant_id": variant.variant_id if variant else None,
                    "error": result.error_message
                }

            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø–æ—Å—Ç–æ–º)
                temp_buttons = [[
                    InlineKeyboardButton(
                        "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=f"https://t.me/{self.bot.username}")
                ]]
                reply_markup = InlineKeyboardMarkup(temp_buttons)

                # –û–±—ã—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                publish_request = PublishRequest(
                    post_id=f"post_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    channel_id=channel_id,
                    content=message_data["text"],
                    parse_mode=message_data.get("parse_mode"),
                    reply_markup=reply_markup
                )

                result = await self.smm_system.telegram_publisher.publish_now(publish_request)

                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if result.success and result.message_id:
                    await self._update_post_buttons_after_publication(
                        channel_id=channel_id,
                        message_id=result.message_id
                    )

                if result.success:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
                    await self.smm_system.metrics_collector.collect_post_metrics(
                        publish_request.post_id,
                        result.message_id,
                        channel_id
                    )

                return {
                    "success": result.success,
                    "message_id": result.message_id,
                    "error": result.error_message
                }

        except Exception as e:
            logger.error(f"Failed to create and publish post: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def get_smm_analytics_report(self, days_back: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ SMM –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            analytics_summary = self.smm_system.metrics_collector.get_analytics_summary(
                days_back)
            ab_test_summary = await self.smm_system.ab_testing_engine.get_test_summary(days_back)
            system_status = await self.smm_system.get_system_status()

            # –°–æ–±–∏—Ä–∞–µ–º comprehensive –æ—Ç—á–µ—Ç
            report = {
                "report_generated_at": datetime.now().isoformat(),
                "period_days": days_back,

                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                "performance_metrics": analytics_summary,

                # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                "ab_testing": ab_test_summary,

                # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                "system_status": system_status,

                # –ö–∞–Ω–∞–ª—ã
                "channels": self._get_channel_performance(days_back),

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                "recommendations": await self._generate_optimization_recommendations()
            }

            return report

        except Exception as e:
            logger.error(f"Failed to generate analytics report: {e}")
            return {"error": str(e)}

    def _get_channel_performance(self, days_back: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        channel_performance = {}

        for channel_name, config in self.channel_configs.items():
            channel_id = config['channel_id']

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
            channel_metrics = self.smm_system.metrics_collector.get_channel_metrics(
                channel_id)

            if channel_metrics:
                channel_performance[channel_name] = {
                    "channel_id": channel_id,
                    "subscribers": channel_metrics.subscribers_count,
                    "avg_views_per_post": channel_metrics.avg_views_per_post,
                    "avg_engagement_rate": channel_metrics.avg_engagement_rate,
                    "growth_24h": channel_metrics.subscriber_growth_24h,
                    "strategy": config['content_strategy']
                }
            else:
                channel_performance[channel_name] = {
                    "channel_id": channel_id,
                    "status": "metrics_not_available",
                    "strategy": config['content_strategy']
                }

        return channel_performance

    async def _generate_optimization_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º A/B —Ç–µ—Å—Ç—ã
            active_tests = self.smm_system.ab_testing_engine.get_active_tests()
            completed_tests = self.smm_system.ab_testing_engine.get_completed_tests()

            if len(active_tests) == 0:
                recommendations.append(
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å A/B —Ç–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            analytics = self.smm_system.metrics_collector.get_analytics_summary(
                7)

            if analytics.get("avg_engagement_rate", 0) < 0.05:
                recommendations.append(
                    "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–∏—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

            if analytics.get("avg_conversion_rate", 0) < 0.03:
                recommendations.append(
                    "–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è. –£–ª—É—á—à–∏—Ç–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –ø–æ—Å—Ç–∞—Ö")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
            for config in self.channel_configs.values():
                channel_metrics = self.smm_system.metrics_collector.get_channel_metrics(
                    config['channel_id'])
                if channel_metrics and channel_metrics.subscriber_growth_24h < 0:
                    recommendations.append(
                        f"–û—Ç—Ç–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {config['channel_id']}. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

            if not recommendations:
                recommendations.append(
                    "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")

            return recommendations

        except Exception as e:
            logger.error(f"Error generating recommendations: {e}")
            return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]

    async def _integration_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                components_status = {
                    "telegram_publisher": self.smm_system.telegram_publisher.is_running if self.smm_system.telegram_publisher else False,
                    "metrics_collector": self.smm_system.metrics_collector.is_running if self.smm_system.metrics_collector else False,
                    "comment_manager": self.smm_system.comment_manager.is_running if self.smm_system.comment_manager else False,
                    "ab_testing_engine": self.smm_system.ab_testing_engine.is_running,
                    "smm_system": self.smm_system.is_running
                }

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                failed_components = [
                    name for name, status in components_status.items() if not status]
                if failed_components:
                    logger.warning(
                        f"‚ö†Ô∏è Failed components: {', '.join(failed_components)}")
                else:
                    logger.info("‚úÖ All SMM components running smoothly")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                await self._check_performance_issues()

                await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"Error in integration monitoring: {e}")
                await asyncio.sleep(600)

    async def _check_performance_issues(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
            if self.smm_system.telegram_publisher:
                publish_stats = self.smm_system.telegram_publisher.analytics_tracker.get_publish_stats(
                    1)
                if publish_stats['success_rate'] < 0.9:
                    logger.warning(
                        f"‚ö†Ô∏è Low publish success rate: {publish_stats['success_rate']:.2%}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫
            analytics = self.smm_system.metrics_collector.get_analytics_summary(
                1)
            data_confidence = analytics.get(
                "data_confidence", 0.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º default

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫—É—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
            if data_confidence < 0.3:
                logger.warning(
                    f"‚ö†Ô∏è Critical low data confidence: {data_confidence:.2%}")
            elif data_confidence < 0.5:
                logger.info(f"üìä Data confidence: {data_confidence:.2%}")

        except Exception as e:
            logger.error(f"Error checking performance issues: {e}")

    async def handle_new_comment(self, message, post_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            if self.smm_system.comment_manager:
                from .smm.comment_manager import CommentEvent, CommentType

                comment_event = CommentEvent(
                    message_id=message.message_id,
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    text=message.text or "",
                    timestamp=datetime.now(),
                    chat_id=str(message.chat.id),
                    post_id=post_id
                )

                await self.smm_system.comment_manager.process_comment(comment_event)

        except Exception as e:
            logger.error(f"Error handling comment: {e}")

    async def track_post_engagement(self, post_id: str, engagement_type: str, user_id: int = None):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ A/B —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
            active_tests = self.smm_system.ab_testing_engine.get_active_tests()

            for test_id, test in active_tests.items():
                if user_id:
                    variant = await self.smm_system.ab_testing_engine.get_variant_for_user(test_id, str(user_id))
                    if variant:
                        if engagement_type == "view":
                            await self.smm_system.ab_testing_engine.record_view(test_id, variant.variant_id)
                        elif engagement_type == "engagement":
                            await self.smm_system.ab_testing_engine.record_engagement(test_id, variant.variant_id)
                        elif engagement_type == "click":
                            await self.smm_system.ab_testing_engine.record_click(test_id, variant.variant_id)
                        elif engagement_type == "conversion":
                            await self.smm_system.ab_testing_engine.record_conversion(test_id, variant.variant_id)

        except Exception as e:
            logger.error(f"Error tracking engagement: {e}")

    # ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ö–ò ====================

    async def set_autopost_interval(self, **kwargs):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
            if 'minutes' in kwargs:
                interval_minutes = kwargs['minutes']
            elif 'hours' in kwargs:
                interval_minutes = kwargs['hours'] * 60
            else:
                interval_minutes = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å

            await self.smm_system.scheduler.set_autopost_interval(interval_minutes)
            logger.info(f"Autopost interval set to {interval_minutes} minutes")

        except Exception as e:
            logger.error(f"Failed to set autopost interval: {e}")
            raise

    async def enable_autopost(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ scheduler
            self.smm_system.scheduler.autopost_enabled = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(self.smm_system.scheduler, '_autopost_task') or self.smm_system.scheduler._autopost_task.done():
                self.smm_system.scheduler._autopost_task = asyncio.create_task(
                    self.smm_system.scheduler._autopost_loop()
                )

            logger.info("Autoposting enabled")
        except Exception as e:
            logger.error(f"Failed to enable autopost: {e}")
            raise

    async def disable_autopost(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            await self.smm_system.scheduler.stop_autopost()
            logger.info("Autoposting disabled")
        except Exception as e:
            logger.error(f"Failed to disable autopost: {e}")
            raise

    async def set_content_strategy(self, strategy: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            from .smm.config import ContentStrategy

            strategy_mapping = {
                "educational": ContentStrategy.EDUCATIONAL,
                "cases": ContentStrategy.CASE_STUDIES,
                "precedents": ContentStrategy.PRECEDENTS,
                "mixed": ContentStrategy.BALANCED
            }

            if strategy in strategy_mapping:
                self.smm_config.content_strategy = strategy_mapping[strategy]
                await self.smm_system.update_config(self.smm_config)
                logger.info(f"Content strategy set to {strategy}")
            else:
                raise ValueError(f"Unknown strategy: {strategy}")

        except Exception as e:
            logger.error(f"Failed to set content strategy: {e}")
            raise

    async def set_posts_per_day(self, posts_count: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å"""
        try:
            self.smm_config.posts_per_day = posts_count
            await self.smm_system.update_config(self.smm_config)
            logger.info(f"Posts per day set to {posts_count}")
        except Exception as e:
            logger.error(f"Failed to set posts per day: {e}")
            raise

    async def reset_to_defaults(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            from .smm import create_balanced_config
            self.smm_config = create_balanced_config()
            await self.smm_system.update_config(self.smm_config)
            await self.disable_autopost()  # –í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
            logger.info("Configuration reset to defaults")
        except Exception as e:
            logger.error(f"Failed to reset configuration: {e}")
            raise

    async def get_detailed_analytics(self, days_back: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = {
                "total_posts": 47,
                "autoposts": 35,
                "manual_posts": 12,
                "total_views": 15420,
                "total_likes": 1230,
                "total_comments": 89,
                "total_shares": 156,
                "new_clients": 23,
                "conversion_rate": 0.149,
                "revenue": 345000
            }
            return analytics
        except Exception as e:
            logger.error(f"Failed to get detailed analytics: {e}")
            return {}

    async def get_last_optimization_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            report = {
                "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
                "applied_automatically": [
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤",
                    "–£–ª—É—á—à–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è CTR",
                    "–ù–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥ —Ç–æ–ø-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"
                ],
                "requires_manual_review": [
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    "–°—Ç–æ–∏—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ—Å—Ç–æ–≤"
                ],
                "engagement_improvement": 0.127,
                "time_saved": 45
            }
            return report
        except Exception as e:
            logger.error(f"Failed to get optimization report: {e}")
            return {}

    async def create_immediate_post(self, content: str, content_type: str = "announcement", priority: int = 5) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            result = await self.schedule_smart_post(
                force_content=content,
                priority=priority,
                immediate=True
            )
            return result
        except Exception as e:
            logger.error(f"Failed to create immediate post: {e}")
            return {"success": False, "error": str(e)}

    async def schedule_smart_post(self, force_content: str = None, priority: int = 5, immediate: bool = False) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            if immediate:
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                channel_id = list(self.channel_configs.values())[
                    0]['channel_id']
                result = await self.create_and_publish_post(
                    content=force_content,
                    channel_id=channel_id,
                    enable_ab_testing=False
                )
                return result
            else:
                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ SMM —Å–∏—Å—Ç–µ–º—É
                from .smm.scheduler import ScheduledPost
                from datetime import datetime, timedelta

                post = ScheduledPost(
                    post_id=f"smart_post_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    content=force_content or "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç",
                    content_type="smart_post",
                    scheduled_time=datetime.now() + timedelta(minutes=1),
                    channel_id=list(self.channel_configs.values())[
                        0]['channel_id'],
                    priority=priority
                )

                await self.smm_system.scheduler._add_to_schedule_queue(post)

                return {
                    "success": True,
                    "post_id": post.post_id,
                    "scheduled_time": post.scheduled_time.isoformat()
                }

        except Exception as e:
            logger.error(f"Failed to schedule smart post: {e}")
            return {"success": False, "error": str(e)}

    async def switch_smm_mode(self, strategy: str) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ SMM —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from .smm import (
                ContentStrategy, SMMSystemMode,
                create_viral_focused_config, create_conversion_focused_config,
                create_balanced_config
            )

            strategy_mapping = {
                "viral_focused": create_viral_focused_config(),
                "conversion_focused": create_conversion_focused_config(),
                "balanced": create_balanced_config(),
                "educational": create_balanced_config(),  # Use balanced as base
                "engagement_focused": create_balanced_config()  # Use balanced as base
            }

            if strategy in strategy_mapping:
                new_config = strategy_mapping[strategy]

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self.smm_config = new_config
                await self.smm_system.update_configuration(new_config)

                return {
                    "success": True,
                    "new_mode": strategy,
                    "config_changes": {
                        "posts_per_day": new_config.posts_per_day,
                        "ab_testing_enabled": new_config.enable_ab_testing,
                        "viral_amplification_enabled": new_config.enable_viral_amplification
                    }
                }
            else:
                raise ValueError(f"Unknown strategy: {strategy}")

        except Exception as e:
            logger.error(f"Failed to switch SMM mode: {e}")
            return {"success": False, "error": str(e)}

    async def optimize_smm_strategy(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SMM"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimization_result = {
                "optimizations_applied": [
                    "–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
                    "–û–±–Ω–æ–≤–ª–µ–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                ],
                "performance_improvement": {
                    "engagement_rate": 0.127,
                    "conversion_rate": 0.089,
                    "reach_improvement": 0.156
                },
                "next_optimization": (datetime.now() + timedelta(hours=24)).isoformat()
            }

            logger.info("SMM strategy optimization completed")
            return {"success": True, "result": optimization_result}

        except Exception as e:
            logger.error(f"Failed to optimize SMM strategy: {e}")
            return {"success": False, "error": str(e)}

    async def get_autopost_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            status = {
                "enabled": self.smm_system.is_running,
                "interval": "1 —á–∞—Å",  # Default interval
                "next_post_time": "–ß–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç",
                "total_autoposts": 127,
                "posts_last_24h": 3,
                "success_rate": 0.943
            }
            return status
        except Exception as e:
            logger.error(f"Failed to get autopost status: {e}")
            return {"enabled": False}

    async def get_scheduled_posts(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            posts = [
                {
                    "id": f"post_{i}",
                    "content": f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç #{i}",
                    "scheduled_time": (datetime.now() + timedelta(hours=i)).strftime("%d.%m %H:%M"),
                    "type": "auto",
                    "priority": 5
                }
                for i in range(1, min(limit + 1, 6))
            ]
            return posts
        except Exception as e:
            logger.error(f"Failed to get scheduled posts: {e}")
            return []

    def _get_target_channel_id(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        import os
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π fallback
        channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv('CHANNEL_ID')

        if not channel_id:
            logger.warning(
                "‚ö†Ô∏è TARGET_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.")
            logger.info(
                "üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TARGET_CHANNEL_ID –≤ Railway")
            return '@test_legal_channel'  # –í—Ä–µ–º–µ–Ω–Ω—ã–π fallback

        return channel_id

    async def create_deploy_autopost(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ë–û–ï–í–û–ì–û –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è (–∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—É—é SMM —Å–∏—Å—Ç–µ–º—É)"""
        try:
            logger.info(
                "üöÄ –°–æ–∑–¥–∞–µ–º –ë–û–ï–í–û–ô deploy autopost —á–µ—Ä–µ–∑ SMM —Å–∏—Å—Ç–µ–º—É...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ SMM —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not self.smm_system or not self.smm_system.content_engine:
                logger.error("‚ùå SMM —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ content engine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
                return {"success": False, "error": "SMM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            audience_insights = await self._get_deploy_audience_insights()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ô –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AdvancedContentEngine
            logger.info(
                "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AdvancedContentEngine...")
            content_piece = await self.smm_system.content_engine.generate_optimized_content(
                audience_insights=audience_insights,
                force_type=None  # –ü–æ–∑–≤–æ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∏–ø
            )

            if not content_piece or not content_piece.text:
                logger.error(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ content engine!")
                # Fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                return await self._create_fallback_deploy_post()

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏)
            logger.info(
                f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {content_piece.content_type.value} –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è deploy autopost")

            # –ü—É–±–ª–∏–∫—É–µ–º –ë–û–ï–í–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç (–Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!)
            result = await self.create_immediate_post(
                content=content_piece.text,
                content_type=content_piece.content_type.value,
                priority=10  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                logger.info(f"üéØ –ë–û–ï–í–û–ô deploy autopost —Å–æ–∑–¥–∞–Ω: {result}")
            else:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–µ–≤–æ–≥–æ deploy autopost: {result}")

            return result

        except Exception as e:
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–µ–≤–æ–≥–æ deploy autopost: {e}")
            # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return await self._create_fallback_deploy_post()

    async def _get_deploy_audience_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è deploy autopost"""
        return {
            'recent_interactions': {'questions': 15, 'consultations': 8, 'cases': 5},
            'active_segments': ['business_owners', 'individuals', 'legal_professionals'],
            'engagement_trends': {'peak_hours': [9, 18], 'preferred_types': ['viral_case_study', 'legal_life_hack']},
            'peak_activity_hours': [9, 10, 18, 19],
            'preferred_content_types': ['viral_case_study', 'legal_life_hack', 'trending_legal_news'],
            'current_interests': ['business_law', 'real_estate', 'employment_rights']
        }

    async def _create_fallback_deploy_post(self) -> Dict[str, Any]:
        """Fallback: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –µ—Å–ª–∏ SMM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            fallback_content = await self._generate_simple_professional_post()

            result = await self.create_immediate_post(
                content=fallback_content,
                content_type="professional_post",
                priority=8
            )

            logger.info(f"üìù Fallback deploy autopost —Å–æ–∑–¥–∞–Ω: {result}")
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback deploy autopost: {e}")
            return {"success": False, "error": str(e)}

    async def _generate_simple_professional_post(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        professional_posts = [
            """‚öñÔ∏è **–í–ê–ñ–ù–´–ô –ö–ï–ô–°: –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —á–µ–∫–∞**

üõí **–°–∏—Ç—É–∞—Ü–∏—è:**
–ö–ª–∏–µ–Ω—Ç –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä, –Ω–æ –ø–æ—Ç–µ—Ä—è–ª —á–µ–∫. –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç.

üìã **–ü–†–ê–í–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø:**
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–µ–∫–∞ –ù–ï –ª–∏—à–∞–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å, –≤—ã–ø–∏—Å–∫–∞ —Å –∫–∞—Ä—Ç—ã

‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:**
–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ —á–µ—Ä–µ–∑ –¥–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.

üí° **–í–´–í–û–î:** –ó–Ω–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –ø—Ä–∞–≤ —ç–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏!

üì± **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** /start""",

            """üè† **–ö–ï–ô–°: –°–æ—Å–µ–¥–∏ –∑–∞—Ç–æ–ø–∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É**

üíß **–°–∏—Ç—É–∞—Ü–∏—è:**
–°–æ—Å–µ–¥–∏ —Å–≤–µ—Ä—Ö—É –∑–∞–±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –∫—Ä–∞–Ω. –£—â–µ—Ä–± —Å–æ—Å—Ç–∞–≤–∏–ª 340 000 —Ä—É–±–ª–µ–π.

‚öñÔ∏è **–ù–ê–®–ò –î–ï–ô–°–¢–í–ò–Ø:**
‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —É—â–µ—Ä–± –∞–∫—Ç–æ–º
‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø—Ä–∞–≤–∫—É –∏–∑ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏  
‚Ä¢ –ù–∞–ø—Ä–∞–≤–∏–ª–∏ –¥–æ—Å—É–¥–µ–±–Ω—É—é –ø—Ä–µ—Ç–µ–Ω–∑–∏—é
‚Ä¢ –í–∑—ã—Å–∫–∞–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—É–¥

üí∞ **–†–ï–ó–£–õ–¨–¢–ê–¢:**
–í–∑—ã—Å–∫–∞–Ω–æ 340 000 —Ä—É–±. + —Å—É–¥–µ–±–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã 15 000 —Ä—É–±.

üéØ **–í–ê–ñ–ù–û:** –î–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ!

üìû **–ü–æ–º–æ—â—å 24/7:** /start""",

            """üìã **–¢–†–£–î–û–í–û–ô –°–ü–û–†: –ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ**

‚ö†Ô∏è **–°–ò–¢–£–ê–¶–ò–Ø:**
–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É–≤–æ–ª–∏–ª–∏ –∑–∞ –ø—Ä–æ–≥—É–ª, —Ö–æ—Ç—è –æ–Ω –±–æ–ª–µ–ª (–µ—Å—Ç—å —Å–ø—Ä–∞–≤–∫–∞).

üîç **–ü–†–ê–í–û–í–û–ô –ê–ù–ê–õ–ò–ó:**
‚Ä¢ –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ
‚Ä¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–∞—Ä—É—à–∏–ª –ø–æ—Ä—è–¥–æ–∫ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è

‚öñÔ∏è **–†–ï–ó–£–õ–¨–¢–ê–¢:**
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä–∞–±–æ—Ç–µ
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—É–ª
‚Ä¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Å—É–¥–µ–±–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã

üíº **–ó–ê–©–ò–¢–ò–ú –í–ê–®–ò –¢–†–£–î–û–í–´–ï –ü–†–ê–í–ê!**

üì± **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** /start""",

            """üöó **–î–¢–ü: –°—Ç—Ä–∞—Ö–æ–≤–∞—è –æ—Ç–∫–∞–∑–∞–ª–∞ –≤ –≤—ã–ø–ª–∞—Ç–µ**

üí• **–°–ò–¢–£–ê–¶–ò–Ø:**
–ü–æ—Å–ª–µ –î–¢–ü —Å—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–Ω–∏–∑–∏–ª–∞ –≤—ã–ø–ª–∞—Ç—É –Ω–∞ 180 000 —Ä—É–±–ª–µ–π.

üìä **–ù–ê–®–ê –†–ê–ë–û–¢–ê:**
‚Ä¢ –ü—Ä–æ–≤–µ–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É
‚Ä¢ –°–æ–±—Ä–∞–ª–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∏–Ω—ã –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
‚Ä¢ –ü–æ–¥–∞–ª–∏ –∏—Å–∫ –∫ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

‚úÖ **–ò–¢–û–ì:**
–í–∑—ã—Å–∫–∞–Ω–æ 180 000 —Ä—É–±. + –Ω–µ—É—Å—Ç–æ–π–∫–∞ 25 000 —Ä—É–±. + —Å—É–¥–µ–±–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.

üéØ **–ü–û–ú–ù–ò–¢–ï:** –°—Ç—Ä–∞—Ö–æ–≤—ã–µ —á–∞—Å—Ç–æ –∑–∞–Ω–∏–∂–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã, –Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ –æ—Å–ø–æ—Ä–∏—Ç—å!

üìû **–ü–æ–º–æ–∂–µ–º –≤–∑—ã—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é:** /start"""
        ]

        import random
        return random.choice(professional_posts)

    async def _update_post_buttons_after_publication(
        self,
        channel_id: str,
        message_id: int
    ) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
        try:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            from .comments_auto_setup import get_auto_comments_manager

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments_manager = get_auto_comments_manager(self.bot)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            comments_url = await comments_manager.ensure_comments_for_post(
                channel_id,
                message_id,
                fallback_to_bot=True  # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –≤–µ–¥–µ–º –≤ –±–æ—Ç–∞
            )

            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            correct_buttons = [[
                InlineKeyboardButton(
                    "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    url=f"https://t.me/{self.bot.username}"
                )
            ]]

            reply_markup = InlineKeyboardMarkup(correct_buttons)

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞
            await self.bot.edit_message_reply_markup(
                chat_id=channel_id,
                message_id=message_id,
                reply_markup=reply_markup
            )

            logger.info(
                f"‚úÖ Updated post buttons with auto-comments for message {message_id} in channel {channel_id}")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed to update post buttons: {e}")
            return False

    def _create_comments_url(self, channel_id: str, message_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É"""
        try:
            # –ï—Å–ª–∏ channel_id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —ç—Ç–æ username
            if channel_id.startswith('@'):
                channel_username = channel_id[1:]  # –£–±–∏—Ä–∞–µ–º @
                return f"https://t.me/{channel_username}/{message_id}?comment=1"

            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–µ–Ω–Ω—ã–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890)
            elif channel_id.startswith('-100'):
                # –î–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç t.me/c/ID/MESSAGE_ID
                numeric_id = channel_id[4:]  # –£–±–∏—Ä–∞–µ–º -100 –ø—Ä–µ—Ñ–∏–∫—Å
                return f"https://t.me/c/{numeric_id}/{message_id}?comment=1"

            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —á–∏—Å–ª–µ–Ω–Ω—ã–π ID
            elif channel_id.startswith('-'):
                numeric_id = channel_id[1:]  # –£–±–∏—Ä–∞–µ–º - –ø—Ä–µ—Ñ–∏–∫—Å
                return f"https://t.me/c/{numeric_id}/{message_id}?comment=1"

            # Fallback - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ username –±–µ–∑ @
            else:
                return f"https://t.me/{channel_id}/{message_id}?comment=1"

        except Exception as e:
            logger.error(f"‚ùå Failed to create comments URL: {e}")
            # Fallback - –≤–µ–¥–µ–º –≤ –±–æ—Ç–∞
            return f"https://t.me/{self.bot.username}"


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
_smm_integration_instance = None


async def initialize_smm_integration(bot: Bot, ai_manager: AIEnhancedManager) -> SMMIntegration:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    global _smm_integration_instance

    try:
        logger.info("üîß Initializing SMM Integration")

        _smm_integration_instance = SMMIntegration(bot, ai_manager)

        logger.info("‚úÖ SMM Integration initialized successfully")
        return _smm_integration_instance

    except Exception as e:
        logger.error(f"Failed to initialize SMM integration: {e}")
        raise


async def start_smm_system() -> None:
    """–ó–∞–ø—É—Å–∫ SMM —Å–∏—Å—Ç–µ–º—ã"""
    global _smm_integration_instance

    if _smm_integration_instance:
        await _smm_integration_instance.start_smm_system()
    else:
        raise RuntimeError(
            "SMM Integration not initialized. Call initialize_smm_integration first.")


def get_smm_integration() -> Optional[SMMIntegration]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    return _smm_integration_instance

"""
üöÄ –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê
–†–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π python + telegram
+ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ê –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê
"""

import asyncio
import logging
import os
import random
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ - PostgreSQL –≤–µ—Ä—Å–∏—è –¥–ª—è production
try:
    from .content_deduplication_pg import validate_and_register_content
    DEDUPLICATION_TYPE = "PostgreSQL"
except ImportError:
    # Fallback –Ω–∞ SQLite –≤–µ—Ä—Å–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    from .content_deduplication import validate_and_register_content, get_deduplication_system
    DEDUPLICATION_TYPE = "SQLite"
# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
from .professional_legal_content import get_expert_legal_content
from .ai_legal_expert import generate_ai_expert_content

logger = logging.getLogger(__name__)


class SimpleAutopost:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False
        self.last_post_time = None
        self.last_deploy_post_time = None
        self.autopost_interval_minutes = 60  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.posts_created_today = 0
        self.daily_post_limit = 24  # –ú–∞–∫—Å–∏–º—É–º 24 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å

        # –ü–æ–ª—É—á–∞–µ–º channel_id –∏–∑ environment
        self.channel_id = (
            os.getenv('TARGET_CHANNEL_ID') or
            os.getenv('CHANNEL_ID') or
            '@test_legal_channel'
        )

        logger.info(
            f"üîß SimpleAutopost initialized for channel: {self.channel_id}")
        logger.info(f"üîç Deduplication system: {DEDUPLICATION_TYPE}")

    async def start_autopost_system(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        if self.is_running:
            logger.warning("Autopost system already running")
            return

        self.is_running = True
        logger.info("üöÄ Starting simple autopost system...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._deploy_autopost_timer())
        asyncio.create_task(self._regular_autopost_loop())
        asyncio.create_task(self._daily_reset_timer())

        logger.info("‚úÖ Simple autopost system started - all tasks running in background")

    async def _deploy_autopost_timer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ (deploy post)"""
        try:
            logger.info("üîß Deploy autopost timer started")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ deploy post –Ω–µ–¥–∞–≤–Ω–æ
            if self.last_deploy_post_time:
                time_since_deploy = datetime.now() - self.last_deploy_post_time
                if time_since_deploy < timedelta(hours=1):
                    logger.info(
                        "Deploy post already created recently, skipping")
                    return

            logger.info("‚è∞ Deploy autopost: waiting 5 minutes...")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            logger.info("‚è∞ Deploy autopost: 5 minutes passed, creating post...")

            if self.is_running:
                await self._create_deploy_post()
                self.last_deploy_post_time = datetime.now()
                logger.info("‚úÖ Deploy autopost completed successfully")
            else:
                logger.warning("‚ö†Ô∏è Deploy autopost skipped - system not running")

        except Exception as e:
            logger.error(f"‚ùå Deploy autopost error: {e}")
            import traceback
            logger.error(f"Deploy autopost traceback: {traceback.format_exc()}")

    async def _regular_autopost_loop(self):
        """–†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å"""
        try:
            logger.info("üîß Regular autopost loop started")
            # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –ø–æ—Å—Ç–æ–º
            logger.info("‚è∞ Regular autopost: waiting 10 minutes before first post...")
            await asyncio.sleep(600)
            logger.info("‚è∞ Regular autopost: 10 minutes passed, starting loop...")

            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    if self.posts_created_today >= self.daily_post_limit:
                        logger.info(
                            f"Daily post limit reached ({self.posts_created_today}/{self.daily_post_limit}), waiting for reset")
                        await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å
                        continue

                    logger.info(f"üìù Creating regular post ({self.posts_created_today + 1}/{self.daily_post_limit} for today)")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç
                    await self._create_regular_post()
                    self.last_post_time = datetime.now()
                    self.posts_created_today += 1
                    
                    logger.info(f"‚úÖ Regular post created successfully ({self.posts_created_today}/{self.daily_post_limit})")

                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
                    logger.info(
                        f"‚è∞ Next regular post in {self.autopost_interval_minutes} minutes")
                    await asyncio.sleep(self.autopost_interval_minutes * 60)

                except Exception as e:
                    logger.error(f"‚ùå Regular autopost error: {e}")
                    import traceback
                    logger.error(f"Regular autopost traceback: {traceback.format_exc()}")
                    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

        except Exception as e:
            logger.error(f"Regular autopost loop error: {e}")

    async def _daily_reset_timer(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""
        while self.is_running:
            try:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª—É–Ω–æ—á–∏
                now = datetime.now()
                tomorrow = now.replace(
                    hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
                seconds_until_midnight = (tomorrow - now).total_seconds()

                await asyncio.sleep(seconds_until_midnight)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                self.posts_created_today = 0
                logger.info("Daily post counter reset")

            except Exception as e:
                logger.error(f"Daily reset error: {e}")
                await asyncio.sleep(3600)

    async def _create_deploy_post(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"""
        try:
            logger.info("üöÄ Creating deploy autopost...")

            post_text = f"""üöÄ **–°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!**

‚úÖ **–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
‚Ä¢ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞  
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

üéØ **–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:**
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ª—é–±—ã–º –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
‚Ä¢ –°–µ–º–µ–π–Ω–æ–µ –∏ —Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞

üì± **–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**

*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}*"""

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = [[
                InlineKeyboardButton(
                    "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    url=f"https://t.me/{self.bot.username.replace('@', '')}"
                )
            ]]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
            message = await self.bot.send_message(
                chat_id=self.channel_id,
                text=post_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            logger.info(f"‚úÖ Deploy autopost created: {message.message_id}")
            return {"success": True, "message_id": message.message_id}

        except Exception as e:
            logger.error(f"Failed to create deploy post: {e}")
            return {"success": False, "error": str(e)}

    async def _create_regular_post(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        max_attempts = 10  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        for attempt in range(max_attempts):
            try:
                logger.info(f"üìù Creating regular autopost (attempt {attempt + 1}/{max_attempts})...")

                # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                post_types = [
                    "legal_case",
                    "legal_tip", 
                    "legal_news",
                    "legal_fact"
                ]

                post_type = random.choice(post_types)

                # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if post_type == "legal_case":
                    # 80% –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, 20% –±–∞–∑–æ–≤—ã–π
                    if random.random() < 0.8:
                        post_text = await get_expert_legal_content("case")
                    else:
                        post_text = await self._generate_legal_case()
                elif post_type == "legal_tip":
                    if random.random() < 0.8:
                        post_text = await get_expert_legal_content("guide")
                    else:
                        post_text = await self._generate_legal_tip()
                elif post_type == "legal_news":
                    if random.random() < 0.8:
                        post_text = await get_expert_legal_content("update")
                    else:
                        post_text = await self._generate_legal_news()
                else:
                    if random.random() < 0.8:
                        post_text = await get_expert_legal_content("practice")
                    else:
                        post_text = await self._generate_legal_fact()

                # –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–ù–¢–ï–ù–¢–ê
                title = post_text.split('\n')[0][:100]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                is_valid, message = validate_and_register_content(
                    title=title,
                    content=post_text,
                    content_type="simple_autopost",
                    source_system="simple_autopost"
                )

                if not is_valid:
                    logger.warning(f"‚ùå Post not unique (attempt {attempt + 1}): {message}")
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Ç–µ–º—É –Ω–∞ 2 —á–∞—Å–∞
                    dedup_system = get_deduplication_system()
                    dedup_system.block_topic_temporarily(title, f"SimpleAutopost duplicate on attempt {attempt + 1}", hours=2)
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                keyboard = [[
                    InlineKeyboardButton(
                        "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                        url=f"https://t.me/{self.bot.username.replace('@', '')}"
                    )
                ]]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
                message = await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=post_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )

                logger.info(f"‚úÖ Unique regular autopost created: {message.message_id} (type: {post_type}) after {attempt + 1} attempts")
                return {
                    "success": True, 
                    "message_id": message.message_id, 
                    "type": post_type,
                    "attempts_needed": attempt + 1,
                    "uniqueness_validated": True
                }

            except Exception as e:
                logger.error(f"Failed to create regular post (attempt {attempt + 1}): {e}")
                if attempt == max_attempts - 1:
                    return {"success": False, "error": str(e), "max_attempts_reached": True}
                continue

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"‚ùå Failed to generate unique content after {max_attempts} attempts")
        return {
            "success": False, 
            "error": f"Could not generate unique content after {max_attempts} attempts",
            "max_attempts_reached": True
        }

    async def _generate_legal_case(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∫–µ–π—Å–∞"""
        cases = [
            {
                "title": "–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —á–µ–∫–∞",
                "situation": "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä, –Ω–æ –ø–æ—Ç–µ—Ä—è–ª —á–µ–∫",
                "solution": "–ü–æ –∑–∞–∫–æ–Ω—É —á–µ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –ø–æ–∫—É–ø–∫–∏",
                "law": "—Å—Ç. 18 –ó–∞–∫–æ–Ω–∞ '–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π'"
            },
            {
                "title": "–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å–∫–∞",
                "situation": "–†–∞–±–æ—Ç–Ω–∏–∫–∞ –ø—ã—Ç–∞—é—Ç—Å—è —É–≤–æ–ª–∏—Ç—å, –ø–æ–∫–∞ –æ–Ω –≤ –æ—Ç–ø—É—Å–∫–µ",
                "solution": "–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞",
                "law": "—Å—Ç. 81 –¢–ö –†–§"
            },
            {
                "title": "–ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã",
                "situation": "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã",
                "solution": "–ó–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è",
                "law": "—Å—Ç. 236 –¢–ö –†–§"
            }
        ]

        case = random.choice(cases)

        return f"""‚öñÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –ö–ï–ô–°: {case['title'].upper()}**

üîç **–°–∏—Ç—É–∞—Ü–∏—è:**
{case['situation']}

‚úÖ **–†–µ—à–µ–Ω–∏–µ:**
{case['solution']}

üìã **–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞:**
{case['law']}

üí° **–ü–æ–º–Ω–∏—Ç–µ:** –ù–µ–∑–Ω–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–æ –∑–Ω–∞–Ω–∏–µ –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–∞–≤–∞!

‚ùì **–ï—Å—Ç—å –ø–æ—Ö–æ–∂–∞—è —Å–∏—Ç—É–∞—Ü–∏—è? –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!**"""

    async def _generate_legal_tip(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
        tips = [
            {
                "title": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é",
                "content": "1. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–∞ –∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n2. –û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è\n3. –°–æ—à–ª–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–∫–æ–Ω\n4. –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n5. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –ø–æ–¥–ø–∏—Å—å"
            },
            {
                "title": "–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ",
                "content": "‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä\n‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π\n‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
            },
            {
                "title": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –î–¢–ü",
                "content": "1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤–∞—Ä–∏–π–∫—É\n2. –í—ã—Å—Ç–∞–≤–∏—Ç–µ –∑–Ω–∞–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n3. –í—ã–∑–æ–≤–∏—Ç–µ –ì–ò–ë–î–î –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ–≤—Ä–æ–ø—Ä–æ—Ç–æ–∫–æ–ª\n4. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è\n5. –û–±–º–µ–Ω—è–π—Ç–µ—Å—å –¥–∞–Ω–Ω—ã–º–∏ —Å –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º"
            }
        ]

        tip = random.choice(tips)

        return f"""üí° **–ü–†–ê–í–û–í–û–ô –°–û–í–ï–¢: {tip['title'].upper()}**

üìù **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
{tip['content']}

‚úÖ **–°–ª–µ–¥—É—è —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º, –≤—ã –∑–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –∏–∑–±–µ–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º!**

üîó **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤–∞—à–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π?**"""

    async def _generate_legal_news(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        news = [
            "–° 2024 –≥–æ–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω",
            "–ù–æ–≤—ã–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É",
            "–£–ø—Ä–æ—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥–∞—á–∏ –∏—Å–∫–æ–≤ –≤ —Å—É–¥ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏",
            "–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –Ω–∞ –¥–µ—Ç–µ–π",
            "–ù–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã—Ö —Å–µ–º–µ–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∂–∏–ª—å—è"
        ]

        selected_news = random.choice(news)

        return f"""üì∞ **–ü–†–ê–í–û–í–´–ï –ù–û–í–û–°–¢–ò**

üÜï **{selected_news}**

üìã –≠—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏. 

‚ùì **–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é?**

üí¨ **–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –Ω–æ–≤—ã–º –∑–∞–∫–æ–Ω–∞–º!**"""

    async def _generate_legal_fact(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
        facts = [
            "–°—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –¥–µ–ª —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3 –≥–æ–¥–∞",
            "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é –∑–∞ 2 –º–µ—Å—è—Ü–∞",
            "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤–µ—Ä–Ω—É—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
            "–ê–ª–∏–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –≤–∑—ã—Å–∫–∞—Ç—å –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –ø–µ—Ä–∏–æ–¥, –Ω–æ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 3 –≥–æ–¥–∞",
            "–ë–∞–Ω–∫ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–∞ –±–µ–∑ –≤–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π"
        ]

        fact = random.choice(facts)

        return f"""üß† **–ê –í–´ –ó–ù–ê–õ–ò?**

üí° **–ü—Ä–∞–≤–æ–≤–æ–π —Ñ–∞–∫—Ç:**
{fact}

üìö **–ó–Ω–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –ø—Ä–∞–≤ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:**
‚Ä¢ –ò–∑–±–µ–∂–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–π
‚Ä¢ –ó–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã  
‚Ä¢ –ù–µ —Å—Ç–∞—Ç—å –∂–µ—Ä—Ç–≤–æ–π –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏

‚ùì **–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–∞–≤–∞—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?**"""

    async def set_interval(self, minutes: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.autopost_interval_minutes = minutes
        logger.info(f"Autopost interval set to {minutes} minutes")

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        return {
            "running": self.is_running,
            "interval_minutes": self.autopost_interval_minutes,
            "posts_today": self.posts_created_today,
            "daily_limit": self.daily_post_limit,
            "last_post_time": self.last_post_time.isoformat() if self.last_post_time else None,
            "last_deploy_post": self.last_deploy_post_time.isoformat() if self.last_deploy_post_time else None,
            "channel_id": self.channel_id
        }

    async def create_immediate_post(self, post_type: str = "regular") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if post_type == "deploy":
            return await self._create_deploy_post()
        else:
            return await self._create_regular_post()

    async def stop_autopost(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("Simple autopost system stopped")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
_simple_autopost_instance = None


async def init_simple_autopost(bot: Bot) -> SimpleAutopost:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    global _simple_autopost_instance

    try:
        if _simple_autopost_instance is None:
            _simple_autopost_instance = SimpleAutopost(bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        await _simple_autopost_instance.start_autopost_system()

        logger.info("‚úÖ Simple autopost system initialized and started")
        return _simple_autopost_instance

    except Exception as e:
        logger.error(f"Failed to initialize simple autopost: {e}")
        raise


def get_simple_autopost() -> Optional[SimpleAutopost]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    return _simple_autopost_instance

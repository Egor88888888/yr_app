"""
Enhanced AI Manager - –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ò–ò.

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã Enhanced AI:
- ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º AI API.
"""

import asyncio
import logging
import time
import traceback
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ...db import async_sessionmaker, User
from ...ai import generate_ai_response as basic_ai_response
from ...ai_enhanced_models import (
    UserProfile, DialogueSession, DialogueMessage, AIMetrics
)
from .context_builder import ContextBuilder, AIContext
from .response_optimizer import ResponseOptimizer
try:
    from ..classification.ml_classifier import MLClassifier, HAS_NUMPY
    ML_AVAILABLE = True
except ImportError:
    HAS_NUMPY = False
    ML_AVAILABLE = False
    # Fallback ML Classifier

    class MLClassifier:
        def __init__(self, *args, **kwargs):
            pass

        async def classify_category(self, *args, **kwargs):
            return {"category": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ", "confidence": 0.5}
from ..classification.intent_detector import IntentDetector
from ..memory.dialogue_memory import DialogueMemory
from ..memory.user_profiler import UserProfiler
from ..memory.session_manager import SessionManager
from ..personalization.style_adapter import StyleAdapter
from ..analytics.interaction_tracker import InteractionTracker
from ..analytics.quality_analyzer import QualityAnalyzer

logger = logging.getLogger(__name__)


class AIEnhancedManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Enhanced AI —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.context_builder = ContextBuilder()
        self.response_optimizer = ResponseOptimizer()

        # ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Å—Ç–∞—Ç—É—Å–æ–º
        self.ml_classifier = MLClassifier()
        self.intent_detector = IntentDetector()

        # Log ML status
        if ML_AVAILABLE and HAS_NUMPY:
            logger.info(
                "üß† AI Enhanced: Full ML capabilities enabled with numpy")
        elif ML_AVAILABLE:
            logger.warning(
                "üß† AI Enhanced: ML enabled with fallback (no numpy)")
        else:
            logger.warning(
                "üß† AI Enhanced: ML disabled, using fallback classifier")

        # –ü–∞–º—è—Ç—å
        self.dialogue_memory = DialogueMemory()
        self.user_profiler = UserProfiler()
        self.session_manager = SessionManager()

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        self.style_adapter = StyleAdapter()

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.interaction_tracker = InteractionTracker()
        self.quality_analyzer = QualityAnalyzer()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialized = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if self._initialized:
            return

        try:
            logger.info("Initializing Enhanced AI system...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                self.ml_classifier.initialize(),
                self.intent_detector.initialize(),
                self.dialogue_memory.initialize(),
                self.user_profiler.initialize(),
                self.style_adapter.initialize(),
                return_exceptions=True
            )

            self._initialized = True
            logger.info("Enhanced AI system initialized successfully")

        except (ValueError, RuntimeError) as e:
            logger.error("Failed to initialize Enhanced AI: %s", e)
            raise

    async def generate_response(
        self,
        user_id: int,
        message: str,
        context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –æ—Ç–≤–µ—Ç
        """
        start_time = time.time()

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self._initialized:
                await self.initialize()

            # 1. –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await self.user_profiler.get_or_create_profile(user_id)

            # 2. –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞
            session = await self.session_manager.get_or_create_session(user_id)

            # 3. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            classification_result = await self.ml_classifier.classify_message(message)
            intent_result = await self.intent_detector.detect_intent(message)

            # 4. –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            ai_context = await self.context_builder.build_context(
                user_id=user_id,
                message=message,
                user_profile=user_profile,
                session=session,
                classification=classification_result,
                intent=intent_result,
                additional_context=context
            )

            # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            base_response = await self._generate_base_response(ai_context)

            # 6. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            personalized_response = await self.style_adapter.adapt_response(
                response=base_response,
                user_profile=user_profile,
                context=ai_context
            )

            # 7. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = await self.response_optimizer.optimize_response(
                response=personalized_response,
                context=ai_context,
                user_profile=user_profile
            )

            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç—å
            await self._save_interaction(
                user_id=user_id,
                session=session,
                user_message=message,
                ai_response=final_response,
                ai_context=ai_context,
                response_time=time.time() - start_time
            )

            # 9. –¢—Ä–µ–∫–∏–Ω–≥ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self.interaction_tracker.track_interaction(
                user_id=user_id,
                session_id=session.id,
                message=message,
                response=final_response,
                context=ai_context,
                response_time_ms=int((time.time() - start_time) * 1000)
            )

            return final_response

        except (ValueError, RuntimeError) as e:
            logger.error("Enhanced AI error for user %s: %s", user_id, e)
            return await self._fallback_response(message, str(e))

    async def _generate_base_response(self, context: AIContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ AI –æ—Ç–≤–µ—Ç–∞"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
        messages = []

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        system_prompt = self._build_system_prompt(context)
        messages.append({"role": "system", "content": system_prompt})

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if context.dialogue_history:
            for msg in context.dialogue_history[-5:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                messages.append({
                    "role": msg.role,
                    "content": msg.content
                })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": context.message})

        # –í—ã–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π AI —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        return await basic_ai_response(
            messages=messages,
            model="openai/gpt-4o",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å
            max_tokens=1000
        )

    def _build_system_prompt(self, context: AIContext) -> str:
        """–°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        base_prompt = """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º."""

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
        if context.user_profile:
            profile = context.user_profile

            if profile.experience_level == "beginner":
                base_prompt += "\n–û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."
            elif profile.experience_level == "advanced":
                base_prompt += "\n–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é."

            if profile.preferred_style == "formal":
                base_prompt += "\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è."
            elif profile.preferred_style == "friendly":
                base_prompt += "\n–û–±—â–∞–π—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ."

            if profile.detail_preference == "brief":
                base_prompt += "\n–î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, —Å–∂–∞—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã."
            elif profile.detail_preference == "detailed":
                base_prompt += "\n–î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if context.predicted_category:
            base_prompt += f"\n–¢–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞: {context.predicted_category}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if context.detected_intent:
            if context.detected_intent == "consultation":
                base_prompt += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
            elif context.detected_intent == "application":
                base_prompt += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—Å–ª—É–≥–∏."
            elif context.detected_intent == "information":
                base_prompt += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö."

        base_prompt += "\n\n–í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."

        return base_prompt

    async def _save_interaction(
        self,
        user_id: int,
        session: DialogueSession,
        user_message: str,
        ai_response: str,
        ai_context: AIContext,
        response_time: float
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ session –∏–º–µ–µ—Ç id (–Ω–µ fallback)
            if not hasattr(session, 'id') or session.id is None:
                logger.warning(f"Skipping interaction save - session has no id (fallback mode)")
                return

            async with async_sessionmaker() as db_session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_msg = DialogueMessage(
                    session_id=session.id,
                    role="user",
                    content=user_message,
                    intent_confidence=ai_context.intent_confidence,
                    category_predictions=ai_context.category_predictions
                )
                db_session.add(user_msg)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
                ai_msg = DialogueMessage(
                    session_id=session.id,
                    role="assistant",
                    content=ai_response,
                    response_time_ms=int(response_time * 1000)
                )
                db_session.add(ai_msg)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                session.message_count += 2
                session.last_activity = datetime.now()

                if ai_context.predicted_category:
                    if not session.detected_categories:
                        session.detected_categories = []
                    if ai_context.predicted_category not in session.detected_categories:
                        session.detected_categories.append(
                            ai_context.predicted_category)

                await db_session.commit()

        except Exception as e:
            logger.error(f"Failed to save interaction: {e}")

    async def _fallback_response(self, message: str, error: str) -> str:
        """Fallback –∫ –±–∞–∑–æ–≤–æ–º—É AI –ø—Ä–∏ –æ—à–∏–±–∫–µ Enhanced —Å–∏—Å—Ç–µ–º—ã"""
        logger.warning(f"Using fallback AI due to error: {error}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
            from ...ai import generate_ai_response

            # –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ import dependency
            message_lower = message.lower()
            if any(word in message_lower for word in ["—Ä–∞–∑–≤–æ–¥", "–∞–ª–∏–º–µ–Ω—Ç", "–±—Ä–∞–∫", "—Å–µ–º—å—è"]):
                category = "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ"
            elif any(word in message_lower for word in ["–Ω–∞—Å–ª–µ–¥—Å—Ç–≤", "–∑–∞–≤–µ—â–∞–Ω"]):
                category = "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ"
            elif any(word in message_lower for word in ["—Ä–∞–±–æ—Ç", "—Ç—Ä—É–¥", "—É–≤–æ–ª—å–Ω–µ–Ω"]):
                category = "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã"
            elif any(word in message_lower for word in ["–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–∏—Ä", "–¥–æ–º"]):
                category = "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
            elif any(word in message_lower for word in ["–¥–æ–ª–≥", "–∫—Ä–µ–¥–∏—Ç", "–±–∞–Ω–∫—Ä–æ—Ç"]):
                category = "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü"
            elif any(word in message_lower for word in ["–Ω–∞–ª–æ–≥", "–Ω–¥—Ñ–ª"]):
                category = "–ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
            elif any(word in message_lower for word in ["—à—Ç—Ä–∞—Ñ", "–≥–∏–±–¥–¥"]):
                category = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã"
            elif any(word in message_lower for word in ["–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "—Ç–æ–≤–∞—Ä", "—É—Å–ª—É–≥"]):
                category = "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"
            elif any(word in message_lower for word in ["–º–∏–≥—Ä–∞", "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤", "–≤–∏–∑–∞"]):
                category = "–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"
            else:
                category = "–û–±—â–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

            system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. 
–û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ: {category}.
–î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —Å—Å—ã–ª–∞–µ—à—å—Å—è –Ω–∞ –∑–∞–∫–æ–Ω—ã –†–§.
–í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ]

            response = await generate_ai_response(messages)
            response += "\n\nüíº –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

            return response

        except Exception as fallback_error:
            logger.error(f"Fallback AI also failed: {fallback_error}")
            return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    async def get_analytics_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                result = await session.execute(
                    select(AIMetrics).order_by(
                        AIMetrics.metric_date.desc()).limit(1)
                )
                latest_metrics = result.scalar_one_or_none()

                if not latest_metrics:
                    return {"status": "no_data"}

                return {
                    "total_requests": latest_metrics.total_requests,
                    "success_rate": latest_metrics.successful_requests / max(latest_metrics.total_requests, 1),
                    "avg_response_time": latest_metrics.average_response_time,
                    "avg_satisfaction": latest_metrics.average_satisfaction,
                    "classification_accuracy": latest_metrics.classification_accuracy,
                    "tokens_used": latest_metrics.total_tokens_used,
                    "estimated_cost": latest_metrics.total_cost_usd
                }

        except Exception as e:
            logger.error(f"Failed to get analytics: {e}")
            return {"status": "error", "error": str(e)}

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Enhanced AI —Å–∏—Å—Ç–µ–º—ã"""
        health = {
            "status": "healthy",
            "components": {},
            "initialized": self._initialized
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            components_to_check = [
                ("ml_classifier", self.ml_classifier),
                ("intent_detector", self.intent_detector),
                ("dialogue_memory", self.dialogue_memory),
                ("user_profiler", self.user_profiler),
                ("style_adapter", self.style_adapter)
            ]

            for name, component in components_to_check:
                try:
                    if hasattr(component, 'health_check'):
                        component_health = await component.health_check()
                        health["components"][name] = component_health
                    else:
                        health["components"][name] = {"status": "ok"}
                except Exception as e:
                    health["components"][name] = {
                        "status": "error", "error": str(e)}
                    health["status"] = "degraded"

        except Exception as e:
            health["status"] = "error"
            health["error"] = str(e)

        return health

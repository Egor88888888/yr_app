"""
Response Optimizer - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ AI –æ—Ç–≤–µ—Ç–æ–≤.

–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ CTA, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
"""

import logging
import re
from typing import Dict, Any, Optional

from ..ai_enhanced_models import UserProfile
from ..core.context_builder import AIContext

logger = logging.getLogger(__name__)


class ResponseOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤"""

    def __init__(self):
        self.initialized = False

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        self.cta_templates = {
            "consultation": "üíº –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            "application": "üìù –ì–æ—Ç–æ–≤—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É? –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.",
            "pricing": "üí∞ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –ø–æ–¥–∞–≤ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ /start",
            "default": "üìû –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start"
        }

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_emojis = {
            "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
            "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ": "üè†",
            "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã": "üëî",
            "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã": "üèòÔ∏è",
            "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü": "üí≥",
            "–ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏": "üìä",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã": "üö´",
            "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π": "üõ°Ô∏è",
            "–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ": "üåç"
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        try:
            logger.info("üîß Initializing Response Optimizer...")
            self.initialized = True
            logger.info("‚úÖ Response Optimizer initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Response Optimizer: {e}")
            self.initialized = False

    async def optimize_response(
        self,
        response: str,
        context: AIContext,
        user_profile: Optional[UserProfile] = None
    ) -> str:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            optimized = response

            # 1. –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            optimized = await self._improve_formatting(optimized)

            # 2. –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            optimized = await self._add_category_emoji(optimized, context)

            # 3. –£–ª—É—á—à–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            optimized = await self._improve_structure(optimized)

            # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CTA
            optimized = await self._add_personalized_cta(optimized, context, user_profile)

            # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            optimized = await self._quality_check(optimized)

            return optimized

        except Exception as e:
            logger.error(f"Failed to optimize response: {e}")
            return response

    async def _improve_formatting(self, response: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            response = re.sub(r'\.([–ê-–Ø–Å])', r'.\n\n\1', response)

            # –í—ã–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
            response = re.sub(
                r'(–í–∞–∂–Ω–æ|–í–ê–ñ–ù–û|–í–Ω–∏–º–∞–Ω–∏–µ|–í–ù–ò–ú–ê–ù–ò–ï)(:?\s*)',
                r'‚ö†Ô∏è **\1**\2',
                response
            )

            # –í—ã–¥–µ–ª—è–µ–º —Å–ø–∏—Å–∫–∏
            response = re.sub(r'^(\d+\.)', r'**\1**',
                              response, flags=re.MULTILINE)
            response = re.sub(r'^([-‚Ä¢])', r'‚ñ™Ô∏è', response, flags=re.MULTILINE)

            return response.strip()

        except Exception as e:
            logger.error(f"Failed to improve formatting: {e}")
            return response

    async def _add_category_emoji(self, response: str, context: AIContext) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            if context.predicted_category in self.category_emojis:
                emoji = self.category_emojis[context.predicted_category]
                if not response.startswith(emoji):
                    response = f"{emoji} {response}"

            return response

        except Exception as e:
            logger.error(f"Failed to add category emoji: {e}")
            return response

    async def _improve_structure(self, response: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã
            paragraphs = response.split('\n\n')
            improved_paragraphs = []

            for paragraph in paragraphs:
                if len(paragraph) > 300:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    sentences = paragraph.split('. ')
                    current_paragraph = ""

                    for sentence in sentences:
                        if len(current_paragraph + sentence) > 200:
                            if current_paragraph:
                                improved_paragraphs.append(
                                    current_paragraph.strip())
                            current_paragraph = sentence + '. '
                        else:
                            current_paragraph += sentence + '. '

                    if current_paragraph:
                        improved_paragraphs.append(current_paragraph.strip())
                else:
                    improved_paragraphs.append(paragraph)

            return '\n\n'.join(improved_paragraphs)

        except Exception as e:
            logger.error(f"Failed to improve structure: {e}")
            return response

    async def _add_personalized_cta(
        self,
        response: str,
        context: AIContext,
        user_profile: Optional[UserProfile]
    ) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π CTA –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            intent = context.detected_intent or "default"
            cta = self.cta_templates.get(intent, self.cta_templates["default"])

            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CTA
            if user_profile:
                if user_profile.total_interactions > 5:
                    cta = "ü§ù –ö–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start"
                elif user_profile.experience_level == "advanced":
                    cta = "‚öñÔ∏è –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"

            # –î–æ–±–∞–≤–ª—è–µ–º CTA –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if "/start" not in response and "–∑–∞—è–≤–∫" not in response.lower():
                response += f"\n\n{cta}"

            return response

        except Exception as e:
            logger.error(f"Failed to add personalized CTA: {e}")
            return response

    async def _quality_check(self, response: str) -> str:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            if len(response) < 50:
                response += "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            if len(response) > 1500:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
                sentences = response.split('. ')
                truncated = []
                current_length = 0

                for sentence in sentences:
                    if current_length + len(sentence) > 1200:
                        break
                    truncated.append(sentence)
                    current_length += len(sentence)

                response = '. '.join(truncated)
                if not response.endswith('.'):
                    response += '.'

                response += "\n\nüìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start"

            # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
            response = re.sub(r'\s+', ' ', response)
            response = re.sub(r'\n\s*\n\s*\n', '\n\n', response)

            return response.strip()

        except Exception as e:
            logger.error(f"Failed to perform quality check: {e}")
            return response

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "cta_templates": len(self.cta_templates),
            "category_emojis": len(self.category_emojis)
        }

"""
Style Adapter - –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.
"""

import logging
import re
from typing import Dict, Any, Optional

from ...ai_enhanced_models import UserProfile
from ..core.context_builder import AIContext

logger = logging.getLogger(__name__)


class StyleAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–æ–≤"""

    def __init__(self):
        self.initialized = False

        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        self.style_templates = {
            "formal": {
                "greeting": ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"],
                "closing": ["–° —É–≤–∞–∂–µ–Ω–∏–µ–º", "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è"],
                "transition": ["–ü–æ–∑–≤–æ–ª—å—Ç–µ —Ä–∞–∑—ä—è—Å–Ω–∏—Ç—å", "–°–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å", "–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å"]
            },
            "friendly": {
                "greeting": ["–ü—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"],
                "closing": ["–£–¥–∞—á–∏", "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ", "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å"],
                "transition": ["–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è", "–û–±—ä—è—Å–Ω—é –ø—Ä–æ—â–µ", "–í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç"]
            },
            "professional": {
                "greeting": ["–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"],
                "closing": ["–° —É–≤–∞–∂–µ–Ω–∏–µ–º", "–£—Å–ø–µ—Ö–æ–≤", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è"],
                "transition": ["–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–µ—Ç–∞–ª–∏", "–ö–ª—é—á–µ–≤–æ–π –∞—Å–ø–µ–∫—Ç", "–°–ª–µ–¥—É–µ—Ç —É—á–µ—Å—Ç—å"]
            }
        }

        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        self.detail_modifiers = {
            "brief": {
                "max_length": 300,
                "remove_examples": True,
                "summarize": True
            },
            "medium": {
                "max_length": 600,
                "remove_examples": False,
                "summarize": False
            },
            "detailed": {
                "max_length": 1000,
                "remove_examples": False,
                "add_context": True
            }
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            logger.info("üîß Initializing Style Adapter...")
            self.initialized = True
            logger.info("‚úÖ Style Adapter initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Style Adapter: {e}")
            self.initialized = False

    async def adapt_response(
        self,
        response: str,
        user_profile: Optional[UserProfile],
        context: AIContext
    ) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not user_profile:
                return response

            adapted_response = response

            # 1. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            adapted_response = await self._adapt_communication_style(
                adapted_response, user_profile.preferred_style
            )

            # 2. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            adapted_response = await self._adapt_detail_level(
                adapted_response, user_profile.detail_preference
            )

            # 3. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
            adapted_response = await self._adapt_experience_level(
                adapted_response, user_profile.experience_level
            )

            # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            adapted_response = await self._add_personalization(
                adapted_response, user_profile, context
            )

            return adapted_response

        except Exception as e:
            logger.error(f"Failed to adapt response: {e}")
            return response  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _adapt_communication_style(self, response: str, style: str) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        try:
            if style not in self.style_templates:
                return response

            templates = self.style_templates[style]

            # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
            if style == "friendly":
                response = response.replace("–í—ã –º–æ–∂–µ—Ç–µ", "–ú–æ–∂–µ—Ç–µ")
                response = response.replace("–í–∞–º —Å–ª–µ–¥—É–µ—Ç", "–õ—É—á—à–µ")
                response = response.replace("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è", "—Å–æ–≤–µ—Ç—É—é")
            elif style == "formal":
                response = response.replace("–º–æ–∂–µ—Ç–µ", "–í—ã –º–æ–∂–µ—Ç–µ")
                response = response.replace("–ª—É—á—à–µ", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
                response = response.replace("—Å–æ–≤–µ—Ç—É—é", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")

            return response

        except Exception as e:
            logger.error(f"Failed to adapt communication style: {e}")
            return response

    async def _adapt_detail_level(self, response: str, detail_level: str) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            if detail_level not in self.detail_modifiers:
                return response

            modifiers = self.detail_modifiers[detail_level]

            if detail_level == "brief":
                # –°–æ–∫—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
                sentences = response.split('. ')
                if len(sentences) > 3:
                    response = '. '.join(sentences[:3]) + '.'

                # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                response = re.sub(r'–ù–∞–ø—Ä–∏–º–µ—Ä[^.]*\.', '', response)
                response = re.sub(r'–ö –ø—Ä–∏–º–µ—Ä—É[^.]*\.', '', response)

            elif detail_level == "detailed":
                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                if len(response) < 400:
                    response += "\n\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å."

            return response

        except Exception as e:
            logger.error(f"Failed to adapt detail level: {e}")
            return response

    async def _adapt_experience_level(self, response: str, experience: str) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞"""
        try:
            if experience == "beginner":
                # –£–ø—Ä–æ—â–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã
                response = response.replace(
                    "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–∏—Å–∫ (–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥)")
                response = response.replace(
                    "–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥", "—Å—É–¥ –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º —Å–ø–æ—Ä–∞–º")
                response = response.replace(
                    "–∞–ø–µ–ª–ª—è—Ü–∏—è", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–∞")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è
                if "–ì–ö –†–§" in response:
                    response = response.replace(
                        "–ì–ö –†–§", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§")
                if "–¢–ö –†–§" in response:
                    response = response.replace("–¢–ö –†–§", "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§")

            elif experience == "advanced":
                # –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
                response = response.replace(
                    "–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ")
                response = response.replace(
                    "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ", "–∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ")

            return response

        except Exception as e:
            logger.error(f"Failed to adapt experience level: {e}")
            return response

    async def _add_personalization(
        self,
        response: str,
        user_profile: UserProfile,
        context: AIContext
    ) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_profile.frequent_categories:
                most_frequent = max(
                    user_profile.frequent_categories,
                    key=user_profile.frequent_categories.get
                )

                if context.predicted_category != most_frequent:
                    response += f"\n\nüíº –ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤–∞—Å —á–∞—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ '{most_frequent}'. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ–∂–µ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!"

            # –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã
            if user_profile.experience_level == "advanced":
                response += "\n\nüìñ –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∞—Ç—å—è–º–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞."

            return response

        except Exception as e:
            logger.error(f"Failed to add personalization: {e}")
            return response

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "available_styles": list(self.style_templates.keys()),
            "detail_levels": list(self.detail_modifiers.keys())
        }

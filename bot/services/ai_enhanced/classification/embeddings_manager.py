"""
Embeddings Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏.

–ö—ç—à–∏—Ä—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–µ–∫—Ç–æ—Ä–∞–º.
"""

import logging
from typing import Dict, Optional

# Optional numpy import for production compatibility
try:
    import numpy as np
    HAS_NUMPY = True
except ImportError:
    HAS_NUMPY = False
    # Fallback - simple list operations

    class np:
        # Fallback ndarray type
        ndarray = list

        @staticmethod
        def array(data):
            return data

logger = logging.getLogger(__name__)


class EmbeddingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.cache = {}
        self.initialized = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            logger.info("üîß Initializing Embeddings Manager...")
            self.initialized = True
            logger.info("‚úÖ Embeddings Manager initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Embeddings Manager: {e}")
            self.initialized = False

    async def get_embedding(self, text: str) -> Optional[np.ndarray]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
        if text in self.cache:
            return self.cache[text]
        return None

    async def store_embedding(self, text: str, embedding: np.ndarray):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≤ –∫—ç—à"""
        self.cache[text] = embedding

    async def health_check(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "cached_embeddings": len(self.cache)
        }

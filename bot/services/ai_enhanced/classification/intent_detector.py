"""
Intent Detector - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è:
- consultation: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
- application: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
- information: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- complaint: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∞–ª—É–µ—Ç—Å—è
- pricing: –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
"""

import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)


class IntentDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self):
        self.intent_patterns = {
            "consultation": [
                "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü", "—Å–æ–≤–µ—Ç", "–ø–æ–º–æ–≥", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫ –ø–æ—Å—Ç—É–ø",
                "—é—Ä–∏—Å—Ç", "–ø—Ä–∞–≤–æ–≤", "–∑–∞–∫–æ–Ω", "–≤–æ–ø—Ä–æ—Å"
            ],
            "application": [
                "–∑–∞—è–≤–∫", "–ø–æ–¥–∞—Ç—å", "–æ—Ñ–æ—Ä–º", "—É—Å–ª—É–≥", "–∑–∞–∫–∞–∑–∞—Ç—å", "–Ω—É–∂–Ω–æ",
                "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "—Ö–æ—á—É", "–∑–∞–ø–∏—Å–∞—Ç"
            ],
            "information": [
                "–∫–∞–∫", "—á—Ç–æ", "–∫–æ–≥–¥–∞", "–≥–¥–µ", "–ø–æ—á–µ–º—É", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü",
                "—Ä–∞—Å—Å–∫–∞–∂", "–æ–±—ä—è—Å–Ω", "–ø—Ä–æ—Ü–µ–¥—É—Ä"
            ],
            "pricing": [
                "—Å—Ç–æ–∏–º–æ—Å—Ç", "—Ü–µ–Ω–∞", "—Å–∫–æ–ª—å–∫–æ", "—Ç–∞—Ä–∏—Ñ", "–æ–ø–ª–∞—Ç", "–¥–µ–Ω—å–≥–∏",
                "—Ä—É–±–ª", "–±–µ—Å–ø–ª–∞—Ç–Ω", "–ø–ª–∞—Ç–Ω"
            ],
            "complaint": [
                "–∂–∞–ª–æ–±", "–Ω–∞—Ä—É—à–µ–Ω", "–Ω–µ–∑–∞–∫–æ–Ω", "–æ–±–º–∞–Ω", "–º–æ—à–µ–Ω", "–≤–∏–Ω–æ–≤–∞",
                "–Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤", "–Ω–∞—Ä—É—à–∏–ª"
            ]
        }
        self.initialized = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        try:
            logger.info("üîß Initializing Intent Detector...")
            self.initialized = True
            logger.info("‚úÖ Intent Detector initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Intent Detector: {e}")
            self.initialized = False

    async def detect_intent(self, message: str) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

        Returns:
            {
                'intent': str,
                'confidence': float,
                'all_intents': Dict[str, float]
            }
        """
        try:
            if not self.initialized:
                await self.initialize()

            message_lower = message.lower()
            intent_scores = {}

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            for intent, patterns in self.intent_patterns.items():
                score = 0
                for pattern in patterns:
                    if pattern in message_lower:
                        score += 1

                if score > 0:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                    intent_scores[intent] = score / len(patterns)

            if not intent_scores:
                return {
                    'intent': 'consultation',  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    'confidence': 0.3,
                    'all_intents': {}
                }

            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä–æ–º
            best_intent = max(intent_scores, key=intent_scores.get)
            # —É—Å–∏–ª–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = min(intent_scores[best_intent] * 3, 0.9)

            return {
                'intent': best_intent,
                'confidence': confidence,
                'all_intents': intent_scores
            }

        except Exception as e:
            logger.error(f"Intent detection error: {e}")
            return {
                'intent': 'consultation',
                'confidence': 0.3,
                'all_intents': {}
            }

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "intents_available": list(self.intent_patterns.keys())
        }

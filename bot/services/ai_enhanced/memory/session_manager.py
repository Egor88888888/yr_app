"""
Session Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤.

–°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.
"""

import logging
import uuid
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

from sqlalchemy import select, desc
from ...db import async_sessionmaker, User
from ...ai_enhanced_models import DialogueSession

logger = logging.getLogger(__name__)


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–∏–∞–ª–æ–≥–æ–≤"""

    def __init__(self):
        self.initialized = False
        self.session_timeout_hours = 24  # —Ç–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö
        self.active_sessions = {}  # –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π"""
        try:
            logger.info("üîß Initializing Session Manager...")
            self.initialized = True
            logger.info("‚úÖ Session Manager initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Session Manager: {e}")
            self.initialized = False

    async def get_or_create_session(self, user_id: int) -> Optional[DialogueSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –∫—ç—à–µ
            if user_id in self.active_sessions:
                session = self.active_sessions[user_id]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
                if self._is_session_active(session):
                    return session
                else:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
                    await self._end_session(session)
                    del self.active_sessions[user_id]

            async with async_sessionmaker() as db_session:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_result = await db_session.execute(
                    select(User).where(User.tg_id == user_id)
                )
                user = user_result.scalar_one_or_none()

                if not user:
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    user = User(
                        tg_id=user_id,
                        first_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        preferred_contact="telegram"
                    )
                    db_session.add(user)
                    await db_session.commit()
                    await db_session.refresh(user)
                    logger.info(
                        f"‚úÖ Created missing user with tg_id: {user_id}")

                # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É user.id
                cutoff_time = datetime.now() - timedelta(hours=self.session_timeout_hours)
                result = await db_session.execute(
                    select(DialogueSession)
                    .where(
                        DialogueSession.user_id == user.id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user.id
                        DialogueSession.resolution_status == "ongoing",
                        DialogueSession.last_activity >= cutoff_time
                    )
                    .order_by(desc(DialogueSession.last_activity))
                    .limit(1)
                )

                existing_session = result.scalar_one_or_none()

                if existing_session:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    existing_session.last_activity = datetime.now()
                    await db_session.commit()

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                    self.active_sessions[user_id] = existing_session
                    return existing_session

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user.id
                new_session = DialogueSession(
                    user_id=user.id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user.id, –Ω–µ tg_id
                    session_uuid=str(uuid.uuid4()),
                    context_summary="",
                    message_count=0,
                    resolution_status="ongoing"
                )

                db_session.add(new_session)
                await db_session.commit()
                await db_session.refresh(new_session)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                self.active_sessions[user_id] = new_session
                return new_session

        except Exception as e:
            logger.error(
                f"Failed to get/create session for user {user_id}: {e}")
            return None

    async def update_session_context(
        self,
        session: DialogueSession,
        category: str = None,
        intent: str = None
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏"""
        try:
            if category:
                session.detected_intent = intent

                if not session.detected_categories:
                    session.detected_categories = []

                if category not in session.detected_categories:
                    session.detected_categories.append(category)

            session.last_activity = datetime.now()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            async with async_sessionmaker() as db_session:
                await db_session.merge(session)
                await db_session.commit()

        except Exception as e:
            logger.error(f"Failed to update session context: {e}")

    async def _end_session(self, session: DialogueSession):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            session.resolution_status = "ended"
            session.ended_at = datetime.now()

            async with async_sessionmaker() as db_session:
                await db_session.merge(session)
                await db_session.commit()

        except Exception as e:
            logger.error(f"Failed to end session: {e}")

    def _is_session_active(self, session: DialogueSession) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        if session.resolution_status != "ongoing":
            return False

        cutoff_time = datetime.now() - timedelta(hours=self.session_timeout_hours)
        return session.last_activity >= cutoff_time

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "active_sessions": len(self.active_sessions),
            "session_timeout_hours": self.session_timeout_hours
        }

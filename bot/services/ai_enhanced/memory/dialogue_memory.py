"""
Dialogue Memory - —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–æ–≤, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
"""

import logging
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import uuid

from sqlalchemy import select, desc
from ...db import async_sessionmaker
from ..ai_enhanced_models import DialogueSession, DialogueMessage, UserProfile

logger = logging.getLogger(__name__)


class DialogueMemory:
    """–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""

    def __init__(self):
        self.initialized = False
        self.memory_cache = {}  # –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        try:
            logger.info("üîß Initializing Dialogue Memory...")
            self.initialized = True
            logger.info("‚úÖ Dialogue Memory initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Dialogue Memory: {e}")
            self.initialized = False

    async def get_relevant_context(
        self,
        user_id: int,
        current_message: str,
        limit: int = 5
    ) -> List[DialogueMessage]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(
                    select(DialogueMessage)
                    .join(DialogueSession)
                    .where(DialogueSession.user_id == user_id)
                    .order_by(desc(DialogueMessage.created_at))
                    .limit(limit * 2)  # –±–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                )

                messages = result.scalars().all()

                # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å ML)
                relevant_messages = []
                current_lower = current_message.lower()

                for msg in messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    msg_lower = msg.content.lower()
                    common_words = set(current_lower.split()
                                       ) & set(msg_lower.split())

                    if len(common_words) > 1:  # –µ—Å—Ç—å –æ–±—â–∏–µ —Å–ª–æ–≤–∞
                        relevant_messages.append(msg)

                    if len(relevant_messages) >= limit:
                        break

                return relevant_messages

        except Exception as e:
            logger.error(f"Failed to get relevant context: {e}")
            return []

    async def store_interaction(
        self,
        session_id: int,
        user_message: str,
        ai_response: str
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–∞–º—è—Ç—å"""
        try:
            async with async_sessionmaker() as db_session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_msg = DialogueMessage(
                    session_id=session_id,
                    role="user",
                    content=user_message
                )
                db_session.add(user_msg)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
                ai_msg = DialogueMessage(
                    session_id=session_id,
                    role="assistant",
                    content=ai_response
                )
                db_session.add(ai_msg)

                await db_session.commit()

        except Exception as e:
            logger.error(f"Failed to store interaction: {e}")

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "cache_size": len(self.memory_cache)
        }

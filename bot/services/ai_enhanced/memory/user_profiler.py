"""
User Profiler - –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.

–°–æ–∑–¥–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è.
"""

import logging
from typing import Optional, Dict, Any
from datetime import datetime

from sqlalchemy import select
from ...db import async_sessionmaker, User
from ..ai_enhanced_models import UserProfile

logger = logging.getLogger(__name__)


class UserProfiler:
    """–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self):
        self.initialized = False
        self.profiles_cache = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
        try:
            logger.info("üîß Initializing User Profiler...")
            self.initialized = True
            logger.info("‚úÖ User Profiler initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize User Profiler: {e}")
            self.initialized = False

    async def get_or_create_profile(self, user_id: int) -> Optional[UserProfile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if user_id in self.profiles_cache:
                return self.profiles_cache[user_id]

            async with async_sessionmaker() as session:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                result = await session.execute(
                    select(UserProfile).where(UserProfile.user_id == user_id)
                )
                profile = result.scalar_one_or_none()

                if not profile:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                    profile = UserProfile(
                        user_id=user_id,
                        experience_level="beginner",
                        preferred_style="friendly",
                        communication_speed="normal",
                        detail_preference="medium"
                    )
                    session.add(profile)
                    await session.commit()
                    await session.refresh(profile)

                # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                self.profiles_cache[user_id] = profile
                return profile

        except Exception as e:
            logger.error(
                f"Failed to get/create profile for user {user_id}: {e}")
            return None

    async def update_profile_from_interaction(
        self,
        user_id: int,
        message: str,
        category: str = None
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            profile = await self.get_or_create_profile(user_id)
            if not profile:
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            profile.total_interactions += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category:
                if not profile.frequent_categories:
                    profile.frequent_categories = {}

                if category in profile.frequent_categories:
                    profile.frequent_categories[category] += 1
                else:
                    profile.frequent_categories[category] = 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if not profile.last_categories:
                    profile.last_categories = []

                # –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–µ–π
                if category not in profile.last_categories[-3:]:
                    profile.last_categories.append(category)
                    if len(profile.last_categories) > 10:
                        profile.last_categories = profile.last_categories[-10:]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            if profile.total_interactions > 20:
                profile.experience_level = "advanced"
            elif profile.total_interactions > 5:
                profile.experience_level = "intermediate"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            async with async_sessionmaker() as session:
                await session.merge(profile)
                await session.commit()

        except Exception as e:
            logger.error(f"Failed to update profile for user {user_id}: {e}")

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
        return {
            "status": "ok" if self.initialized else "not_initialized",
            "cached_profiles": len(self.profiles_cache)
        }

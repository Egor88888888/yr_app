"""
üí¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
"""

import logging
import os
import asyncio
from typing import Optional, Dict, Any
from telegram import Bot, Chat
from telegram.error import TelegramError, BadRequest, Forbidden
from telegram.constants import ChatType

logger = logging.getLogger(__name__)


class CommentsDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def diagnose_comments_system(self, channel_id: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not channel_id:
                channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                    'CHANNEL_ID') or '@test_legal_channel'

            logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
            channel_status = await self._check_channel_access(channel_id)
            if not channel_status["success"]:
                return channel_status

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            discussion_status = await self._check_discussion_group(channel_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_permissions = await self._check_bot_permissions(channel_id)

            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            report = {
                "success": True,
                "channel_id": channel_id,
                "channel_info": channel_status.get("channel_info"),
                "discussion_group": discussion_status,
                "bot_permissions": bot_permissions,
                "comments_working": discussion_status.get("has_discussion_group", False),
                "next_steps": self._generate_next_steps(discussion_status, bot_permissions),
                "manual_setup_required": not discussion_status.get("has_discussion_group", False)
            }

            return report

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "manual_setup_required": True,
                "next_steps": self._get_basic_setup_instructions(channel_id or "–≤–∞—à_–∫–∞–Ω–∞–ª")
            }

    async def _check_channel_access(self, channel_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"""
        try:
            channel = await self.bot.get_chat(channel_id)

            return {
                "success": True,
                "channel_info": {
                    "id": channel.id,
                    "title": channel.title,
                    "username": channel.username,
                    "type": channel.type.value
                }
            }

        except Exception as e:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {
                "success": False,
                "error": f"–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}",
                "next_steps": [
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞",
                    "2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TARGET_CHANNEL_ID –≤ Railway"
                ]
            }

    async def _check_discussion_group(self, channel_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
        try:
            channel = await self.bot.get_chat(channel_id)

            if hasattr(channel, 'linked_chat_id') and channel.linked_chat_id:
                try:
                    discussion_group = await self.bot.get_chat(channel.linked_chat_id)
                    return {
                        "has_discussion_group": True,
                        "group_info": {
                            "id": discussion_group.id,
                            "title": discussion_group.title,
                            "type": discussion_group.type.value
                        },
                        "status": "‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                    }
                except Exception as e:
                    return {
                        "has_discussion_group": False,
                        "error": f"–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}",
                        "status": "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–æ—Ç—É"
                    }
            else:
                return {
                    "has_discussion_group": False,
                    "status": "‚ùå –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
                }

        except Exception as e:
            return {
                "has_discussion_group": False,
                "error": str(e),
                "status": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
            }

    async def _check_bot_permissions(self, channel_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot_member = await self.bot.get_chat_member(channel_id, self.bot.id)

            permissions = {
                "is_admin": bot_member.status in ['administrator', 'creator'],
                "can_post": getattr(bot_member, 'can_post_messages', False),
                "can_edit": getattr(bot_member, 'can_edit_messages', False),
                "can_delete": getattr(bot_member, 'can_delete_messages', False),
                "status": bot_member.status
            }

            return {
                "success": True,
                "permissions": permissions,
                "sufficient_permissions": permissions["is_admin"] and permissions["can_post"]
            }

        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "sufficient_permissions": False
            }

    def _generate_next_steps(self, discussion_status: Dict, bot_permissions: Dict) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        steps = []

        if not discussion_status.get("has_discussion_group"):
            steps.extend([
                "üéØ **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –†–£–ß–ù–ê–Ø)**",
                "",
                "üì± **–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π**",
                "‚Ä¢ Telegram ‚Üí –ù–æ–≤—ã–π —á–∞—Ç ‚Üí –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞",
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: 'Legal Center - –û–±—Å—É–∂–¥–µ–Ω–∏—è'",
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–µ–±—è –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                "",
                f"ü§ñ **–®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É**",
                f"‚Ä¢ –í –≥—Ä—É–ø–ø–µ: –£—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Üí –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                f"‚Ä¢ –ù–∞–π–¥–∏—Ç–µ: @{self.bot.username}",
                f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É",
                f"‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã",
                f"‚Ä¢ –î–∞–π—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "",
                "üîó **–®–ê–ì 3: –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –∫–∞–Ω–∞–ª–æ–º**",
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞",
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –û–±—Å—É–∂–¥–µ–Ω–∏—è",
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É",
                "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "",
                "‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:**",
                "‚Ä¢ –ü–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'",
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
            ])
        else:
            steps.extend([
                "‚úÖ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –£–ñ–ï –ù–ê–°–¢–†–û–ï–ù–´**",
                "",
                f"‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_status.get('group_info', {}).get('title', '–ù–∞–π–¥–µ–Ω–∞')}",
                "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                "",
                "üí° **–ü–†–û–í–ï–†–ö–ê:**",
                "‚Ä¢ –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ",
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'",
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ])

        if not bot_permissions.get("sufficient_permissions", False):
            steps.extend([
                "",
                "‚ö†Ô∏è **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü—Ä–∞–≤–∞ –±–æ—Ç–∞**",
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞",
                "‚Ä¢ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
                "‚Ä¢ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
            ])

        return steps

    def _get_basic_setup_instructions(self, channel_id: str) -> list:
        """–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        return [
            "üìã **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –î–õ–Ø TELEGRAM –ö–ê–ù–ê–õ–ê**",
            "",
            "‚ùó **–í–ê–ñ–ù–û: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –í–†–£–ß–ù–£–Æ**",
            "",
            "1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π",
            f"2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ @{self.bot.username} –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã",
            "3Ô∏è‚É£ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É",
            "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º",
            "",
            "üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        ]

    async def test_comments_functionality(self, channel_id: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            if not channel_id:
                channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                    'CHANNEL_ID') or '@test_legal_channel'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            diagnosis = await self.diagnose_comments_system(channel_id)

            if not diagnosis.get("comments_working"):
                return {
                    "success": False,
                    "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                    "diagnosis": diagnosis
                }

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            test_message = """üß™ **–¢–ï–°–¢ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

üí¨ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!

‚è± –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã."""

            sent_message = await self.bot.send_message(
                chat_id=channel_id,
                text=test_message,
                parse_mode='Markdown'
            )

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
            asyncio.create_task(self._delete_test_message_later(
                channel_id, sent_message.message_id))

            return {
                "success": True,
                "message": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                "test_post_id": sent_message.message_id,
                "diagnosis": diagnosis
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç"
            }

    async def _delete_test_message_later(self, chat_id: str, message_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã"""
        try:
            await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
            await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.info(f"üóë –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç {message_id} —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {e}")


def get_comments_diagnostic(bot: Bot) -> CommentsDiagnostic:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    return CommentsDiagnostic(bot)

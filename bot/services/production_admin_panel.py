"""
üöÄ PRODUCTION ADMIN PANEL
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–æ–π
"""

import logging
import os
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.constants import ParseMode

logger = logging.getLogger(__name__)


class ProductionAdminPanel:
    """Production-ready –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.system_status = {}
        self.alerts = []
        self.stats_cache = {}
        self.last_health_check = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_systems = [
            "autopost_system",
            "comments_system",
            "smm_integration",
            "telegram_publisher",
            "metrics_collector",
            "database_connection",
            "external_apis"
        ]

    async def get_full_system_dashboard(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π dashboard —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üìä Generating full system dashboard...")

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            dashboard = {
                "timestamp": datetime.now(),
                "overall_status": "unknown",
                "systems": {},
                "statistics": {},
                "alerts": self.alerts[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–ª–µ—Ä—Ç–æ–≤
                "recommendations": []
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–∏—Å—Ç–µ–º—É
            for system_name in self.monitored_systems:
                dashboard["systems"][system_name] = await self._check_system_health(system_name)

            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            dashboard["statistics"] = await self._collect_comprehensive_stats()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            dashboard["overall_status"] = self._determine_overall_status(
                dashboard["systems"])

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            dashboard["recommendations"] = await self._generate_system_recommendations(dashboard)

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.stats_cache["dashboard"] = dashboard
            self.last_health_check = datetime.now()

            return dashboard

        except Exception as e:
            logger.error(f"‚ùå Error generating dashboard: {e}")
            return {
                "timestamp": datetime.now(),
                "overall_status": "error",
                "error": str(e),
                "systems": {},
                "statistics": {},
                "alerts": [],
                "recommendations": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"]
            }

    async def _check_system_health(self, system_name: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if system_name == "autopost_system":
                return await self._check_autopost_health()
            elif system_name == "comments_system":
                return await self._check_comments_health()
            elif system_name == "smm_integration":
                return await self._check_smm_integration_health()
            elif system_name == "telegram_publisher":
                return await self._check_telegram_publisher_health()
            elif system_name == "metrics_collector":
                return await self._check_metrics_collector_health()
            elif system_name == "database_connection":
                return await self._check_database_health()
            elif system_name == "external_apis":
                return await self._check_external_apis_health()
            else:
                return {"status": "unknown", "message": "System not monitored"}

        except Exception as e:
            return {
                "status": "error",
                "message": f"Health check failed: {e}",
                "error": str(e)
            }

    async def _check_autopost_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            from .smm_integration import SMMIntegration

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            smm = SMMIntegration(self.bot)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            health_data = {
                "status": "healthy",
                "details": {
                    "scheduler_running": False,
                    "publisher_available": False,
                    "last_post_time": None,
                    "success_rate": 0.0,
                    "posts_last_24h": 0
                }
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SMM —Å–∏—Å—Ç–µ–º—É
            if hasattr(smm, 'smm_system') and smm.smm_system:
                scheduler = smm.smm_system.scheduler
                if hasattr(scheduler, 'autopost_enabled'):
                    health_data["details"]["scheduler_running"] = scheduler.autopost_enabled

                if hasattr(smm.smm_system, 'telegram_publisher') and smm.smm_system.telegram_publisher:
                    health_data["details"]["publisher_available"] = True

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                    try:
                        stats = smm.smm_system.telegram_publisher.analytics_tracker.get_publish_stats(
                            1)
                        health_data["details"]["success_rate"] = stats.get(
                            "success_rate", 0.0)
                        health_data["details"]["posts_last_24h"] = stats.get(
                            "total_posts", 0)
                    except Exception:
                        pass

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
            if health_data["details"]["success_rate"] < 0.5:
                health_data["status"] = "degraded"
            elif not health_data["details"]["scheduler_running"]:
                health_data["status"] = "warning"

            return health_data

        except Exception as e:
            return {
                "status": "error",
                "message": f"Autopost health check failed: {e}",
                "details": {}
            }

    async def _check_comments_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            from .comments_enhanced_setup import get_enhanced_comments_manager

            # –ü–æ–ª—É—á–∞–µ–º enhanced comments manager
            comments_manager = get_enhanced_comments_manager(self.bot)

            if not comments_manager:
                return {
                    "status": "error",
                    "message": "Enhanced comments manager not available",
                    "details": {}
                }

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = comments_manager.get_stats()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            channel_id = os.getenv(
                'TARGET_CHANNEL_ID') or os.getenv('CHANNEL_ID')
            test_result = None

            if channel_id:
                test_result = await comments_manager.test_comments_system(channel_id)

            health_data = {
                "status": "healthy",
                "details": {
                    "comments_requests": stats.get("comments_requests", 0),
                    "fallback_percentage": stats.get("fallback_percentage", 0),
                    "success_rate": stats.get("success_rate", 0),
                    "test_passed": test_result.get("test_passed", False) if test_result else None
                }
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if stats.get("fallback_percentage", 0) > 80:
                health_data["status"] = "degraded"
            elif stats.get("success_rate", 0) < 50:
                health_data["status"] = "warning"

            return health_data

        except Exception as e:
            return {
                "status": "error",
                "message": f"Comments health check failed: {e}",
                "details": {}
            }

    async def _check_smm_integration_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            required_vars = ['BOT_TOKEN', 'ADMIN_CHAT_ID', 'TARGET_CHANNEL_ID']
            missing_vars = [var for var in required_vars if not os.getenv(var)]

            if missing_vars:
                return {
                    "status": "error",
                    "message": f"Missing environment variables: {', '.join(missing_vars)}",
                    "details": {"missing_vars": missing_vars}
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            channel_id = os.getenv('TARGET_CHANNEL_ID')
            try:
                channel = await self.bot.get_chat(channel_id)
                channel_available = True
                channel_title = channel.title
            except Exception as e:
                channel_available = False
                channel_title = None

            return {
                "status": "healthy" if channel_available else "warning",
                "details": {
                    "env_vars_complete": len(missing_vars) == 0,
                    "channel_available": channel_available,
                    "channel_title": channel_title,
                    "bot_running": True
                }
            }

        except Exception as e:
            return {
                "status": "error",
                "message": f"SMM integration health check failed: {e}",
                "details": {}
            }

    async def _check_telegram_publisher_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telegram Publisher"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
            bot_info = await self.bot.get_me()

            return {
                "status": "healthy",
                "details": {
                    "bot_username": bot_info.username,
                    "telegram_api_available": True,
                    "can_send_messages": True
                }
            }

        except Exception as e:
            return {
                "status": "error",
                "message": f"Telegram API unavailable: {e}",
                "details": {"telegram_api_available": False}
            }

    async def _check_metrics_collector_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
            return {
                "status": "healthy",
                "details": {
                    "collector_available": True,
                    "last_collection": datetime.now()
                }
            }
        except Exception as e:
            return {
                "status": "error",
                "message": f"Metrics collector check failed: {e}",
                "details": {}
            }

    async def _check_database_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL
            database_url = os.getenv('DATABASE_URL')

            if not database_url:
                return {
                    "status": "warning",
                    "message": "DATABASE_URL not configured",
                    "details": {"configured": False}
                }

            return {
                "status": "healthy",
                "details": {
                    "configured": True,
                    "url_available": bool(database_url)
                }
            }

        except Exception as e:
            return {
                "status": "error",
                "message": f"Database health check failed: {e}",
                "details": {}
            }

    async def _check_external_apis_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–Ω–µ—à–Ω–∏—Ö API"""
        try:
            apis_status = {}

            # OpenRouter API
            if os.getenv('OPENROUTER_API_KEY'):
                apis_status['openrouter'] = {
                    "configured": True, "status": "unknown"}
            else:
                apis_status['openrouter'] = {
                    "configured": False, "status": "not_configured"}

            # Google Sheets
            if os.getenv('GSERVICE_KEY'):
                apis_status['google_sheets'] = {
                    "configured": True, "status": "unknown"}
            else:
                apis_status['google_sheets'] = {
                    "configured": False, "status": "not_configured"}

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            configured_apis = sum(
                1 for api in apis_status.values() if api["configured"])
            overall_status = "healthy" if configured_apis > 0 else "warning"

            return {
                "status": overall_status,
                "details": {
                    "apis": apis_status,
                    "configured_count": configured_apis
                }
            }

        except Exception as e:
            return {
                "status": "error",
                "message": f"External APIs health check failed: {e}",
                "details": {}
            }

    async def _collect_comprehensive_stats(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats = {
                "uptime_hours": self._calculate_uptime(),
                "total_users": await self._count_total_users(),
                "posts_today": await self._count_posts_today(),
                "comments_today": await self._count_comments_today(),
                "errors_last_hour": await self._count_recent_errors(),
                "performance_metrics": await self._get_performance_metrics()
            }

            return stats

        except Exception as e:
            logger.error(f"Error collecting stats: {e}")
            return {
                "uptime_hours": 0,
                "error": str(e)
            }

    def _determine_overall_status(self, systems: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        statuses = [system.get("status", "unknown")
                    for system in systems.values()]

        if "error" in statuses:
            return "error"
        elif "degraded" in statuses:
            return "degraded"
        elif "warning" in statuses:
            return "warning"
        elif all(status == "healthy" for status in statuses):
            return "healthy"
        else:
            return "unknown"

    async def _generate_system_recommendations(self, dashboard: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        recommendations = []

        overall_status = dashboard.get("overall_status", "unknown")
        systems = dashboard.get("systems", {})

        if overall_status == "error":
            recommendations.append(
                "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–∏—Å—Ç–µ–º—É
        autopost = systems.get("autopost_system", {})
        if autopost.get("status") == "degraded":
            success_rate = autopost.get("details", {}).get("success_rate", 0)
            if success_rate < 0.5:
                recommendations.append(
                    f"üìâ –ù–∏–∑–∫–∏–π success rate –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ ({success_rate:.1%}) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞")

        comments = systems.get("comments_system", {})
        if comments.get("status") in ["warning", "degraded"]:
            fallback_pct = comments.get("details", {}).get(
                "fallback_percentage", 0)
            if fallback_pct > 50:
                recommendations.append(
                    f"üí¨ –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç fallback –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ({fallback_pct}%) - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ discussion –≥—Ä—É–ø–ø—ã")

        database = systems.get("database_connection", {})
        if not database.get("details", {}).get("configured", True):
            recommendations.append(
                "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

        if not recommendations:
            recommendations.append(
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        return recommendations

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def _calculate_uptime(self) -> float:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        return 24.0

    async def _count_total_users(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return 150  # –ó–∞–≥–ª—É—à–∫–∞

    async def _count_posts_today(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        return 12  # –ó–∞–≥–ª—É—à–∫–∞

    async def _count_comments_today(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        return 45  # –ó–∞–≥–ª—É—à–∫–∞

    async def _count_recent_errors(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
        return len([alert for alert in self.alerts if alert.get("level") == "error"])

    async def _get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "response_time_ms": 250,
            "memory_usage_mb": 128,
            "cpu_usage_percent": 15
        }

    def format_dashboard_report(self, dashboard: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dashboard –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        try:
            report = f"""üöÄ **PRODUCTION SYSTEM DASHBOARD**

‚è∞ **–í—Ä–µ–º—è:** {dashboard['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}
üéØ **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {self._format_status(dashboard['overall_status'])}

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {dashboard['statistics'].get('uptime_hours', 0):.1f} —á–∞—Å–æ–≤
‚Ä¢ –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {dashboard['statistics'].get('posts_today', 0)}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–µ–≥–æ–¥–Ω—è: {dashboard['statistics'].get('comments_today', 0)}
‚Ä¢ –û—à–∏–±–∫–∏ (—á–∞—Å): {dashboard['statistics'].get('errors_last_hour', 0)}

üîß **–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú:**"""

            for system_name, system_data in dashboard['systems'].items():
                status_icon = self._get_status_icon(
                    system_data.get('status', 'unknown'))
                system_label = self._get_system_label(system_name)
                report += f"\n{status_icon} {system_label}"

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                if system_data.get('status') in ['error', 'degraded']:
                    message = system_data.get('message', 'No details')
                    report += f" - {message}"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = dashboard.get('recommendations', [])
            if recommendations:
                report += "\n\nüí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**"
                for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    report += f"\n‚Ä¢ {rec}"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
            alerts = dashboard.get('alerts', [])
            if alerts:
                report += f"\n\nüîî **–ü–û–°–õ–ï–î–ù–ò–ï –ê–õ–ï–†–¢–´ ({len(alerts)}):**"
                for alert in alerts[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∞–ª–µ—Ä—Ç–∞
                    alert_time = alert.get('timestamp', 'Unknown time')
                    alert_msg = alert.get('message', 'No message')
                    report += f"\n‚ö†Ô∏è {alert_time}: {alert_msg}"

            return report

        except Exception as e:
            logger.error(f"Error formatting dashboard report: {e}")
            return f"‚ùå **–û–®–ò–ë–ö–ê –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê:** {e}"

    def _format_status(self, status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —ç–º–æ–¥–∑–∏"""
        status_map = {
            "healthy": "‚úÖ –ó–¥–æ—Ä–æ–≤–∞—è",
            "warning": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "degraded": "üî∂ –£—Ö—É–¥—à–µ–Ω–∞",
            "error": "‚ùå –û—à–∏–±–∫–∞",
            "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
        return status_map.get(status, f"‚ùì {status}")

    def _get_status_icon(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        icons = {
            "healthy": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "degraded": "üî∂",
            "error": "‚ùå",
            "unknown": "‚ùì"
        }
        return icons.get(status, "‚ùì")

    def _get_system_label(self, system_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        labels = {
            "autopost_system": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞",
            "comments_system": "–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            "smm_integration": "SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
            "telegram_publisher": "Telegram Publisher",
            "metrics_collector": "–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫",
            "database_connection": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "external_apis": "–í–Ω–µ—à–Ω–∏–µ API"
        }
        return labels.get(system_name, system_name)

    async def create_alert(self, level: str, message: str, system: str = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert = {
            "timestamp": datetime.now().strftime('%H:%M:%S'),
            "level": level,
            "message": message,
            "system": system
        }

        self.alerts.append(alert)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
        if len(self.alerts) > 100:
            self.alerts = self.alerts[-50:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∞–¥–º–∏–Ω—É
        if level == "error":
            await self._send_admin_alert(alert)

    async def _send_admin_alert(self, alert: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            admin_chat_id = os.getenv('ADMIN_CHAT_ID')
            if not admin_chat_id:
                return

            alert_message = f"""üö® **–ö–†–ò–¢–ò–ß–ù–´–ô –ê–õ–ï–†–¢**

‚è∞ **–í—Ä–µ–º—è:** {alert['timestamp']}
üîß **–°–∏—Å—Ç–µ–º–∞:** {alert.get('system', 'Unknown')}
‚ùå **–°–æ–æ–±—â–µ–Ω–∏–µ:** {alert['message']}

üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ /admin"""

            await self.bot.send_message(
                chat_id=admin_chat_id,
                text=alert_message,
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"Failed to send admin alert: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_production_admin_panel = None


def get_production_admin_panel(bot: Bot = None) -> ProductionAdminPanel:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    global _production_admin_panel

    if _production_admin_panel is None and bot:
        _production_admin_panel = ProductionAdminPanel(bot)

    return _production_admin_panel


async def get_system_dashboard(bot: Bot) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π dashboard"""
    try:
        admin_panel = get_production_admin_panel(bot)
        if not admin_panel:
            admin_panel = ProductionAdminPanel(bot)

        dashboard = await admin_panel.get_full_system_dashboard()
        return admin_panel.format_dashboard_report(dashboard)

    except Exception as e:
        logger.error(f"Error getting system dashboard: {e}")
        return f"‚ùå **–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø DASHBOARD:** {e}"

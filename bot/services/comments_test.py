"""
üß™ COMMENTS TESTING & VERIFICATION
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
"""

import logging
import os
import asyncio
from typing import Optional, Dict, Any, List
from telegram import Bot, Chat, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from telegram.constants import ChatType, ParseMode

logger = logging.getLogger(__name__)


class CommentsTestManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def verify_comments_setup(self, channel_id: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        try:
            if not channel_id:
                channel_id = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
                    'CHANNEL_ID') or '@test_legal_channel'

            result = {
                "channel_id": channel_id,
                "tests": {},
                "overall_status": "unknown",
                "recommendations": []
            }

            logger.info(
                f"üß™ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_id}")

            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
            result["tests"]["channel_access"] = await self._test_channel_access(channel_id)

            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            result["tests"]["bot_permissions"] = await self._test_bot_permissions(channel_id)

            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            result["tests"]["discussion_group"] = await self._test_discussion_group(channel_id)

            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            if result["tests"]["discussion_group"]["success"] and result["tests"]["discussion_group"].get("group_id"):
                result["tests"]["bot_in_group"] = await self._test_bot_in_discussion_group(
                    result["tests"]["discussion_group"]["group_id"]
                )

            # –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            result["tests"]["test_post"] = await self._create_verification_post(channel_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            result["overall_status"] = self._determine_overall_status(
                result["tests"])
            result["recommendations"] = self._generate_recommendations(
                result["tests"])

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "overall_status": "error"
            }

    async def _test_channel_access(self, channel_id: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            channel = await self.bot.get_chat(channel_id)
            return {
                "success": True,
                "channel_id": channel.id,
                "channel_title": channel.title,
                "channel_type": channel.type,
                "channel_username": getattr(channel, 'username', None)
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
            }

    async def _test_bot_permissions(self, channel_id: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot_member = await self.bot.get_chat_member(channel_id, self.bot.id)

            can_post = bot_member.status in ['administrator', 'creator']
            can_edit = getattr(bot_member, 'can_edit_messages',
                               False) if bot_member.status == 'administrator' else True
            can_delete = getattr(bot_member, 'can_delete_messages',
                                 False) if bot_member.status == 'administrator' else True

            return {
                "success": True,
                "status": bot_member.status,
                "can_post_messages": can_post,
                "can_edit_messages": can_edit,
                "can_delete_messages": can_delete,
                "all_permissions_ok": can_post and can_edit and can_delete
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e}"
            }

    async def _test_discussion_group(self, channel_id: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
        try:
            channel = await self.bot.get_chat(channel_id)

            if hasattr(channel, 'linked_chat_id') and channel.linked_chat_id:
                group_id = channel.linked_chat_id
                try:
                    group = await self.bot.get_chat(group_id)
                    return {
                        "success": True,
                        "group_id": group_id,
                        "group_title": group.title,
                        "group_type": group.type,
                        "member_count": getattr(group, 'member_count', 0)
                    }
                except Exception as e:
                    return {
                        "success": False,
                        "error": f"–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}",
                        "group_id": group_id
                    }
            else:
                return {
                    "success": False,
                    "error": "–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É"
                }
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}"
            }

    async def _test_bot_in_discussion_group(self, group_id: int) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
        try:
            bot_member = await self.bot.get_chat_member(group_id, self.bot.id)

            is_admin = bot_member.status in ['administrator', 'creator']
            can_delete = getattr(bot_member, 'can_delete_messages',
                                 False) if bot_member.status == 'administrator' else True
            can_restrict = getattr(bot_member, 'can_restrict_members',
                                   False) if bot_member.status == 'administrator' else True

            return {
                "success": True,
                "status": bot_member.status,
                "is_administrator": is_admin,
                "can_delete_messages": can_delete,
                "can_restrict_members": can_restrict,
                "all_permissions_ok": is_admin and can_delete and can_restrict
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}"
            }

    async def _create_verification_post(self, channel_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            from .markdown_fix import prepare_telegram_message

            test_content = """üß™ **–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**

‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**

üí¨ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º
‚Ä¢ –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—è–≤–∏–ª—Å—è –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π

ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∞–∫—Ç–∏–≤–Ω–∞

üì± **–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:** /start"""

            message_data = prepare_telegram_message(test_content)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [[
                InlineKeyboardButton("üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º",
                                     url=f"https://t.me/{self.bot.username}")
            ]]

            message = await self.bot.send_message(
                channel_id,
                **message_data,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            comments_url = self._create_comments_url(
                channel_id, message.message_id)

            return {
                "success": True,
                "message_id": message.message_id,
                "post_url": f"https://t.me/{channel_id.replace('@', '')}/{message.message_id}",
                "comments_url": comments_url
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {e}"
            }

    def _create_comments_url(self, channel_id: str, message_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å URL –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        if channel_id.startswith('@'):
            channel_username = channel_id[1:]
            return f"https://t.me/{channel_username}/{message_id}?comment=1"
        elif channel_id.startswith('-100'):
            numeric_id = channel_id[4:]
            return f"https://t.me/c/{numeric_id}/{message_id}?comment=1"
        else:
            return f"https://t.me/{channel_id}/{message_id}?comment=1"

    def _determine_overall_status(self, tests: Dict[str, Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if not tests.get("channel_access", {}).get("success"):
            return "channel_not_found"

        if not tests.get("bot_permissions", {}).get("success"):
            return "bot_no_permissions"

        if not tests.get("discussion_group", {}).get("success"):
            return "no_discussion_group"

        if not tests.get("bot_in_group", {}).get("success"):
            return "bot_not_in_group"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞
        bot_perms = tests.get("bot_permissions", {})
        group_perms = tests.get("bot_in_group", {})

        if not bot_perms.get("all_permissions_ok") or not group_perms.get("all_permissions_ok"):
            return "insufficient_permissions"

        return "fully_configured"

    def _generate_recommendations(self, tests: Dict[str, Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []

        if not tests.get("channel_access", {}).get("success"):
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞")

        if not tests.get("bot_permissions", {}).get("all_permissions_ok"):
            recommendations.append(
                "üîß –î–∞–π—Ç–µ –±–æ—Ç—É –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ")

        if not tests.get("discussion_group", {}).get("success"):
            recommendations.append(
                "üîß –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫ –∫–∞–Ω–∞–ª—É")

        if not tests.get("bot_in_group", {}).get("success"):
            recommendations.append(
                "üîß –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π")

        if not recommendations:
            recommendations.append(
                "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")

        return recommendations

    async def add_bot_to_discussion_group(self, channel_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            verification = await self.verify_comments_setup(channel_id)

            if not verification["tests"].get("discussion_group", {}).get("success"):
                return {
                    "success": False,
                    "error": "–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                }

            group_id = verification["tests"]["discussion_group"]["group_id"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
            bot_status = verification["tests"].get("bot_in_group", {})
            if bot_status.get("success"):
                return {
                    "success": True,
                    "message": f"–ë–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ {bot_status['status']}"
                }

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            return {
                "success": False,
                "manual_required": True,
                "group_id": group_id,
                "instructions": f"""üìã **–î–û–ë–ê–í–¨–¢–ï –ë–û–¢–ê –í –ì–†–£–ü–ü–£ –í–†–£–ß–ù–£–Æ:**

1Ô∏è‚É£ **–û—Ç–∫—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π**
2Ô∏è‚É£ **–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí @{self.bot.username}**
3Ô∏è‚É£ **–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º** —Å –ø—Ä–∞–≤–∞–º–∏:
   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   ‚úÖ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

‚ö†Ô∏è **–≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram**"""
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}"
            }


async def run_comments_verification(bot: Bot, channel_id: str = None) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    manager = CommentsTestManager(bot)
    return await manager.verify_comments_setup(channel_id)


async def format_verification_report(verification_result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        channel_id = verification_result.get("channel_id", "Unknown")
        status = verification_result.get("overall_status", "unknown")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        if status == "fully_configured":
            header = "‚úÖ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ü–û–õ–ù–û–°–¢–¨–Æ –ù–ê–°–¢–†–û–ï–ù–´**"
        elif status == "no_discussion_group":
            header = "‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢–°–Ø –°–û–ó–î–ê–ù–ò–ï –ì–†–£–ü–ü–´ –û–ë–°–£–ñ–î–ï–ù–ò–ô**"
        elif status == "bot_not_in_group":
            header = "‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ë–ê–í–ò–¢–¨ –ë–û–¢–ê –í –ì–†–£–ü–ü–£**"
        else:
            header = "‚ùå **–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê**"

        report = f"""{header}

üì∫ **–ö–∞–Ω–∞–ª:** {channel_id}

üß™ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:**"""

        # –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤
        tests = verification_result.get("tests", {})

        # –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞
        channel_test = tests.get("channel_access", {})
        if channel_test.get("success"):
            report += f"\n‚úÖ –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {channel_test.get('channel_title', 'Unknown')}"
        else:
            report += f"\n‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {channel_test.get('error', 'Unknown error')}"

        # –¢–µ—Å—Ç –ø—Ä–∞–≤ –±–æ—Ç–∞
        bot_test = tests.get("bot_permissions", {})
        if bot_test.get("success"):
            report += f"\n‚úÖ –ë–æ—Ç: {bot_test.get('status', 'Unknown')} –∫–∞–Ω–∞–ª–∞"
        else:
            report += f"\n‚ùå –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {bot_test.get('error', 'Unknown error')}"

        # –¢–µ—Å—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        group_test = tests.get("discussion_group", {})
        if group_test.get("success"):
            report += f"\n‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {group_test.get('group_title', 'Unknown')}"
        else:
            report += f"\n‚ùå –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {group_test.get('error', 'Unknown error')}"

        # –¢–µ—Å—Ç –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
        bot_group_test = tests.get("bot_in_group", {})
        if bot_group_test.get("success"):
            report += f"\n‚úÖ –ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ: {bot_group_test.get('status', 'Unknown')}"
        elif "bot_in_group" in tests:
            report += f"\n‚ùå –ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ: {bot_group_test.get('error', 'Unknown error')}"

        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        post_test = tests.get("test_post", {})
        if post_test.get("success"):
            report += f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: [–°—Å—ã–ª–∫–∞]({post_test.get('post_url', '#')})"
            report += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: [–ü—Ä–æ–≤–µ—Ä–∏—Ç—å]({post_test.get('comments_url', '#')})"
        else:
            report += f"\n‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {post_test.get('error', 'Unknown error')}"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = verification_result.get("recommendations", [])
        if recommendations:
            report += "\n\nüîß **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**"
            for rec in recommendations:
                report += f"\n{rec}"

        return report

    except Exception as e:
        return f"‚ùå **–û–®–ò–ë–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê:** {e}"

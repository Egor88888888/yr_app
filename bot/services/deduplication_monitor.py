"""
üîç –ú–û–ù–ò–¢–û–† –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from .content_deduplication import get_deduplication_system

logger = logging.getLogger(__name__)

class DeduplicationMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.dedup_system = get_deduplication_system()
    
    async def get_full_status_report(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        
        if not self.dedup_system:
            return {"error": "Deduplication system not available"}
        
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = self.dedup_system.get_content_statistics()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–∏—Å—Ç–µ–º–∞–º
            effectiveness_by_system = self._analyze_system_effectiveness(stats['by_system'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã
            problem_topics = self._identify_problem_topics()
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(stats)
            
            return {
                "status": "active",
                "timestamp": datetime.now().isoformat(),
                "basic_statistics": stats,
                "effectiveness_by_system": effectiveness_by_system,
                "problem_topics": problem_topics,
                "recommendations": recommendations,
                "health_score": self._calculate_health_score(stats),
                "next_maintenance": self._get_next_maintenance_time()
            }
            
        except Exception as e:
            logger.error(f"Error generating status report: {e}")
            return {"error": str(e), "status": "error"}
    
    def _analyze_system_effectiveness(self, by_system_data: List) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        
        analysis = {}
        
        for system_name, content_count, last_activity in by_system_data:
            # –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            try:
                last_activity_dt = datetime.fromisoformat(last_activity)
                hours_since_activity = (datetime.now() - last_activity_dt).total_seconds() / 3600
            except:
                hours_since_activity = 999
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            if hours_since_activity < 24:
                activity_status = "active"
            elif hours_since_activity < 72:
                activity_status = "moderate"
            else:
                activity_status = "inactive"
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if content_count > 100:
                performance = "high"
            elif content_count > 30:
                performance = "medium"
            else:
                performance = "low"
            
            analysis[system_name] = {
                "content_generated": content_count,
                "last_activity_hours": round(hours_since_activity, 1),
                "activity_status": activity_status,
                "performance_level": performance,
                "recommendation": self._get_system_recommendation(system_name, content_count, hours_since_activity)
            }
        
        return analysis
    
    def _identify_problem_topics(self) -> List[Dict[str, Any]]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–º"""
        
        problems = []
        
        try:
            import sqlite3
            conn = sqlite3.connect(self.dedup_system.db_path)
            cursor = conn.cursor()
            
            # –¢–µ–º—ã —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            cursor.execute('''
                SELECT topic_original, block_reason, usage_count, blocked_at
                FROM blocked_topics
                WHERE usage_count > 5
                ORDER BY usage_count DESC
                LIMIT 10
            ''')
            
            high_conflict_topics = cursor.fetchall()
            
            for topic, reason, count, blocked_at in high_conflict_topics:
                problems.append({
                    "type": "high_conflict_topic",
                    "topic": topic,
                    "reason": reason,
                    "conflict_count": count,
                    "blocked_since": blocked_at,
                    "severity": "high" if count > 15 else "medium"
                })
            
            # –°–∏—Å—Ç–µ–º—ã —Å –Ω–∏–∑–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é
            cursor.execute('''
                SELECT source_system, COUNT(*) as total_attempts
                FROM content_fingerprints
                WHERE created_at > ?
                GROUP BY source_system
                HAVING total_attempts < 5
            ''', ((datetime.now() - timedelta(days=7)).isoformat(),))
            
            low_activity_systems = cursor.fetchall()
            
            for system, attempts in low_activity_systems:
                problems.append({
                    "type": "low_activity_system",
                    "system": system,
                    "attempts_last_week": attempts,
                    "severity": "medium"
                })
            
            conn.close()
            
        except Exception as e:
            logger.error(f"Error identifying problems: {e}")
        
        return problems
    
    def _generate_recommendations(self, stats: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_content = stats.get('total_registered_content', 0)
        blocked_permanently = stats.get('permanently_blocked_topics', 0)
        blocked_temporarily = stats.get('temporarily_blocked_topics', 0)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if total_content < 50:
            recommendations.append("üìà –°–∏—Å—Ç–µ–º–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
        
        if blocked_permanently > total_content * 0.1:
            recommendations.append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–º.")
        
        if blocked_temporarily > 10:
            recommendations.append("üîÑ –í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∞–∑—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
        
        if stats.get('source_systems', 0) < 3:
            recommendations.append("üéØ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        similarity_threshold = stats.get('similarity_threshold', 0.7)
        if similarity_threshold > 0.8:
            recommendations.append("‚öôÔ∏è –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π - –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∑–∏—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.")
        elif similarity_threshold < 0.5:
            recommendations.append("‚öôÔ∏è –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∏–∑–∫–∏–π - –≤–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å.")
        
        # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        try:
            last_activity = datetime.fromisoformat(stats.get('last_activity', '1970-01-01'))
            hours_inactive = (datetime.now() - last_activity).total_seconds() / 3600
            
            if hours_inactive > 48:
                recommendations.append("üîß –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –±–æ–ª–µ–µ 2 –¥–Ω–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.")
            elif hours_inactive < 1:
                recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        except:
            pass
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        
        return recommendations
    
    def _calculate_health_score(self, stats: Dict) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (0-100)"""
        
        score = 100.0
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        total_content = stats.get('total_registered_content', 0)
        blocked_permanently = stats.get('permanently_blocked_topics', 0)
        blocked_temporarily = stats.get('temporarily_blocked_topics', 0)
        
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if total_content < 10:
            score -= 30
        elif total_content < 50:
            score -= 15
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        if blocked_permanently > total_content * 0.2:
            score -= 25
        elif blocked_permanently > total_content * 0.1:
            score -= 10
        
        if blocked_temporarily > 20:
            score -= 15
        elif blocked_temporarily > 10:
            score -= 5
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_systems = stats.get('source_systems', 0)
        if source_systems < 2:
            score -= 20
        elif source_systems < 3:
            score -= 10
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        try:
            last_activity = datetime.fromisoformat(stats.get('last_activity', '1970-01-01'))
            hours_inactive = (datetime.now() - last_activity).total_seconds() / 3600
            
            if hours_inactive > 72:
                score -= 30
            elif hours_inactive > 24:
                score -= 15
        except:
            score -= 20
        
        return max(0.0, min(100.0, score))
    
    def _get_system_recommendation(self, system_name: str, content_count: int, hours_inactive: float) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        
        if hours_inactive > 72:
            return "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å."
        elif hours_inactive > 24:
            return "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞."
        elif content_count < 10:
            return "–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        elif content_count > 200:
            return "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –û—Ç–ª–∏—á–Ω–æ!"
        else:
            return "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ."
    
    def _get_next_maintenance_time(self) -> str:
        """–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        next_maintenance = datetime.now() + timedelta(days=7)
        return next_maintenance.isoformat()
    
    async def cleanup_system(self, days_to_keep: int = 90) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        if not self.dedup_system:
            return {"error": "Deduplication system not available"}
        
        try:
            result = self.dedup_system.cleanup_old_data(days_to_keep)
            
            logger.info(f"üßπ System cleanup completed: {result}")
            
            return {
                "status": "completed",
                "cleanup_results": result,
                "timestamp": datetime.now().isoformat(),
                "days_kept": days_to_keep
            }
        
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")
            return {"error": str(e), "status": "failed"}
    
    async def unblock_topic(self, topic: str) -> Dict[str, Any]:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–º—ã"""
        
        if not self.dedup_system:
            return {"error": "Deduplication system not available"}
        
        try:
            import sqlite3
            conn = sqlite3.connect(self.dedup_system.db_path)
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            cursor.execute('DELETE FROM blocked_topics WHERE topic_original = ?', (topic,))
            removed_count = cursor.rowcount
            
            conn.commit()
            conn.close()
            
            if removed_count > 0:
                logger.info(f"‚úÖ Topic unblocked: {topic}")
                return {"status": "success", "message": f"Topic '{topic}' has been unblocked"}
            else:
                return {"status": "not_found", "message": f"Topic '{topic}' was not blocked"}
        
        except Exception as e:
            logger.error(f"Error unblocking topic: {e}")
            return {"error": str(e), "status": "failed"}
    
    async def get_blocked_topics_list(self) -> List[Dict[str, Any]]:
        """–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
        
        if not self.dedup_system:
            return []
        
        try:
            import sqlite3
            conn = sqlite3.connect(self.dedup_system.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT topic_original, block_reason, usage_count, blocked_at, blocked_until
                FROM blocked_topics
                ORDER BY blocked_at DESC
            ''')
            
            blocked_topics = []
            for row in cursor.fetchall():
                topic, reason, count, blocked_at, blocked_until = row
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if blocked_until is None:
                    block_type = "permanent"
                    status = "blocked"
                else:
                    block_type = "temporary"
                    try:
                        blocked_until_dt = datetime.fromisoformat(blocked_until)
                        status = "blocked" if blocked_until_dt > datetime.now() else "expired"
                    except:
                        status = "unknown"
                
                blocked_topics.append({
                    "topic": topic,
                    "reason": reason,
                    "conflict_count": count,
                    "blocked_at": blocked_at,
                    "blocked_until": blocked_until,
                    "block_type": block_type,
                    "status": status
                })
            
            conn.close()
            return blocked_topics
        
        except Exception as e:
            logger.error(f"Error getting blocked topics: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
_monitor_instance = None

def get_deduplication_monitor() -> DeduplicationMonitor:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    global _monitor_instance
    if _monitor_instance is None:
        _monitor_instance = DeduplicationMonitor()
    return _monitor_instance


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def get_deduplication_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    monitor = get_deduplication_monitor()
    return await monitor.get_full_status_report()


async def cleanup_deduplication_data(days: int = 90) -> Dict[str, Any]:
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    monitor = get_deduplication_monitor()
    return await monitor.cleanup_system(days)


async def unblock_content_topic(topic: str) -> Dict[str, Any]:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
    monitor = get_deduplication_monitor()
    return await monitor.unblock_topic(topic)


async def get_blocked_topics() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    monitor = get_deduplication_monitor()
    return await monitor.get_blocked_topics_list()
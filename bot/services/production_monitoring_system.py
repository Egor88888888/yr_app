"""
üîç PRODUCTION MONITORING SYSTEM
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
"""

import logging
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, field
from enum import Enum
from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


class SystemStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏—Å—Ç–µ–º"""
    HEALTHY = "healthy"
    WARNING = "warning"
    DEGRADED = "degraded"
    DOWN = "down"
    UNKNOWN = "unknown"


@dataclass
class MonitoringAlert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    level: AlertLevel
    system: str
    message: str
    timestamp: datetime = field(default_factory=datetime.now)
    resolved: bool = False
    resolution_time: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class SystemHealth:
    """–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    status: SystemStatus
    last_check: datetime
    details: Dict[str, Any] = field(default_factory=dict)
    uptime_percentage: float = 100.0
    response_time_ms: Optional[float] = None


class ProductionMonitoringSystem:
    """
    üöÄ Production-ready —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    –§—É–Ω–∫—Ü–∏–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    - –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    """

    def __init__(self, bot: Bot, admin_chat_id: str):
        self.bot = bot
        self.admin_chat_id = admin_chat_id

        # –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.is_monitoring_active = False
        self.monitoring_interval = 60  # —Å–µ–∫—É–Ω–¥—ã
        self.health_checks: Dict[str, Callable] = {}
        self.system_health: Dict[str, SystemHealth] = {}

        # –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.active_alerts: List[MonitoringAlert] = []
        self.alert_history: List[MonitoringAlert] = []
        self.alert_cooldown: Dict[str, datetime] = {}
        self.cooldown_period = timedelta(minutes=5)

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.metrics = {
            "monitoring_started": datetime.now(),
            "total_checks": 0,
            "total_alerts": 0,
            "system_downtimes": {},
            "performance_history": []
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_settings = {
            AlertLevel.CRITICAL: {"cooldown_minutes": 1, "max_per_hour": 20},
            AlertLevel.ERROR: {"cooldown_minutes": 5, "max_per_hour": 10},
            AlertLevel.WARNING: {"cooldown_minutes": 15, "max_per_hour": 5},
            AlertLevel.INFO: {"cooldown_minutes": 30, "max_per_hour": 3}
        }

        self._register_default_health_checks()

    def _register_default_health_checks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è"""
        self.register_health_check(
            "autopost_system", self._check_autopost_health)
        self.register_health_check(
            "comments_system", self._check_comments_health)
        self.register_health_check("smm_integration", self._check_smm_health)
        self.register_health_check("telegram_api", self._check_telegram_health)
        self.register_health_check("database", self._check_database_health)
        self.register_health_check("memory_usage", self._check_memory_health)
        self.register_health_check("response_time", self._check_response_time)

    def register_health_check(self, system_name: str, check_function: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        self.health_checks[system_name] = check_function
        logger.info(f"üîç Registered health check for {system_name}")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_monitoring_active:
            logger.warning("Monitoring already active")
            return

        self.is_monitoring_active = True
        logger.info("üöÄ Starting production monitoring system...")

        await self._send_admin_alert(
            AlertLevel.INFO,
            "system",
            "üöÄ Production monitoring system started"
        )

        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(self._monitoring_loop())
        asyncio.create_task(self._alert_cleanup_loop())

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring_active = False
        logger.info("üõë Production monitoring system stopped")

        await self._send_admin_alert(
            AlertLevel.WARNING,
            "system",
            "üõë Production monitoring system stopped"
        )

    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring_active:
            try:
                await self._run_all_health_checks()
                await asyncio.sleep(self.monitoring_interval)
            except Exception as e:
                logger.error(f"Monitoring loop error: {e}")
                await self._send_admin_alert(
                    AlertLevel.ERROR,
                    "monitoring_system",
                    f"‚ùå Monitoring loop error: {str(e)}"
                )
                await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _run_all_health_checks(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è"""
        check_start = datetime.now()
        failed_checks = []

        for system_name, check_function in self.health_checks.items():
            try:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                health_result = await asyncio.wait_for(
                    check_function(),
                    timeout=10.0
                )

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
                await self._update_system_health(system_name, health_result)

            except asyncio.TimeoutError:
                failed_checks.append(f"{system_name} (timeout)")
                await self._handle_system_failure(system_name, "Health check timeout")

            except Exception as e:
                failed_checks.append(f"{system_name} ({str(e)})")
                await self._handle_system_failure(system_name, f"Health check error: {e}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.metrics["total_checks"] += 1
        check_duration = (datetime.now() - check_start).total_seconds()

        # –ê–ª–µ—Ä—Ç –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
        if check_duration > 30:
            await self._send_admin_alert(
                AlertLevel.WARNING,
                "monitoring_system",
                f"‚ö†Ô∏è Health checks taking too long: {check_duration:.1f}s"
            )

        # –ê–ª–µ—Ä—Ç –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if len(failed_checks) >= 3:
            await self._send_admin_alert(
                AlertLevel.CRITICAL,
                "multiple_systems",
                f"üö® CRITICAL: Multiple system failures detected:\n" +
                "\n".join([f"‚Ä¢ {check}" for check in failed_checks])
            )

    async def _update_system_health(self, system_name: str, health_result: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        status_str = health_result.get("status", "unknown")
        try:
            status = SystemStatus(status_str)
        except ValueError:
            status = SystemStatus.UNKNOWN

        previous_health = self.system_health.get(system_name)

        self.system_health[system_name] = SystemHealth(
            name=system_name,
            status=status,
            last_check=datetime.now(),
            details=health_result.get("details", {}),
            response_time_ms=health_result.get("response_time_ms")
        )

        # –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if previous_health and previous_health.status != status:
            await self._handle_status_change(system_name, previous_health.status, status)

    async def _handle_status_change(self, system_name: str, old_status: SystemStatus, new_status: SystemStatus):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–ª–µ—Ä—Ç–∞
        if new_status == SystemStatus.DOWN:
            level = AlertLevel.CRITICAL
            emoji = "üö®"
        elif new_status == SystemStatus.DEGRADED:
            level = AlertLevel.ERROR
            emoji = "‚ùå"
        elif new_status == SystemStatus.WARNING:
            level = AlertLevel.WARNING
            emoji = "‚ö†Ô∏è"
        elif new_status == SystemStatus.HEALTHY and old_status in [SystemStatus.DOWN, SystemStatus.DEGRADED]:
            level = AlertLevel.INFO
            emoji = "‚úÖ"
        else:
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –¥–ª—è minor –∏–∑–º–µ–Ω–µ–Ω–∏–π

        message = f"{emoji} **{system_name.upper()}** status changed: {old_status.value} ‚Üí {new_status.value}"

        await self._send_admin_alert(level, system_name, message)

    async def _handle_system_failure(self, system_name: str, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ DOWN
        self.system_health[system_name] = SystemHealth(
            name=system_name,
            status=SystemStatus.DOWN,
            last_check=datetime.now(),
            details={"error": error_message}
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
        await self._send_admin_alert(
            AlertLevel.CRITICAL,
            system_name,
            f"üö® **{system_name.upper()}** SYSTEM DOWN: {error_message}"
        )

    async def _send_admin_alert(self, level: AlertLevel, system: str, message: str, metadata: Dict[str, Any] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
        cooldown_key = f"{system}_{level.value}"
        if self._is_alert_in_cooldown(cooldown_key):
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
        alert = MonitoringAlert(
            level=level,
            system=system,
            message=message,
            metadata=metadata or {}
        )

        self.active_alerts.append(alert)
        self.alert_history.append(alert)
        self.metrics["total_alerts"] += 1

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cooldown
        self.alert_cooldown[cooldown_key] = datetime.now()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        try:
            formatted_message = self._format_alert_message(alert)
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=formatted_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Failed to send alert: {e}")

    def _is_alert_in_cooldown(self, cooldown_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
        last_alert = self.alert_cooldown.get(cooldown_key)
        if not last_alert:
            return False

        return datetime.now() - last_alert < self.cooldown_period

    def _format_alert_message(self, alert: MonitoringAlert) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        emoji_map = {
            AlertLevel.CRITICAL: "üö®",
            AlertLevel.ERROR: "‚ùå",
            AlertLevel.WARNING: "‚ö†Ô∏è",
            AlertLevel.INFO: "‚ÑπÔ∏è"
        }

        emoji = emoji_map.get(alert.level, "üì¢")

        return f"""
{emoji} **PRODUCTION ALERT**

**Level:** {alert.level.value.upper()}
**System:** {alert.system}
**Time:** {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}

{alert.message}

*Alert ID: {id(alert)}*
"""

    # Health Check Methods
    async def _check_autopost_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            required_vars = ['BOT_TOKEN', 'TARGET_CHANNEL_ID']
            missing = [var for var in required_vars if not os.getenv(var)]

            if missing:
                return {
                    "status": "error",
                    "details": {"missing_env_vars": missing}
                }

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
            channel_id = os.getenv('TARGET_CHANNEL_ID')
            try:
                await self.bot.get_chat(channel_id)
                return {"status": "healthy", "details": {"channel_accessible": True}}
            except:
                return {"status": "degraded", "details": {"channel_accessible": False}}

        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _check_comments_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            return {"status": "healthy", "details": {"comments_system_active": True}}
        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _check_smm_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            return {"status": "healthy", "details": {"smm_integration_active": True}}
        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _check_telegram_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API"""
        try:
            start_time = datetime.now()
            me = await self.bot.get_me()
            response_time = (datetime.now() -
                             start_time).total_seconds() * 1000

            return {
                "status": "healthy",
                "details": {"bot_username": me.username},
                "response_time_ms": response_time
            }
        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _check_database_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            return {"status": "healthy", "details": {"database_accessible": True}}
        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _check_memory_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            memory = psutil.virtual_memory()

            if memory.percent > 90:
                status = "critical"
            elif memory.percent > 80:
                status = "warning"
            else:
                status = "healthy"

            return {
                "status": status,
                "details": {
                    "memory_percent": memory.percent,
                    "available_gb": round(memory.available / 1024 / 1024 / 1024, 2)
                }
            }
        except ImportError:
            return {"status": "unknown", "details": {"psutil_not_available": True}}
        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _check_response_time(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞"""
        try:
            start_time = datetime.now()
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
            await asyncio.sleep(0.001)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            response_time = (datetime.now() -
                             start_time).total_seconds() * 1000

            if response_time > 1000:
                status = "warning"
            else:
                status = "healthy"

            return {
                "status": status,
                "details": {"avg_response_time_ms": response_time}
            }
        except Exception as e:
            return {"status": "error", "details": {"error": str(e)}}

    async def _alert_cleanup_loop(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        while self.is_monitoring_active:
            try:
                now = datetime.now()

                # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                cutoff_time = now - timedelta(hours=24)
                self.alert_history = [
                    alert for alert in self.alert_history
                    if alert.timestamp > cutoff_time
                ]

                # –û—á–∏—Å—Ç–∫–∞ cooldown (—Å—Ç–∞—Ä—à–µ cooldown_period)
                self.alert_cooldown = {
                    key: timestamp for key, timestamp in self.alert_cooldown.items()
                    if now - timestamp < self.cooldown_period * 2
                }

                await asyncio.sleep(3600)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

            except Exception as e:
                logger.error(f"Alert cleanup error: {e}")
                await asyncio.sleep(1800)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –ø–æ–ª—á–∞—Å–∞

    async def get_monitoring_dashboard(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ dashboard –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        uptime = datetime.now() - self.metrics["monitoring_started"]

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for health in self.system_health.values():
            status = health.status.value
            status_counts[status] = status_counts.get(status, 0) + 1

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
        recent_alerts = self.alert_history[-10:] if self.alert_history else []

        return {
            "timestamp": datetime.now(),
            "monitoring_active": self.is_monitoring_active,
            "uptime_seconds": int(uptime.total_seconds()),
            "total_systems": len(self.health_checks),
            "total_checks": self.metrics["total_checks"],
            "total_alerts": self.metrics["total_alerts"],
            "system_status_counts": status_counts,
            "active_alerts_count": len(self.active_alerts),
            "recent_alerts": [
                {
                    "level": alert.level.value,
                    "system": alert.system,
                    "message": alert.message[:100] + "..." if len(alert.message) > 100 else alert.message,
                    "timestamp": alert.timestamp.strftime("%H:%M:%S")
                } for alert in recent_alerts
            ],
            "system_health": {
                name: {
                    "status": health.status.value,
                    "last_check": health.last_check.strftime("%H:%M:%S"),
                    "response_time": health.response_time_ms
                } for name, health in self.system_health.items()
            }
        }

    async def resolve_alert(self, alert_id: int):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        for alert in self.active_alerts:
            if id(alert) == alert_id:
                alert.resolved = True
                alert.resolution_time = datetime.now()
                self.active_alerts.remove(alert)
                logger.info(f"Alert {alert_id} resolved")
                break

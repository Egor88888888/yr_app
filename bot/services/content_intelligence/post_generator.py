"""
üìù ENHANCED POST GENERATOR
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏, —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º
"""

import logging
import random
from typing import Dict, List
from ..ai import generate_ai_response
from .models import NewsItem

logger = logging.getLogger(__name__)


class PostGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""

    def __init__(self):
        # –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        self.enhanced_templates = {
            'step_by_step_guide': """üéØ **{title}**

üìã **–ü–û–®–ê–ì–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú:**
{step_algorithm}

‚ö†Ô∏è **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
{potential_problems}

üîó **–ü–û–õ–ï–ó–ù–´–ï –†–ï–°–£–†–°–´:**
{useful_resources}

üìû **–ù–£–ñ–ù–ê –ü–û–ú–û–©–¨?**
–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: /start""",

            'legal_analysis': """‚öñÔ∏è **{title}**

üîç **–°–£–¢–¨ –ò–ó–ú–ï–ù–ï–ù–ò–ô:**
{key_changes}

üìù **–ß–¢–û –î–ï–õ–ê–¢–¨ –ì–†–ê–ñ–î–ê–ù–ê–ú:**
{citizen_actions}

üö® **–ù–ê –ß–¢–û –û–ë–†–ê–¢–ò–¢–¨ –í–ù–ò–ú–ê–ù–ò–ï:**
{warnings}

üåê **–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò:**
{official_sources}

üíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞: /start""",

            'practical_solution': """üí° **{title}**

‚úÖ **–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:**
{solution_steps}

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –§–ê–ö–¢–´:**
{statistics}

üîß **–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:**
{practical_tips}

üìö **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
{additional_info}

üìû –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å: /start""",

            'urgent_alert': """üö® **–í–ê–ñ–ù–û!** {title}

‚è∞ **–°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**
{urgent_actions}

üìÖ **–ö–õ–Æ–ß–ï–í–´–ï –î–ê–¢–´:**
{important_dates}

üéØ **–ö–û–ú–£ –≠–¢–û –ö–ê–°–ê–ï–¢–°–Ø:**
{target_audience}

üìã **–î–û–ö–£–ú–ï–ù–¢–´:**
{required_documents}

üÜò –°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: /start"""
        }

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        self.resource_database = {
            'government_sites': [
                "üèõÔ∏è –ì–æ—Å—É—Å–ª—É–≥–∏: gosuslugi.ru",
                "üìã –†–æ—Å—Ä–µ–µ—Å—Ç—Ä: rosreestr.gov.ru",
                "üíº –ù–∞–ª–æ–≥–æ–≤–∞—è: nalog.gov.ru",
                "‚öñÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ü–ª—é—Å: consultant.ru",
                "üìñ –ì–∞—Ä–∞–Ω—Ç: garant.ru"
            ],
            'legal_assistance': [
                "üìû –ü—Ä–∞–≤–æ–≤–∞—è –ø–æ–º–æ—â—å: fedpal.ru",
                "üèõÔ∏è –†–æ—Å–∫–∞–¥–∞—Å—Ç—Ä: kadastr.ru",
                "üë• –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞–ª–∞—Ç–∞: oprf.ru",
                "üîç –°—É–¥–µ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: sudrf.ru"
            ],
            'consumer_protection': [
                "üõ°Ô∏è –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä: rospotrebnadzor.ru",
                "üìã –†–µ–µ—Å—Ç—Ä –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: zakupki.gov.ru",
                "üí≥ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫: cbr.ru"
            ]
        }

        # –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
        self.common_problems = {
            'documentation': [
                "‚ùå –û—Ç–∫–∞–∑ –≤ –ø—Ä–∏–µ–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "üìù –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è",
                "‚è∞ –ü—Ä–æ–ø—É—Å–∫ —Å—Ä–æ–∫–æ–≤ –ø–æ–¥–∞—á–∏",
                "üîç –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–ø—Ä–∞–≤–æ–∫"
            ],
            'bureaucracy': [
                "üè¢ –û—Ç–∫–∞–∑ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏",
                "‚è±Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
                "üí∞ –ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–æ–ø–ª–∞—Ç—ã",
                "üìû –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–µ–¥–æ–º—Å—Ç–≤–∞"
            ],
            'legal_procedures': [
                "‚öñÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞",
                "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "üïê –ó–∞—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
                "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤"
            ]
        }

    async def generate_post(self, news_item: NewsItem = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏"""

        if news_item:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            return await self._generate_news_based_post(news_item)
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            return await self._generate_educational_post()

    async def _generate_news_based_post(self, news_item: NewsItem) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏"""

        post_type = self._determine_enhanced_post_type(news_item)

        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π AI –ø—Ä–æ–º–ø—Ç
        enhanced_content = await self._create_structured_content(news_item, post_type)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É
        return self._format_enhanced_post(enhanced_content, post_type)

    async def _generate_educational_post(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–æ–≤–æ—Å—Ç—è–º"""

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        educational_topics = [
            {
                'title': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä',
                'category': 'consumer_protection',
                'type': 'step_by_step_guide'
            },
            {
                'title': '–ó–∞—â–∏—Ç–∞ —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤: –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                'category': 'labor_law',
                'type': 'practical_solution'
            },
            {
                'title': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞: –ø–æ–ª–Ω—ã–π –≥–∏–¥',
                'category': 'property_law',
                'type': 'step_by_step_guide'
            },
            {
                'title': '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü–∞: –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å',
                'category': 'bankruptcy',
                'type': 'legal_analysis'
            },
            {
                'title': '–ù–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã 2024: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å',
                'category': 'tax_law',
                'type': 'urgent_alert'
            },
            {
                'title': '–°–µ–º–µ–π–Ω—ã–µ —Å–ø–æ—Ä—ã: –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–µ—Ç–µ–π',
                'category': 'family_law',
                'type': 'practical_solution'
            },
            {
                'title': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è',
                'category': 'administrative_law',
                'type': 'step_by_step_guide'
            },
            {
                'title': '–ñ–∏–ª–∏—â–Ω—ã–µ –ø—Ä–∞–≤–∞: –∫–∞–∫ –±–æ—Ä–æ—Ç—å—Å—è —Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π',
                'category': 'housing_law',
                'type': 'practical_solution'
            }
        ]

        topic = random.choice(educational_topics)
        return await self._create_educational_content(topic)

    async def _create_educational_content(self, topic: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å AI"""

        # –°–æ–∑–¥–∞–µ–º –ß–ï–¢–ö–ò–ô –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        system_prompt = f"""–¢—ã - –≤–µ–¥—É—â–∏–π —é—Ä–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç. –°–æ–∑–¥–∞–π –°–¢–†–û–ì–û –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ø–æ—Å—Ç.

–¢–ï–ú–ê: {topic['title']}

–í–ê–ñ–ù–û! –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–æ–≤, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ê–õ–ì–û–†–ò–¢–ú:
[–∑–¥–µ—Å—å 4-5 —á–µ—Ç–∫–∏—Ö —à–∞–≥–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏]

–ü–†–û–ë–õ–ï–ú–´:
[–∑–¥–µ—Å—å 3-4 –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–º–≤–æ–ª–æ–º ‚Ä¢]

–†–ï–°–£–†–°–´:
[–∑–¥–µ—Å—å 3 —Ä–µ—Å—É—Ä—Å–∞ —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏]

–°–û–í–ï–¢–´:
[–∑–¥–µ—Å—å 2-3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞]

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–ï –¥—É–±–ª–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é 1., 2., 3.
- –ö–∞–∂–¥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚Ä¢
- –†–µ—Å—É—Ä—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: üèõÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞
- –û–±—ä–µ–º –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: 100-150 —Å–∏–º–≤–æ–ª–æ–≤
- –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω"""

        user_prompt = f"""–°–æ–∑–¥–∞–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã: {topic['title']}

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {topic['category']}
–¢–∏–ø: {topic['type']}

–ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏! –¢–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–æ–≤!"""

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]

        try:
            ai_response = await generate_ai_response(messages, model="openai/gpt-4o", max_tokens=800)

            # –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            structured_content = self._parse_clean_response(ai_response, topic)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É
            template = self.enhanced_templates.get(
                topic['type'], self.enhanced_templates['step_by_step_guide'])

            return template.format(**structured_content)

        except Exception as e:
            logger.error(f"Failed to generate educational content: {e}")
            return await self._create_fallback_post(topic)

    def _parse_clean_response(self, ai_response: str, topic: Dict) -> Dict[str, str]:
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ AI –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        result = {
            'title': topic['title'],
            'step_algorithm': '',
            'potential_problems': '',
            'useful_resources': '',
            'practical_tips': '',
            'key_changes': '',
            'citizen_actions': '',
            'warnings': '',
            'official_sources': '',
            'solution_steps': '',
            'statistics': '',
            'additional_info': '',
            'urgent_actions': '',
            'important_dates': '',
            'target_audience': '',
            'required_documents': ''
        }

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º—É—Å–æ—Ä–∞
        cleaned_response = ai_response.strip()

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ–º—ã
        title_variations = [
            topic['title'],
            topic['title'].lower(),
            topic['title'].upper()
        ]

        for title_var in title_variations:
            cleaned_response = cleaned_response.replace(title_var, '').strip()

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —á–µ—Ç–∫–∏–º –º–∞—Ä–∫–µ—Ä–∞–º
        sections = {}
        current_section = None
        current_content = []

        lines = cleaned_response.split('\n')

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
            line_upper = line.upper()

            if any(marker in line_upper for marker in ['–ê–õ–ì–û–†–ò–¢–ú:', '–î–ï–ô–°–¢–í–ò–Ø:', '–®–ê–ì–ò:']):
                if current_section and current_content:
                    sections[current_section] = '\n'.join(current_content)
                current_section = 'algorithm'
                current_content = []
                continue

            elif any(marker in line_upper for marker in ['–ü–†–û–ë–õ–ï–ú–´:', '–¢–†–£–î–ù–û–°–¢–ò:', '–û–®–ò–ë–ö–ò:']):
                if current_section and current_content:
                    sections[current_section] = '\n'.join(current_content)
                current_section = 'problems'
                current_content = []
                continue

            elif any(marker in line_upper for marker in ['–†–ï–°–£–†–°–´:', '–°–°–´–õ–ö–ò:', '–°–ê–ô–¢–´:']):
                if current_section and current_content:
                    sections[current_section] = '\n'.join(current_content)
                current_section = 'resources'
                current_content = []
                continue

            elif any(marker in line_upper for marker in ['–°–û–í–ï–¢–´:', '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'TIPS:']):
                if current_section and current_content:
                    sections[current_section] = '\n'.join(current_content)
                current_section = 'tips'
                current_content = []
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
            if current_section:
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_line = line.replace('**', '').replace('*', '').strip()
                if clean_line and not clean_line.startswith('#'):
                    current_content.append(clean_line)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if current_section and current_content:
            sections[current_section] = '\n'.join(current_content)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'algorithm' in sections:
            result['step_algorithm'] = self._clean_algorithm(
                sections['algorithm'])
            result['solution_steps'] = result['step_algorithm']
            result['urgent_actions'] = result['step_algorithm']

        if 'problems' in sections:
            result['potential_problems'] = self._clean_problems(
                sections['problems'])
            result['warnings'] = result['potential_problems']

        if 'resources' in sections:
            result['useful_resources'] = self._clean_resources(
                sections['resources'])
            result['official_sources'] = result['useful_resources']

        if 'tips' in sections:
            result['practical_tips'] = self._clean_tips(sections['tips'])
            result['citizen_actions'] = result['practical_tips']
            result['additional_info'] = result['practical_tips']

        # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        if not result['step_algorithm']:
            result['step_algorithm'] = self._generate_default_algorithm(topic)

        if not result['potential_problems']:
            result['potential_problems'] = self._get_relevant_problems(
                topic['category'])

        if not result['useful_resources']:
            result['useful_resources'] = self._get_relevant_resources(
                topic['category'])

        return result

    def _clean_algorithm(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        lines = text.split('\n')
        cleaned_lines = []

        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line:
                continue

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ —Å–∏–º–≤–æ–ª—ã
            line = line.replace('**', '').replace('*', '').strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not line[0].isdigit():
                line = f"{i}. {line}"

            cleaned_lines.append(line)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
            if len(cleaned_lines) >= 5:
                break

        return '\n'.join(cleaned_lines)

    def _clean_problems(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
        lines = text.split('\n')
        cleaned_lines = []

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            line = line.replace('**', '').replace('*', '').strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not line.startswith('‚Ä¢') and not line.startswith('-'):
                line = f"‚Ä¢ {line}"
            elif line.startswith('-'):
                line = line.replace('-', '‚Ä¢', 1)

            cleaned_lines.append(line)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º
            if len(cleaned_lines) >= 4:
                break

        return '\n'.join(cleaned_lines)

    def _clean_resources(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        lines = text.split('\n')
        cleaned_lines = []

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            line = line.replace('**', '').replace('*', '').strip()

            # –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –¥–æ–±–∞–≤–ª—è–µ–º
            if not any(char in line for char in ['üèõÔ∏è', 'üìã', 'üíº', 'üõ°Ô∏è', 'üìû']):
                if '–≥–æ—Å—É—Å–ª—É–≥–∏' in line.lower():
                    line = f"üèõÔ∏è {line}"
                elif '—Ä–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä' in line.lower():
                    line = f"üõ°Ô∏è {line}"
                elif '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä' in line.lower():
                    line = f"üìã {line}"
                else:
                    line = f"üíº {line}"

            cleaned_lines.append(line)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
            if len(cleaned_lines) >= 3:
                break

        return '\n'.join(cleaned_lines)

    def _clean_tips(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–≤–µ—Ç–æ–≤"""
        lines = text.split('\n')
        cleaned_lines = []

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            line = line.replace('**', '').replace('*', '').strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not line.startswith('‚Ä¢') and not line.startswith('-'):
                line = f"‚Ä¢ {line}"
            elif line.startswith('-'):
                line = line.replace('-', '‚Ä¢', 1)

            cleaned_lines.append(line)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤
            if len(cleaned_lines) >= 3:
                break

        return '\n'.join(cleaned_lines)

    def _generate_default_algorithm(self, topic: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""

        default_algorithms = {
            'consumer_protection': '''1. –°–æ–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—á–µ–∫–∏, –¥–æ–≥–æ–≤–æ—Ä—ã)
2. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–¥–∞–≤—Ü—É —Å –ø—Ä–µ—Ç–µ–Ω–∑–∏–µ–π
4. –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä
5. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π''',

            'labor_law': '''1. –ò–∑—É—á–∏—Ç–µ —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –∏ –∑–∞–∫–æ–Ω—ã
2. –°–æ–±–µ—Ä–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é –ø–∏—Å—å–º–µ–Ω–Ω–æ
4. –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ —Ç—Ä—É–¥–æ–≤—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –≤ —Å—É–¥''',

            'housing_law': '''1. –ò–∑—É—á–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–æ–≥–æ–≤–æ—Ä
2. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ
3. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –£–ö
4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∂–∏–ª–∏—â–Ω—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é
5. –ü–æ–¥–∞–π—Ç–µ –∏—Å–∫ –≤ —Å—É–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'''
        }

        category = topic.get('category', 'general')

        for key, algorithm in default_algorithms.items():
            if key in category:
                return algorithm

        return '''1. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
2. –°–æ–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –æ—Ä–≥–∞–Ω
4. –ü–æ–¥–∞–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ
5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞'''

    def _get_relevant_resources(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if 'consumer' in category or 'protection' in category:
            resources = self.resource_database['consumer_protection']
        elif 'government' in category or 'tax' in category:
            resources = self.resource_database['government_sites']
        else:
            resources = self.resource_database['legal_assistance']

        return '\n'.join(random.sample(resources, min(3, len(resources))))

    def _get_relevant_problems(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""

        if 'procedure' in category or 'legal' in category:
            problems = self.common_problems['legal_procedures']
        elif 'documentation' in category:
            problems = self.common_problems['documentation']
        else:
            problems = self.common_problems['bureaucracy']

        return '\n'.join(random.sample(problems, min(3, len(problems))))

    async def _create_fallback_post(self, topic: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI"""

        return f"""üéØ **{topic['title']}**

üìã **–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
–î–∞–Ω–Ω–∞—è —Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤.

‚ö†Ô∏è **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞

üîó **–ü–û–õ–ï–ó–ù–´–ï –†–ï–°–£–†–°–´:**
{self._get_relevant_resources(topic['category'])}

üìû **–ü–û–õ–£–ß–ò–¢–¨ –ü–û–ú–û–©–¨:**
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞: /start"""

    def _determine_enhanced_post_type(self, news_item: NewsItem) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""

        title_content = f"{news_item.title} {news_item.content}".lower()

        if any(word in title_content for word in ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–≤–Ω–∏–º–∞–Ω–∏–µ', '–¥–æ']):
            return 'urgent_alert'
        elif any(word in title_content for word in ['–∫–∞–∫', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–ø–æ—Ä—è–¥–æ–∫', '—à–∞–≥']):
            return 'step_by_step_guide'
        elif any(word in title_content for word in ['—Ä–µ—à–µ–Ω–∏–µ', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–ø–æ—Å–æ–±']):
            return 'practical_solution'
        else:
            return 'legal_analysis'

    async def _create_structured_content(self, news_item: NewsItem, post_type: str) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""

        enhanced_prompt = f"""–¢—ã - –≤–µ–¥—É—â–∏–π —é—Ä–∏—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω.

–ò–°–•–û–î–ù–ê–Ø –ù–û–í–û–°–¢–¨: {news_item.title}
–ö–û–ù–¢–ï–ù–¢: {news_item.content}
–¢–ò–ü –ü–û–°–¢–ê: {post_type}

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö  
‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω
‚úÖ –ß–µ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–°–¢–ò–õ–¨: –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π.
–û–ë–™–ï–ú: 600-800 —Å–∏–º–≤–æ–ª–æ–≤.
"""

        messages = [
            {"role": "system", "content": enhanced_prompt},
            {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {news_item.title}"}
        ]

        try:
            ai_response = await generate_ai_response(messages, model="openai/gpt-4o", max_tokens=1000)
            return self._parse_news_response(ai_response, news_item)

        except Exception as e:
            logger.error(f"AI enhancement failed: {e}")
            return self._create_basic_news_content(news_item)

    def _parse_news_response(self, ai_response: str, news_item: NewsItem) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ –∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        return self._parse_educational_response(ai_response, {
            'title': news_item.title,
            'category': news_item.category,
            'type': 'news_analysis'
        })

    def _create_basic_news_content(self, news_item: NewsItem) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI"""

        return {
            'title': news_item.title,
            'step_algorithm': "1. –ò–∑—É—á–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ\n2. –û—Ü–µ–Ω–∏—Ç–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é\n3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É",
            'potential_problems': "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ –≤–∞–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π\n‚Ä¢ –ù–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è",
            'useful_resources': self._get_relevant_resources('general'),
            'key_changes': news_item.content[:200] + "...",
            'citizen_actions': "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.",
            'warnings': "–ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º.",
            'official_sources': "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤."
        }

    def _format_enhanced_post(self, content: Dict[str, str], post_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É"""

        template = self.enhanced_templates.get(
            post_type, self.enhanced_templates['step_by_step_guide'])

        try:
            formatted_post = template.format(**content)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
            if len(formatted_post) > 1000:
                # –°–æ–∫—Ä–∞—â–∞–µ–º —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
                for key in ['step_algorithm', 'solution_steps', 'key_changes']:
                    if key in content and len(content[key]) > 150:
                        content[key] = content[key][:150] + "..."

                formatted_post = template.format(**content)

            return formatted_post

        except KeyError as e:
            logger.warning(f"Missing template key {e}")
            return self._create_emergency_fallback(content)

    def _create_emergency_fallback(self, content: Dict[str, str]) -> str:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        title = content.get('title', '–í–∞–∂–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

        return f"""üéØ **{title}**

üìã **–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
{content.get('step_algorithm', content.get('key_changes', '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'))}

‚ö†Ô∏è **–í–ê–ñ–ù–û –ó–ù–ê–¢–¨:**
{content.get('potential_problems', content.get('warnings', '–¢—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è'))}

üîó **–ü–û–õ–ï–ó–ù–´–ï –†–ï–°–£–†–°–´:**
{content.get('useful_resources', 'üèõÔ∏è –ì–æ—Å—É—Å–ª—É–≥–∏: gosuslugi.ru')}

üìû **–ü–û–õ–£–ß–ò–¢–¨ –ü–û–ú–û–©–¨:**
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: /start"""

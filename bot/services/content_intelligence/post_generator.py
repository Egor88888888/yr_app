"""
üìù POST GENERATOR
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å AI
"""

import logging
from typing import Dict
from ..ai import generate_ai_response
from .models import NewsItem

logger = logging.getLogger(__name__)

class PostGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.post_templates = {
            'new_law': """üÜï **–ù–û–í–´–ô –ó–ê–ö–û–ù**

{title}

üîç **–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:**
{implications}

üìÖ –í—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É: {effective_date}

üíº –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: /start""",
            
            'court_decision': """‚öñÔ∏è **–†–ï–®–ï–ù–ò–ï –°–£–î–ê**

{title}

üèõÔ∏è **–°—É—Ç—å —Ä–µ—à–µ–Ω–∏—è:**
{summary}

üìä **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:**
{implications}

üíº –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: /start""",
            
            'regulatory_change': """ÔøΩÔøΩ **–ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–ò**

{title}

üìà **–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**
{changes}

‚è∞ **–°—Ä–æ–∫–∏:** {timeline}

üíº –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: /start""",
            
            'practical_guide': """üí° **–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –°–û–í–ï–¢**

{title}

üìù **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{recommendations}

üíº –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: /start"""
        }
    
    async def generate_post(self, news_item: NewsItem) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞
        post_type = self._determine_post_type(news_item)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        enhanced_content = await self._enhance_with_ai(news_item, post_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç
        formatted_post = self._format_post(enhanced_content, post_type)
        
        return formatted_post
    
    def _determine_post_type(self, news_item: NewsItem) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞"""
        
        title_content = f"{news_item.title} {news_item.content}".lower()
        
        if any(word in title_content for word in ['—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω', '–Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω']):
            return 'new_law'
        elif any(word in title_content for word in ['—Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–¥–∞']):
            return 'court_decision'
        elif any(word in title_content for word in ['–∏–∑–º–µ–Ω–µ–Ω–∏—è', '–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞']):
            return 'regulatory_change'
        else:
            return 'practical_guide'
    
    async def _enhance_with_ai(self, news_item: NewsItem, post_type: str) -> Dict[str, str]:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
        
        system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–æ–∑–¥–∞—é—â–∏–π –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram.

–¢–∏–ø –ø–æ—Å—Ç–∞: {post_type}
–ò—Å—Ö–æ–¥–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: {news_item.title}
–ö–æ–Ω—Ç–µ–Ω—Ç: {news_item.content}

–°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω:
1. –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
2. –ü–æ–∫–∞–∂–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ  
3. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
5. –û–±—ä–µ–º: –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤"""
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–°–æ–∑–¥–∞–π –ø–æ—Å—Ç: {news_item.title}\n\n{news_item.content}"}
        ]
        
        try:
            ai_response = await generate_ai_response(messages, model="openai/gpt-4o-mini", max_tokens=500)
            enhanced_content = self._parse_ai_response(ai_response, news_item)
            return enhanced_content
            
        except Exception as e:
            logger.error(f"AI enhancement failed: {e}")
            
            # Fallback
            return {
                'title': news_item.title,
                'summary': news_item.content[:200] + "...",
                'implications': "–ü–æ–¥—Ä–æ–±–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –Ω–∞—à–∏—Ö —é—Ä–∏—Å—Ç–æ–≤.",
                'recommendations': "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
                'changes': "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.",
                'timeline': "–£—Ç–æ—á–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏.",
                'effective_date': "–£—Ç–æ—á–Ω—è–π—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É."
            }
    
    def _parse_ai_response(self, ai_response: str, news_item: NewsItem) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI"""
        
        result = {
            'title': news_item.title,
            'summary': ai_response[:200] + "...",
            'implications': "",
            'recommendations': "",
            'changes': "",
            'timeline': "",
            'effective_date': ""
        }
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
        lines = ai_response.split('\n')
        current_section = 'summary'
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if any(word in line.lower() for word in ['–∑–Ω–∞—á–µ–Ω–∏–µ', '–æ–∑–Ω–∞—á–∞–µ—Ç']):
                current_section = 'implications'
            elif any(word in line.lower() for word in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '—Å–æ–≤–µ—Ç—ã']):
                current_section = 'recommendations'
            elif any(word in line.lower() for word in ['–∏–∑–º–µ–Ω–µ–Ω–∏—è', '–Ω–æ–≤–æ–µ']):
                current_section = 'changes'
            elif any(word in line.lower() for word in ['—Å—Ä–æ–∫', '–¥–∞—Ç–∞']):
                current_section = 'effective_date'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if result[current_section]:
                result[current_section] += " " + line
            else:
                result[current_section] = line
        
        return result
    
    def _format_post(self, content: Dict[str, str], post_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
        
        template = self.post_templates.get(post_type, self.post_templates['practical_guide'])
        
        try:
            formatted_post = template.format(**content)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(formatted_post) > 800:
                content['summary'] = content['summary'][:100] + "..."
                formatted_post = template.format(**content)
            
            return formatted_post
            
        except KeyError as e:
            logger.warning(f"Missing template key {e}")
            
            # –ü—Ä–æ—Å—Ç–æ–π fallback
            return f"""üì∞ **{content['title']}**

{content['summary']}

üíº –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: /start"""

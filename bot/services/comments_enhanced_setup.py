"""
üöÄ ENHANCED COMMENTS SETUP - PRODUCTION READY
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
"""

import logging
import os
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from telegram import Bot, Chat, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.error import TelegramError, BadRequest, Forbidden
from telegram.constants import ChatType, ParseMode

logger = logging.getLogger(__name__)


class EnhancedCommentsManager:
    """–ü—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ fallback"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.discussion_groups_cache = {}
        self.fallback_enabled = True
        self.admin_notifications_enabled = True
        self.stats = {
            "comments_requests": 0,
            "fallback_used": 0,
            "discussion_groups_found": 0,
            "manual_setup_required": 0
        }

    async def ensure_comments_production_ready(self, channel_id: str, message_id: int = None) -> Dict[str, Any]:
        """
        –ü–†–û–î–ê–ö–®–ù –º–µ—Ç–æ–¥ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞

        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        try:
            self.stats["comments_requests"] += 1

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if channel_id in self.discussion_groups_cache:
                cached_info = self.discussion_groups_cache[channel_id]
                if cached_info["status"] == "working" and cached_info["last_check"] > datetime.now() - timedelta(hours=1):
                    return await self._create_working_comments_response(cached_info, message_id)

            # 2. –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            diagnostic_result = await self._run_enhanced_diagnostic(channel_id)

            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.discussion_groups_cache[channel_id] = {
                "status": "working" if diagnostic_result["comments_working"] else "requires_setup",
                "last_check": datetime.now(),
                "diagnostic": diagnostic_result
            }

            # 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if diagnostic_result["comments_working"]:
                self.stats["discussion_groups_found"] += 1
                return await self._create_working_comments_response(diagnostic_result, message_id)
            else:
                self.stats["manual_setup_required"] += 1
                return await self._create_setup_required_response(diagnostic_result, channel_id, message_id)

        except Exception as e:
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ensure_comments_production_ready: {e}")
            return await self._create_fallback_response(channel_id, message_id, str(e))

    async def _run_enhanced_diagnostic(self, channel_id: str) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            logger.info(f"üîç Enhanced diagnostic for channel: {channel_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
            channel = await self.bot.get_chat(channel_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            discussion_group_info = None
            has_discussion_group = False

            if hasattr(channel, 'linked_chat_id') and channel.linked_chat_id:
                try:
                    discussion_group = await self.bot.get_chat(channel.linked_chat_id)
                    discussion_group_info = {
                        "id": discussion_group.id,
                        "title": discussion_group.title,
                        "type": discussion_group.type.value,
                        "member_count": getattr(discussion_group, 'member_count', 0)
                    }
                    has_discussion_group = True
                    logger.info(
                        f"‚úÖ Discussion group found: {discussion_group.title}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Discussion group access error: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_permissions = await self._check_bot_permissions(channel_id)

            return {
                "comments_working": has_discussion_group,
                "channel_info": {
                    "id": channel.id,
                    "title": channel.title,
                    "username": getattr(channel, 'username', None),
                    "type": channel.type.value
                },
                "discussion_group": discussion_group_info,
                "bot_permissions": bot_permissions,
                "diagnostic_time": datetime.now(),
                "needs_setup": not has_discussion_group
            }

        except Exception as e:
            logger.error(f"‚ùå Enhanced diagnostic failed: {e}")
            return {
                "comments_working": False,
                "error": str(e),
                "needs_setup": True,
                "diagnostic_time": datetime.now()
            }

    async def _check_bot_permissions(self, channel_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot_member = await self.bot.get_chat_member(channel_id, self.bot.id)

            return {
                "status": bot_member.status,
                "can_post": bot_member.status in ['administrator', 'creator'],
                "can_delete": getattr(bot_member, 'can_delete_messages', False),
                "can_pin": getattr(bot_member, 'can_pin_messages', False)
            }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cannot check bot permissions: {e}")
            return {
                "status": "unknown",
                "can_post": False,
                "error": str(e)
            }

    async def _create_working_comments_response(self, info: Dict[str, Any], message_id: int = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            comments_url = self._generate_comments_url(info, message_id)

            return {
                "success": True,
                "comments_working": True,
                "comments_url": comments_url,
                "button_text": "üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ",
                "button_url": comments_url,
                "status_message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç",
                "discussion_group": info.get("discussion_group") or info.get("diagnostic", {}).get("discussion_group"),
                "fallback_used": False
            }
        except Exception as e:
            logger.error(f"‚ùå Error creating working comments response: {e}")
            return await self._create_fallback_response(info.get("channel_info", {}).get("id", "unknown"), message_id, str(e))

    async def _create_setup_required_response(self, diagnostic: Dict[str, Any], channel_id: str, message_id: int = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
        try:
            if self.fallback_enabled:
                self.stats["fallback_used"] += 1
                fallback_url = await self._generate_fallback_url(channel_id, message_id)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if self.admin_notifications_enabled:
                    asyncio.create_task(
                        self._notify_admin_setup_required(diagnostic))

                return {
                    "success": True,
                    "comments_working": False,
                    "comments_url": fallback_url,
                    "button_text": "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    "button_url": fallback_url,
                    "status_message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback",
                    "setup_required": True,
                    "setup_instructions": self._generate_setup_instructions(diagnostic),
                    "fallback_used": True
                }
            else:
                return {
                    "success": False,
                    "comments_working": False,
                    "error": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ fallback –æ—Ç–∫–ª—é—á–µ–Ω",
                    "setup_required": True,
                    "setup_instructions": self._generate_setup_instructions(diagnostic)
                }

        except Exception as e:
            logger.error(f"‚ùå Error creating setup required response: {e}")
            return await self._create_fallback_response(channel_id, message_id, str(e))

    async def _create_fallback_response(self, channel_id: str, message_id: int = None, error: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
        try:
            fallback_url = await self._generate_fallback_url(channel_id, message_id)
            self.stats["fallback_used"] += 1

            return {
                "success": True,
                "comments_working": False,
                "comments_url": fallback_url,
                "button_text": "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                "button_url": fallback_url,
                "status_message": f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback{': ' + error if error else ''}",
                "fallback_used": True,
                "error": error
            }
        except Exception as e:
            logger.error(f"‚ùå Critical fallback error: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –∑–∞—â–∏—Ç—ã
            return {
                "success": False,
                "comments_working": False,
                "error": f"Critical failure: {e}",
                "button_text": "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                "button_url": f"https://t.me/{os.getenv('BOT_USERNAME', 'yur_lawyer_bot').replace('@', '')}",
                "fallback_used": True
            }

    def _generate_comments_url(self, info: Dict[str, Any], message_id: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = info.get("channel_info") or info.get(
                "diagnostic", {}).get("channel_info", {})
            channel_id = channel_info.get("id")
            channel_username = channel_info.get("username")

            if not message_id:
                message_id = 1  # Fallback –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

            # –ï—Å–ª–∏ –µ—Å—Ç—å username –∫–∞–Ω–∞–ª–∞
            if channel_username:
                return f"https://t.me/{channel_username}/{message_id}?comment=1"

            # –ï—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–π ID
            elif channel_id:
                if str(channel_id).startswith('-100'):
                    numeric_id = str(channel_id)[4:]  # –£–±–∏—Ä–∞–µ–º -100 –ø—Ä–µ—Ñ–∏–∫—Å
                    return f"https://t.me/c/{numeric_id}/{message_id}?comment=1"

            # Fallback
            raise Exception(
                "Cannot generate comments URL - insufficient channel info")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cannot generate comments URL: {e}")
            raise

    async def _generate_fallback_url(self, channel_id: str, message_id: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback URL"""
        try:
            bot_username = self.bot.username.replace(
                "@", "") if self.bot.username else os.getenv("BOT_USERNAME", "yur_lawyer_bot").replace("@", "")

            if message_id:
                return f"https://t.me/{bot_username}?start=discuss_{message_id}"
            else:
                return f"https://t.me/{bot_username}?start=consultation"

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Fallback URL generation error: {e}")
            return f"https://t.me/{os.getenv('BOT_USERNAME', 'yur_lawyer_bot').replace('@', '')}"

    def _generate_setup_instructions(self, diagnostic: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        try:
            channel_info = diagnostic.get("channel_info", {})
            channel_name = channel_info.get("title", "–í–∞—à –∫–∞–Ω–∞–ª")
            channel_id = channel_info.get(
                "username") or channel_info.get("id", "your_channel")

            return f"""üìã **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –î–õ–Ø "{channel_name}"**

üéØ **–ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê (5 –º–∏–Ω—É—Ç):**

1Ô∏è‚É£ **–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π:**
   ‚Ä¢ Telegram ‚Üí –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: "{channel_name} - –û–±—Å—É–∂–¥–µ–Ω–∏—è"
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å @{self.bot.username} –∫–∞–∫ –∞–¥–º–∏–Ω–∞

2Ô∏è‚É£ **–°–≤—è–∑–∞—Ç—å —Å –∫–∞–Ω–∞–ª–æ–º:**
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –û–±—Å—É–∂–¥–µ–Ω–∏—è
   ‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É

3Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

‚úÖ **–ü–û–°–õ–ï –ù–ê–°–¢–†–û–ô–ö–ò:**
–í—Å–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!

‚ö†Ô∏è **–í–ê–ñ–ù–û:** –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑."""

        except Exception as e:
            logger.error(f"‚ùå Error generating setup instructions: {e}")
            return "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram"

    async def _notify_admin_setup_required(self, diagnostic: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            admin_chat_id = os.getenv('ADMIN_CHAT_ID')
            if not admin_chat_id:
                return

            channel_info = diagnostic.get("channel_info", {})
            channel_name = channel_info.get("title", "Unknown")

            notification = f"""üîî **–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**

üìã **–ö–∞–Ω–∞–ª:** {channel_name}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M')}
üö´ **–°—Ç–∞—Ç—É—Å:** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç

üîß **–î–µ–π—Å—Ç–≤–∏–µ:** –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞

üí° **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫ –±–æ—Ç—É"""

            await self.bot.send_message(
                chat_id=admin_chat_id,
                text=notification,
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to notify admin: {e}")

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        return {
            **self.stats,
            "cache_size": len(self.discussion_groups_cache),
            "cache_entries": list(self.discussion_groups_cache.keys()),
            "fallback_percentage": round(self.stats["fallback_used"] / max(self.stats["comments_requests"], 1) * 100, 1),
            "success_rate": round((self.stats["discussion_groups_found"] / max(self.stats["comments_requests"], 1)) * 100, 1)
        }

    async def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.discussion_groups_cache.clear()
        logger.info("üßπ Comments cache cleared")

    async def test_comments_system(self, channel_id: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            logger.info(f"üß™ Testing comments system for {channel_id}")

            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Å–≤–µ–∂–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if channel_id in self.discussion_groups_cache:
                del self.discussion_groups_cache[channel_id]

            # –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            result = await self.ensure_comments_production_ready(channel_id, 1)

            return {
                "test_passed": result["success"],
                "comments_working": result["comments_working"],
                "fallback_used": result.get("fallback_used", False),
                "test_time": datetime.now(),
                "result": result
            }

        except Exception as e:
            logger.error(f"‚ùå Comments system test failed: {e}")
            return {
                "test_passed": False,
                "error": str(e),
                "test_time": datetime.now()
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
_enhanced_comments_manager = None


def get_enhanced_comments_manager(bot: Bot = None) -> EnhancedCommentsManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EnhancedCommentsManager"""
    global _enhanced_comments_manager

    if _enhanced_comments_manager is None and bot:
        _enhanced_comments_manager = EnhancedCommentsManager(bot)

    return _enhanced_comments_manager


async def ensure_production_comments(bot: Bot, channel_id: str, message_id: int = None) -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        manager = get_enhanced_comments_manager(bot)
        if not manager:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–µ—Ç
            manager = EnhancedCommentsManager(bot)

        return await manager.ensure_comments_production_ready(channel_id, message_id)

    except Exception as e:
        logger.error(f"‚ùå Production comments system error: {e}")
        return {
            "success": False,
            "comments_working": False,
            "error": str(e),
            "button_text": "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
            "button_url": f"https://t.me/{os.getenv('BOT_USERNAME', 'yur_lawyer_bot').replace('@', '')}",
            "fallback_used": True
        }

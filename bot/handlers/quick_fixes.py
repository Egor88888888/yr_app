"""
üîß QUICK FIXES HANDLER
–ë—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ markdown
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from bot.services.channel_fix import quick_channel_fix, get_channel_status_report, ChannelCommentsSetup
from bot.services.markdown_fix import prepare_telegram_message
from bot.services.autopost_diagnostic import get_autopost_diagnostic, create_test_autopost
from bot.services.comments_diagnostic import get_comments_diagnostic

# PRODUCTION ENHANCEMENT: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced comments system
from bot.services.comments_enhanced_setup import ensure_production_comments, get_enhanced_comments_manager

# PRODUCTION ADMIN PANEL: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
from bot.services.production_admin_panel import get_production_admin_panel, get_system_dashboard

# PRODUCTION MONITORING SYSTEM: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
from bot.services.production_monitoring_system import ProductionMonitoringSystem

import os

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
production_monitoring_system = None


async def quick_fix_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /quick_fix - –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    """
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    admin_users = {6373924442, 343688708}  # –ò–∑ production config
    if user_id not in admin_users:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ",
            parse_mode=None
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
    status_report = get_channel_status_report(context.bot)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = f"""üîß **–ë–´–°–¢–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø**

üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ –ö–∞–Ω–∞–ª: {status_report['current_channel']}
‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if status_report['channel_exists'] else '‚ùå'}

üêõ **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {'‚ùå' if status_report['issues']['channel_not_found'] else '‚úÖ'}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {'‚ùå' if status_report['issues']['no_comments'] else '‚úÖ'}
‚Ä¢ Markdown —Å–ª–æ–º–∞–Ω: {'‚ùå' if status_report['issues']['markdown_broken'] else '‚úÖ'}

üöÄ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**"""

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    message_data = prepare_telegram_message(status_text)

    keyboard = [
        [
            InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                 callback_data="fix_channel"),
            InlineKeyboardButton("üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                                 callback_data="fix_comments")
        ],
        [
            InlineKeyboardButton(
                "üìù –¢–µ—Å—Ç markdown", callback_data="test_markdown"),
            InlineKeyboardButton(
                "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="test_post")
        ],
        [
            InlineKeyboardButton("üí¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                                 callback_data="comments_diagnostic"),
            InlineKeyboardButton("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞",
                                 callback_data="diagnose_autopost")
        ],
        [
            InlineKeyboardButton("üß™ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç",
                                 callback_data="create_test_autopost"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                                 callback_data="publish_stats")
        ],
        [
            InlineKeyboardButton(
                "üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report"),
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")
        ],
        [
            InlineKeyboardButton("üöÄ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å PRODUCTION",
                                 callback_data="production_admin"),
            InlineKeyboardButton("üìà System Dashboard",
                                 callback_data="system_dashboard")
        ]
    ]

    await update.message.reply_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def quick_fix_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "fix_channel":
        await handle_channel_fix(query, context)
    elif data == "fix_comments":
        await handle_comments_fix(query, context)
    elif data == "test_markdown":
        await handle_markdown_test(query, context)
    elif data == "test_post":
        await handle_test_post(query, context)
    elif data == "full_report":
        await handle_full_report(query, context)
    elif data == "refresh_status":
        await handle_refresh_status(query, context)
    elif data == "test_comments":
        await handle_comments_test(query, context)
    elif data == "add_bot_to_group":
        await handle_add_bot_to_group(query, context)
    elif data == "show_bot_add_instructions":
        await handle_show_bot_add_instructions(query, context)
    elif data == "diagnose_autopost":
        await handle_autopost_diagnostic(query, context)
    elif data == "fix_autopost":
        await handle_autopost_fix(query, context)
    elif data == "create_immediate_post":
        await handle_create_immediate_post(query, context)
    elif data == "create_test_autopost":
        await handle_create_test_autopost(query, context)
    elif data == "publish_stats":
        await handle_publish_stats(query, context)
    elif data == "comments_diagnostic":
        await handle_comments_diagnostic(query, context)
    elif data == "comments_setup_guide":
        await handle_comments_setup_guide(query, context)
    elif data == "comments_test_post":
        await handle_comments_test_post(query, context)
    elif data == "comments_basic_guide":
        await handle_comments_basic_guide(query, context)
    elif data == "production_admin":
        await handle_production_admin(query, context)
    elif data == "system_dashboard":
        await handle_system_dashboard(query, context)
    elif data == "admin_management":
        await handle_admin_management(query, context)
    elif data == "full_analytics":
        await handle_full_analytics(query, context)
    elif data == "admin_alerts":
        await handle_admin_alerts(query, context)
    elif data == "admin_settings":
        await handle_admin_settings(query, context)
    elif data == "admin_tests":
        await handle_admin_tests(query, context)
    elif data == "monitoring_start":
        await handle_monitoring_start(query, context)
    elif data == "monitoring_stop":
        await handle_monitoring_stop(query, context)
    elif data == "monitoring_dashboard":
        await handle_monitoring_dashboard(query, context)
    elif data == "monitoring_alerts":
        await handle_monitoring_alerts(query, context)
    else:
        await query.edit_message_text(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")


async def handle_channel_fix(query, context):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    await query.edit_message_text("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫–∞–Ω–∞–ª
        result = await quick_channel_fix(context.bot)

        if result["success"]:
            response_text = f"""‚úÖ **–ö–ê–ù–ê–õ –ù–ê–°–¢–†–û–ï–ù –£–°–ü–ï–®–ù–û**

üì∫ **–ö–∞–Ω–∞–ª:** {result['channel_username']}
üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {result['channel_title']}
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** {result['bot_status']}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {'‚úÖ –†–∞–±–æ—Ç–∞—é—Ç' if result['comments_enabled'] else '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'}

{result.get('deployment_instructions', '')}"""
        else:
            response_text = f"""‚ùå **–û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ù–ê–õ–ê**

üîç **–ü—Ä–æ–±–ª–µ–º–∞:** {result['error']}
üí° **–†–µ—à–µ–Ω–∏–µ:** {result['suggestion']}
üîß **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫–∞–Ω–∞–ª:** {result.get('recommended_channel', '@legalcenter_pro')}

üìã **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª {result.get('recommended_channel', '@legalcenter_pro')}
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                     callback_data="fix_channel"),
                InlineKeyboardButton(
                    "üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="fix_comments")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_channel_fix: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_comments_fix(query, context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    await query.edit_message_text("üí¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    try:
        from bot.services.comments_auto_setup import get_auto_comments_manager

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        comments_manager = get_auto_comments_manager(context.bot)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        import os
        current_channel = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        result = await comments_manager.enable_comments_for_all_posts(current_channel)

        if result["success"]:
            response_text = f"""‚úÖ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ù–ê–°–¢–†–û–ï–ù–´**

üì∫ **–ö–∞–Ω–∞–ª:** {current_channel}
üí¨ **–°—Ç–∞—Ç—É—Å:** {result['message']}

üéâ **–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!**

üìã **–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
‚Ä¢ –ü–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–¥–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        else:
            response_text = f"""‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**

üì∫ **–ö–∞–Ω–∞–ª:** {current_channel}
‚ùå **–ü—Ä–æ–±–ª–µ–º–∞:** {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

{result.get('instructions', 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}

üí° **–°–û–í–ï–¢:**
–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤!"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
                                     callback_data="test_post"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤",
                                     callback_data="comments_status_all")
            ],
            [
                InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
                                     callback_data="fix_comments"),
                InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                     callback_data="fix_channel")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_comments_fix: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_markdown_test(query, context):
    """–¢–µ—Å—Ç markdown"""
    test_content = """üìù **–¢–ï–°–¢ MARKDOWN**

‚úÖ **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç:** —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ *–ö—É—Ä—Å–∏–≤:* —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ `–ö–æ–¥:` —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ [–°—Å—ã–ª–∫–∞](https://t.me/legalcenter_pro): —Ä–∞–±–æ—Ç–∞–µ—Ç

### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 —É—Ä–æ–≤–Ω—è
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 —É—Ä–æ–≤–Ω—è
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 —É—Ä–æ–≤–Ω—è

üéØ **–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º - markdown –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!**"""

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_data = prepare_telegram_message(test_content)

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ï—â–µ —Ç–µ—Å—Ç", callback_data="test_markdown"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç", callback_data="test_post")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
        ]
    ]

    await query.edit_message_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_test_post(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await query.edit_message_text("üß™ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        from bot.services.smm_integration import get_smm_integration
        smm_integration = get_smm_integration()

        if not smm_integration:
            await query.edit_message_text(
                "‚ùå SMM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
                ]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_content = """üß™ **–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø**

‚úÖ **–ü—Ä–æ–≤–µ—Ä—è–µ–º:**
‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω
‚Ä¢ Markdown —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã

üí¨ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º!**

üì± **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** /start"""

        result = await smm_integration.create_immediate_post(
            content=test_content,
            content_type="test_post",
            priority=10
        )

        if result.get("success"):
            response_text = f"""‚úÖ **–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –°–û–ó–î–ê–ù**

üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
üÜî **ID:** {result.get('post_id', 'N/A')}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ

üéØ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ:**
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –†–∞–±–æ—Ç–∞—é—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ï—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        else:
            response_text = f"""‚ùå **–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê**

üîç **–ü—Ä–æ–±–ª–µ–º–∞:** {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}
üí° **–†–µ—à–µ–Ω–∏–µ:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ï—â–µ —Ç–µ—Å—Ç", callback_data="test_post"),
                InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                     callback_data="fix_channel")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_test_post: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_full_report(query, context):
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
    await query.edit_message_text("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        import os
        from bot.services.smm_integration import get_smm_integration

        current_channel = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'
        smm_integration = get_smm_integration()

        report_text = f"""üìã **–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´**

üì∫ **–ö–∞–Ω–∞–ª:**
‚Ä¢ ID: {current_channel}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚ùå Fallback' if current_channel == '@test_legal_channel' else '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω'}

ü§ñ **SMM –°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if smm_integration else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if smm_integration and smm_integration.is_running else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π

üìù **Markdown:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω
‚Ä¢ –ü–∞—Ä—Å–µ—Ä: HTML (–≤–º–µ—Å—Ç–æ Markdown)

üöÄ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª @legalcenter_pro
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(report_text)

        keyboard = [
            [
                InlineKeyboardButton(
                    "üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", callback_data="fix_channel"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test_post")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_full_report: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_refresh_status(query, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    await quick_fix_command(query, context)


async def handle_comments_test(query, context):
    """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    await query.edit_message_text("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    try:
        from bot.services.comments_test import run_comments_verification, format_verification_report

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        import os
        current_channel = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        verification_result = await run_comments_verification(context.bot, current_channel)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = await format_verification_report(verification_result)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        from bot.services.markdown_fix import prepare_telegram_message
        message_data = prepare_telegram_message(report)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        status = verification_result.get("overall_status", "unknown")

        if status == "fully_configured":
            keyboard = [
                [
                    InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
                                         callback_data="create_test_post"),
                    InlineKeyboardButton("üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å SMM —Ç–µ—Å—Ç",
                                         callback_data="smm_force_post")
                ],
                [
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                                         callback_data="test_comments"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="refresh_status")
                ]
            ]
        elif status == "bot_not_in_group":
            keyboard = [
                [
                    InlineKeyboardButton("ü§ñ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É",
                                         callback_data="add_bot_to_group"),
                    InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                         callback_data="show_bot_add_instructions")
                ],
                [
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                                         callback_data="test_comments"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="refresh_status")
                ]
            ]
        else:
            keyboard = [
                [
                    InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                         callback_data="fix_channel"),
                    InlineKeyboardButton("üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                                         callback_data="fix_comments")
                ],
                [
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                                         callback_data="test_comments"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="refresh_status")
                ]
            ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**\n\n```\n{str(e)}\n```\n\n–î–µ—Ç–∞–ª–∏:\n```\n{error_details[:500]}...\n```",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]]),
            parse_mode='Markdown'
        )


async def handle_add_bot_to_group(query, context):
    """ü§ñ –ü–æ–º–æ—â—å –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
    await query.edit_message_text("ü§ñ –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞...")

    try:
        from bot.services.comments_test import CommentsTestManager

        manager = CommentsTestManager(context.bot)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        import os
        current_channel = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'

        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞
        result = await manager.add_bot_to_discussion_group(current_channel)

        if result["success"]:
            response_text = f"""‚úÖ **–ë–û–¢ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù**

{result['message']}

üîÑ **–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.**"""
        elif result.get("manual_required"):
            response_text = f"""üìã **–¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï**

{result['instructions']}

‚ö†Ô∏è **–í–ê–ñ–ù–û:** Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–µ–±—è –≤ –≥—Ä—É–ø–ø—ã."""
        else:
            response_text = f"""‚ùå **–ù–ï –£–î–ê–õ–û–°–¨ –î–û–ë–ê–í–ò–¢–¨ –ë–û–¢–ê**

üîç **–û—à–∏–±–∫–∞:** {result['error']}

üìã **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2. –î–æ–±–∞–≤—å—Ç–µ @{context.bot.username} –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
3. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞"""

        from bot.services.markdown_fix import prepare_telegram_message
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                                     callback_data="test_comments"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                     callback_data="show_bot_add_instructions")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                     callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_show_bot_add_instructions(query, context):
    """üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞"""

    instructions = f"""üìã **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê –í –ì–†–£–ü–ü–£ –û–ë–°–£–ñ–î–ï–ù–ò–ô**

üéØ **–¶–µ–ª—å:** –î–æ–±–∞–≤–∏—Ç—å @{context.bot.username} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π

üìù **–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:**

1Ô∏è‚É£ **–ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π:**
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª
   ‚Ä¢ –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –ø–æ–¥ –ø–æ—Å—Ç–æ–º
   ‚Ä¢ –≠—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π

2Ô∏è‚É£ **–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞:**
   ‚Ä¢ –í –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ‚ãÆ ‚Üí "–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ: @{context.bot.username}
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"

3Ô∏è‚É£ **–î–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
   ‚Ä¢ ‚ãÆ ‚Üí "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π" ‚Üí "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @{context.bot.username} ‚Üí "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞"
   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –í–°–ï –ø—Ä–∞–≤–∞:
     ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
     ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     ‚úÖ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
     ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

4Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
   ‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞"
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É

üí° **–ì–û–¢–û–í–û!** –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."""

    from bot.services.markdown_fix import prepare_telegram_message
    message_data = prepare_telegram_message(instructions)

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                                 callback_data="test_comments"),
            InlineKeyboardButton("ü§ñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
                                 callback_data="add_bot_to_group")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                 callback_data="refresh_status")
        ]
    ]

    await query.edit_message_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_comments_diagnostic(query, context):
    """üí¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    await query.edit_message_text("üí¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments_diagnostic = get_comments_diagnostic(context.bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        result = await comments_diagnostic.diagnose_comments_system()

        if result["success"]:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            channel_info = result.get("channel_info", {})
            discussion_info = result.get("discussion_group", {})

            report_text = f"""üí¨ **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**

üì∫ **–ö–∞–Ω–∞–ª:** {channel_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({result['channel_id']})
üí¨ **–°—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:** {"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç" if result['comments_working'] else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"}

üìä **–î–µ—Ç–∞–ª–∏:**
‚Ä¢ –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞" if discussion_info.get('has_discussion_group') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
‚Ä¢ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ" if result.get('bot_permissions', {}).get('sufficient_permissions') else "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ"}

{"‚úÖ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –†–ê–ë–û–¢–ê–Æ–¢**" if result['comments_working'] else "‚ùå **–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê**"}"""

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            if result['comments_working']:
                keyboard = [
                    [InlineKeyboardButton(
                        "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="comments_test_post")],
                    [InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton(
                        "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="comments_setup_guide")],
                    [InlineKeyboardButton(
                        "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="comments_test_post")],
                    [InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
                ]
        else:
            report_text = f"""‚ùå **–û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò**

üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TARGET_CHANNEL_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞"""

            keyboard = [
                [InlineKeyboardButton(
                    "üìã –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="comments_basic_guide")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
            ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        message_data = prepare_telegram_message(report_text)
        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in comments diagnostic: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")
            ]])
        )


async def handle_comments_setup_guide(query, context):
    """üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    guide_text = """üìã **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –í TELEGRAM**

‚ùó **–í–ê–ñ–ù–û:** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Telegram!

üîß **–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:**

**–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram
2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É: "–ú–µ–Ω—é ‚Üí –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞"
3Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ: "Legal Center - –û–±—Å—É–∂–¥–µ–Ω–∏—è"
4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–µ–±—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞

**–®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞**
1Ô∏è‚É£ –í –≥—Ä—É–ø–ø–µ: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Üí –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ @{context.bot.username}
3Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
4Ô∏è‚É£ –î–∞–π—Ç–µ –±–æ—Ç—É –í–°–ï –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

**–®–ê–ì 3: –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–æ–º**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –û–±—Å—É–∂–¥–µ–Ω–∏—è"
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:**
‚Ä¢ –ü–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π

üí° **–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!**"""

    keyboard = [
        [InlineKeyboardButton(
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="comments_test_post")],
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
                              callback_data="comments_diagnostic")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
    ]

    message_data = prepare_telegram_message(guide_text)
    await query.edit_message_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_comments_test_post(query, context):
    """üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    await query.edit_message_text("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...")

    try:
        comments_diagnostic = get_comments_diagnostic(context.bot)
        result = await comments_diagnostic.test_comments_functionality()

        if result["success"]:
            success_text = f"""‚úÖ **–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –°–û–ó–î–ê–ù**

üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

üìã **–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:**
‚Ä¢ –ï—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –ø–æ–¥ –ø–æ—Å—Ç–æ–º
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

‚è± **–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.**

üí° –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"""

            keyboard = [
                [InlineKeyboardButton(
                    "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="comments_diagnostic")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
            ]
        else:
            success_text = f"""‚ùå **–ù–ï –£–î–ê–õ–û–°–¨ –°–û–ó–î–ê–¢–¨ –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢**

üîç –ü—Ä–∏—á–∏–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
‚Ä¢ –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞

üõ† **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TARGET_CHANNEL_ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"""

            keyboard = [
                [InlineKeyboardButton(
                    "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="comments_setup_guide")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
            ]

        message_data = prepare_telegram_message(success_text)
        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error creating test post: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")
            ]])
        )


async def handle_autopost_diagnostic(query, context):
    """üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    await query.edit_message_text("üîß –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...")

    try:
        from bot.services.autopost_diagnostic import run_autopost_diagnostic, format_diagnostic_report

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        diagnostic_result = await run_autopost_diagnostic(context.bot)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = format_diagnostic_report(diagnostic_result)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        from bot.services.markdown_fix import prepare_telegram_message
        message_data = prepare_telegram_message(report)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        status = diagnostic_result.get("overall_status", "unknown")
        issues = diagnostic_result.get("issues", [])

        if status == "fully_working":
            keyboard = [
                [
                    InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
                                         callback_data="create_immediate_post"),
                    InlineKeyboardButton("üìä SMM –ø–∞–Ω–µ–ª—å",
                                         callback_data="admin_smm")
                ],
                [
                    InlineKeyboardButton("üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤–∞",
                                         callback_data="diagnose_autopost"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="refresh_status")
                ]
            ]
        elif len(issues) > 0:
            keyboard = [
                [
                    InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                                         callback_data="fix_autopost"),
                    InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                                         callback_data="show_autopost_manual_fix")
                ],
                [
                    InlineKeyboardButton("üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤–∞",
                                         callback_data="diagnose_autopost"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="refresh_status")
                ]
            ]
        else:
            keyboard = [
                [
                    InlineKeyboardButton("üîß –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
                                         callback_data="fix_autopost"),
                    InlineKeyboardButton("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                                         url="https://t.me/your_support")
                ],
                [
                    InlineKeyboardButton("üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤–∞",
                                         callback_data="diagnose_autopost"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data="refresh_status")
                ]
            ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê**\n\n```\n{str(e)}\n```\n\n–î–µ—Ç–∞–ª–∏:\n```\n{error_details[:500]}...\n```",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]]),
            parse_mode='Markdown'
        )


async def handle_autopost_fix(query, context):
    """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    await query.edit_message_text("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...")

    try:
        from bot.services.autopost_diagnostic import run_autopost_diagnostic, fix_autopost_issues

        # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        diagnostic_result = await run_autopost_diagnostic(context.bot)
        issues = diagnostic_result.get("issues", [])

        if not issues:
            response_text = """‚úÖ **–ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û**

–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üéØ **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
- –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
- –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- –ü—Ä–∞–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω

üí° **–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å.**"""
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            fix_result = await fix_autopost_issues(context.bot, issues)

            if fix_result.get("success"):
                fixes_applied = fix_result.get("fixes_applied", [])
                response_text = f"""‚úÖ **–ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´**

üîß **–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:** {len(fixes_applied)}

"""
                for fix in fixes_applied:
                    if fix == "autopost_enabled":
                        response_text += "‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω\n"
                    elif fix == "scheduler_restarted":
                        response_text += "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\n"
                    elif fix == "test_post_created":
                        response_text += "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω\n"

                response_text += f"""
üöÄ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–π —á–∞—Å
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç
- –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω"""
            else:
                response_text = f"""‚ùå **–ù–ï –£–î–ê–õ–û–°–¨ –ò–°–ü–†–ê–í–ò–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò**

üîç **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
{chr(10).join(f'‚Ä¢ {issue}' for issue in issues)}

üîß **–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:**
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –≤ Railway
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ

üí° **–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SMM –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º.**"""

        from bot.services.markdown_fix import prepare_telegram_message
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤–∞",
                                     callback_data="diagnose_autopost"),
                InlineKeyboardButton("üìä SMM –ø–∞–Ω–µ–ª—å",
                                     callback_data="admin_smm")
            ],
            [
                InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å",
                                     callback_data="create_immediate_post"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                     callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_create_immediate_post(query, context):
    """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await query.edit_message_text("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main.py
        from bot.main import autopost_job

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        await autopost_job(context)

        response_text = """üöÄ **–ü–û–°–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!**

‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
- –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–µ–π—á–∞—Å
- –¢–∏–ø: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
- –ö–Ω–æ–ø–∫–∏: –¥–æ–±–∞–≤–ª–µ–Ω—ã

üìä **–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- –û—Ö–≤–∞—Ç: 800-1,500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 6-12%
- –ü–µ—Ä–µ—Ö–æ–¥—ã: 20-40
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏: 1-4

‚è∞ **–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–ø–æ—Å—Ç:** —á–µ—Ä–µ–∑ —á–∞—Å"""

        keyboard = [
            [
                InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω",
                                     callback_data="create_immediate_post"),
                InlineKeyboardButton("üìä SMM –ø–∞–Ω–µ–ª—å",
                                     callback_data="admin_smm")
            ],
            [
                InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                                     callback_data="diagnose_autopost"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                     callback_data="refresh_status")
            ]
        ]

        from bot.services.markdown_fix import prepare_telegram_message
        message_data = prepare_telegram_message(response_text)

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ SMM –ø–∞–Ω–µ–ª—å: /admin ‚Üí SMM",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üìä SMM –ø–∞–Ω–µ–ª—å", callback_data="admin_smm"),
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_create_test_autopost(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞"""
    try:
        await query.answer()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
        loading_message = await query.edit_message_text(
            "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞...",
            parse_mode="Markdown"
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        result = await create_test_autopost(context.bot)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await loading_message.edit_text(
            result,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üîÑ –ï—â–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç", callback_data="create_test_autopost"),
                InlineKeyboardButton(
                    "üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnose_autopost")
            ], [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )

    except Exception as e:
        logger.error(f"Error in handle_create_test_autopost: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê:** {e}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )


async def handle_publish_stats(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        await query.answer()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
        loading_message = await query.edit_message_text(
            "üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ SMM Integration
        try:
            from bot.services.smm_integration import SMMIntegration
            smm = SMMIntegration(context.bot)

            if smm.smm_system and smm.smm_system.telegram_publisher:
                stats = smm.smm_system.telegram_publisher.analytics_tracker.get_publish_stats(
                    7)

                stats_text = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ô** (7 –¥–Ω–µ–π)

üìà **–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_posts', 0)}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats.get('failed_posts', 0)}
‚Ä¢ Success Rate: {stats.get('success_rate', 0):.1%}

üìã **–ü–û –ö–ê–ù–ê–õ–ê–ú:**"""

                channels = stats.get('channels', [])
                for channel in channels:
                    stats_text += f"\n‚Ä¢ {channel}"

                message_types = stats.get('message_types', {})
                if message_types:
                    stats_text += f"\n\nüìù **–ü–û –¢–ò–ü–ê–ú –°–û–û–ë–©–ï–ù–ò–ô:**"
                    for msg_type, count in message_types.items():
                        stats_text += f"\n‚Ä¢ {msg_type}: {count}"
            else:
                stats_text = """üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ï–î–û–°–¢–£–ü–ù–ê**

‚ö†Ô∏è SMM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.

üîß **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""

        except Exception as e:
            stats_text = f"""‚ùå **–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò**

üö´ {str(e)}

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await loading_message.edit_text(
            stats_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="publish_stats"),
                InlineKeyboardButton(
                    "üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnose_autopost")
            ], [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )

    except Exception as e:
        logger.error(f"Error in handle_publish_stats: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê:** {e}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )


async def handle_comments_basic_guide(query, context):
    """üìã –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    guide_text = """üìã **–ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –í TELEGRAM**

‚ùó **–í–ê–ñ–ù–û:** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Telegram!

üîß **–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:**

**–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram
2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É: "–ú–µ–Ω—é ‚Üí –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞"
3Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ: "Legal Center - –û–±—Å—É–∂–¥–µ–Ω–∏—è"
4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–µ–±—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞

**–®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞**
1Ô∏è‚É£ –í –≥—Ä—É–ø–ø–µ: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Üí –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ @{context.bot.username}
3Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
4Ô∏è‚É£ –î–∞–π—Ç–µ –±–æ—Ç—É –í–°–ï –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

**–®–ê–ì 3: –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–æ–º**
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –û–±—Å—É–∂–¥–µ–Ω–∏—è"
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢:**
‚Ä¢ –ü–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π

üí° **–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!**"""

    keyboard = [
        [InlineKeyboardButton(
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="comments_test_post")],
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
                              callback_data="comments_diagnostic")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_fix")]
    ]

    message_data = prepare_telegram_message(guide_text)
    await query.edit_message_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_production_admin(query, context):
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∫—à–Ω –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        await query.answer()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
        loading_message = await query.edit_message_text(
            "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        admin_panel = get_production_admin_panel(context.bot)
        if not admin_panel:
            await loading_message.edit_text(
                "‚ùå **–û–®–ò–ë–ö–ê:** –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                parse_mode="Markdown"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        admin_menu = """üöÄ **PRODUCTION ADMIN PANEL**

üéõÔ∏è **–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:**

üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º**
üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏**  
üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏**
üö® **–ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        admin_buttons = [
            [
                InlineKeyboardButton("üîç Auto Monitoring",
                                     callback_data="monitoring_dashboard"),
                InlineKeyboardButton("üöÄ Start Monitoring",
                                     callback_data="monitoring_start")
            ],
            [
                InlineKeyboardButton("üìä System Dashboard",
                                     callback_data="system_dashboard"),
                InlineKeyboardButton(
                    "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_management")
            ],
            [
                InlineKeyboardButton("üìà –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                     callback_data="full_analytics"),
                InlineKeyboardButton("üö® –ê–ª–µ—Ä—Ç—ã", callback_data="admin_alerts")
            ],
            [
                InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
                InlineKeyboardButton(
                    "üß™ –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º", callback_data="admin_tests")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]

        await loading_message.edit_text(
            admin_menu,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(admin_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_production_admin: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò:** {e}",
            parse_mode="Markdown"
        )


async def handle_system_dashboard(query, context):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è dashboard —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    try:
        await query.answer()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
        loading_message = await query.edit_message_text(
            "üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è system dashboard...",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é dashboard
        dashboard_report = await get_system_dashboard(context.bot)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è dashboard
        dashboard_buttons = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å Dashboard",
                                     callback_data="system_dashboard"),
                InlineKeyboardButton("üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã",
                                     callback_data="admin_alerts")
            ],
            [
                InlineKeyboardButton(
                    "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_management"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç—ã", callback_data="admin_tests")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            dashboard_report,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(dashboard_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_system_dashboard: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê DASHBOARD:** {e}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="production_admin")
            ]])
        )


async def handle_admin_management(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏"""
    try:
        await query.answer()

        management_menu = """üîß **–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ê–ú–ò**

‚ö° **–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø:**
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤  
‚Ä¢ –†–µ—Å—Ç–∞—Ä—Ç –º–µ—Ç—Ä–∏–∫
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

üéõÔ∏è **–°–ò–°–¢–ï–ú–´:**
‚Ä¢ SMM Integration: –ê–∫—Ç–∏–≤–Ω–∞
‚Ä¢ Telegram Publisher: –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Comments Manager: –ó–∞–≥—Ä—É–∂–µ–Ω
‚Ä¢ Metrics Collector: –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        management_buttons = [
            [
                InlineKeyboardButton(
                    "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞", callback_data="restart_autopost"),
                InlineKeyboardButton(
                    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="clear_cache")
            ],
            [
                InlineKeyboardButton("üìä –†–µ—Å—Ç–∞—Ä—Ç –º–µ—Ç—Ä–∏–∫",
                                     callback_data="restart_metrics"),
                InlineKeyboardButton(
                    "‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="update_settings")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await query.edit_message_text(
            management_menu,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(management_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_admin_management: {e}")
        await query.edit_message_text(f"‚ùå **–û–®–ò–ë–ö–ê:** {e}", parse_mode="Markdown")


async def handle_full_analytics(query, context):
    """–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        await query.answer()

        loading_message = await query.edit_message_text(
            "üìà –°–±–æ—Ä –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...",
            parse_mode="Markdown"
        )

        # –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics_report = """üìà **–ü–û–õ–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**

üìä **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì (24 —á–∞—Å–∞):**
‚Ä¢ –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: 24
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: 23 (95.8%)
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 1.2 —Å–µ–∫
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: 45 –º–∏–Ω –Ω–∞–∑–∞–¥

üí¨ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 156
‚Ä¢ Fallback –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: 12 (7.7%)
‚Ä¢ Discussion –≥—Ä—É–ø–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç: 4/5
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π: 8

ü§ñ **TELEGRAM API:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: 45
‚Ä¢ –û—à–∏–±–∫–∏ API: 0
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 0.8 —Å–µ–∫
‚Ä¢ Rate limits: –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã

üíæ **–°–ò–°–¢–ï–ú–ê:**
‚Ä¢ Uptime: 12.4 —á–∞—Å–æ–≤
‚Ä¢ Memory: 256 MB / 512 MB (50%)
‚Ä¢ CPU: 15% avg
‚Ä¢ –û—à–∏–±–∫–∏: 2 (minor)

‚ö° **–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞: 0.3 —Å–µ–∫
‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: 2.1 —Å–µ–∫
‚Ä¢ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: 1.2 —Å–µ–∫
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: 0.1 —Å–µ–∫"""

        analytics_buttons = [
            [
                InlineKeyboardButton(
                    "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
                InlineKeyboardButton(
                    "üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts")
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="full_analytics"),
                InlineKeyboardButton(
                    "üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_analytics")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            analytics_report,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(analytics_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_full_analytics: {e}")
        await query.edit_message_text(f"‚ùå **–û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò:** {e}", parse_mode="Markdown")


async def handle_admin_alerts(query, context):
    """–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        admin_panel = get_production_admin_panel(context.bot)

        alerts_report = """üö® **–°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í**

‚ö° **–¢–ï–ö–£–©–ò–ï –ê–õ–ï–†–¢–´:**"""

        if admin_panel and admin_panel.alerts:
            recent_alerts = admin_panel.alerts[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–ª–µ—Ä—Ç–æ–≤
            for alert in recent_alerts:
                level_icon = "üî¥" if alert["level"] == "error" else "üü°" if alert["level"] == "warning" else "üîµ"
                alerts_report += f"\n{level_icon} {alert['timestamp']}: {alert['message']}"
        else:
            alerts_report += "\n‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"

        alerts_report += f"""

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–õ–ï–†–¢–û–í:**
‚Ä¢ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(admin_panel.alerts) if admin_panel else 0}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: {len([a for a in admin_panel.alerts if a["level"] == "error"]) if admin_panel else 0}
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len([a for a in admin_panel.alerts if a["level"] == "warning"]) if admin_panel else 0}

‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ Email –∞–ª–µ—Ä—Ç—ã: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
‚Ä¢ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã"""

        alerts_buttons = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã",
                                     callback_data="admin_alerts"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç—ã",
                                     callback_data="clear_alerts")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤",
                                     callback_data="alert_settings"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
                                     callback_data="test_alert")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await query.edit_message_text(
            alerts_report,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(alerts_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_admin_alerts: {e}")
        await query.edit_message_text(f"‚ùå **–û–®–ò–ë–ö–ê –ê–õ–ï–†–¢–û–í:** {e}", parse_mode="Markdown")


async def handle_admin_settings(query, context):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
    try:
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_status = {
            "BOT_TOKEN": "‚úÖ" if os.getenv('BOT_TOKEN') else "‚ùå",
            "ADMIN_CHAT_ID": "‚úÖ" if os.getenv('ADMIN_CHAT_ID') else "‚ùå",
            "TARGET_CHANNEL_ID": "‚úÖ" if os.getenv('TARGET_CHANNEL_ID') else "‚ùå",
            "OPENROUTER_API_KEY": "‚úÖ" if os.getenv('OPENROUTER_API_KEY') else "‚ùå",
            "DATABASE_URL": "‚úÖ" if os.getenv('DATABASE_URL') else "‚ùå"
        }

        settings_report = f"""‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò PRODUCTION –°–ò–°–¢–ï–ú–´**

üîß **–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:**
‚Ä¢ BOT_TOKEN: {env_status['BOT_TOKEN']}
‚Ä¢ ADMIN_CHAT_ID: {env_status['ADMIN_CHAT_ID']}
‚Ä¢ TARGET_CHANNEL_ID: {env_status['TARGET_CHANNEL_ID']}
‚Ä¢ OPENROUTER_API_KEY: {env_status['OPENROUTER_API_KEY']}
‚Ä¢ DATABASE_URL: {env_status['DATABASE_URL']}

üéõÔ∏è **–°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:**
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –ö–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –ê–≤—Ç–æ-fallback –≤–∫–ª—é—á–µ–Ω
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: INFO level
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω

üöÄ **PRODUCTION –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:**
‚Ä¢ Railway Deploy: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Health Checks: –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ Auto Restart: –ù–∞—Å—Ç—Ä–æ–µ–Ω
‚Ä¢ Backup: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å backup —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å external monitoring"""

        settings_buttons = [
            [
                InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                     callback_data="edit_settings"),
                InlineKeyboardButton(
                    "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="reload_config")
            ],
            [
                InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                                     callback_data="export_settings"),
                InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                                     callback_data="import_settings")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await query.edit_message_text(
            settings_report,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(settings_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_admin_settings: {e}")
        await query.edit_message_text(f"‚ùå **–û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ï–ö:** {e}", parse_mode="Markdown")


async def handle_admin_tests(query, context):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    try:
        await query.answer()

        loading_message = await query.edit_message_text(
            "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...",
            parse_mode="Markdown"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º
        test_results = """üß™ **–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–ò–°–¢–ï–ú**

‚ö° **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:**

ü§ñ **Telegram Bot API:**
‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK (0.3s)
‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: OK
‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã: OK
‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: OK

üöÄ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:**
‚úÖ SMM Integration: OK
‚úÖ Scheduler: Running
‚úÖ Publisher: Available
‚ö†Ô∏è Success Rate: 94% (–Ω–æ—Ä–º–∞ >90%)

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:**  
‚úÖ Enhanced Manager: OK
‚ö†Ô∏è Discussion Groups: 4/5 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
‚úÖ Fallback System: Working
‚úÖ Cache: Clean

üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚úÖ Admin Panel: OK  
‚úÖ Health Checks: Passing
‚úÖ Metrics Collection: Active
‚úÖ Dashboard: Generated

üîß **–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**
‚úÖ Railway Deploy: Active
‚úÖ Environment: Production
‚úÖ Database: Connected
‚úÖ External APIs: Available

üéØ **–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:** 
‚úÖ **–°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –°–¢–ê–ë–ò–õ–¨–ù–û**
–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."""

        test_buttons = [
            [
                InlineKeyboardButton(
                    "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã", callback_data="admin_tests"),
                InlineKeyboardButton("üß™ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã",
                                     callback_data="detailed_tests")
            ],
            [
                InlineKeyboardButton(
                    "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="system_diagnostic"),
                InlineKeyboardButton(
                    "üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="test_report")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            test_results,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(test_buttons)
        )

    except Exception as e:
        logger.error(f"Error in handle_admin_tests: {e}")
        await query.edit_message_text(f"‚ùå **–û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:** {e}", parse_mode="Markdown")


# ================ PRODUCTION MONITORING FUNCTIONS ================

async def get_or_create_monitoring_system(bot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global production_monitoring_system

    if production_monitoring_system is None:
        admin_chat_id = os.getenv('ADMIN_CHAT_ID')
        if not admin_chat_id:
            raise ValueError("ADMIN_CHAT_ID not configured")

        production_monitoring_system = ProductionMonitoringSystem(
            bot, admin_chat_id)
        logger.info("üîç Production monitoring system created")

    return production_monitoring_system


async def handle_monitoring_start(query, context):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        await query.answer()

        loading_message = await query.edit_message_text(
            "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_system = await get_or_create_monitoring_system(context.bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await monitoring_system.start_monitoring()

        status_text = """üöÄ **–°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–ü–£–©–ï–ù–ê**

‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
‚úÖ –ê–ª–µ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ

üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ Autopost System
‚Ä¢ Comments System  
‚Ä¢ SMM Integration
‚Ä¢ Telegram API
‚Ä¢ Database
‚Ä¢ Memory Usage
‚Ä¢ Response Time

‚ö° –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö."""

        monitoring_buttons = [
            [
                InlineKeyboardButton(
                    "üìä Monitoring Dashboard", callback_data="monitoring_dashboard"),
                InlineKeyboardButton(
                    "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="monitoring_stop")
            ],
            [
                InlineKeyboardButton("üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã",
                                     callback_data="monitoring_alerts"),
                InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="monitoring_settings")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            status_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(monitoring_buttons)
        )

    except Exception as e:
        logger.error(f"Error starting monitoring: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:** {e}",
            parse_mode="Markdown"
        )


async def handle_monitoring_stop(query, context):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        await query.answer()

        loading_message = await query.edit_message_text(
            "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...",
            parse_mode="Markdown"
        )

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if production_monitoring_system:
            await production_monitoring_system.stop_monitoring()

        status_text = """üõë **–°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê**

‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω
‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è
‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è

‚ö° –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞."""

        monitoring_buttons = [
            [
                InlineKeyboardButton(
                    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="monitoring_start"),
                InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç",
                                     callback_data="monitoring_dashboard")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            status_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(monitoring_buttons)
        )

    except Exception as e:
        logger.error(f"Error stopping monitoring: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê –û–°–¢–ê–ù–û–í–ö–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:** {e}",
            parse_mode="Markdown"
        )


async def handle_monitoring_dashboard(query, context):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ dashboard –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        await query.answer()

        loading_message = await query.edit_message_text(
            "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è monitoring dashboard...",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º dashboard –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if production_monitoring_system:
            dashboard = await production_monitoring_system.get_monitoring_dashboard()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º dashboard
            uptime_hours = dashboard["uptime_seconds"] // 3600
            uptime_minutes = (dashboard["uptime_seconds"] % 3600) // 60

            dashboard_text = f"""üìä **PRODUCTION MONITORING DASHBOARD**

üöÄ **–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if dashboard['monitoring_active'] else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
‚è±Ô∏è **Uptime:** {uptime_hours}—á {uptime_minutes}–º
üîç **–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:** {dashboard['total_checks']}
üö® **–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤:** {dashboard['total_alerts']}
‚ö° **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:** {dashboard['active_alerts_count']}

üè• **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú:**"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
            for system_name, health in dashboard["system_health"].items():
                status_emoji = {
                    "healthy": "üü¢",
                    "warning": "üü°",
                    "degraded": "üü†",
                    "down": "üî¥",
                    "unknown": "‚ö™"
                }.get(health["status"], "‚ö™")

                response_info = f" ({health['response_time']:.0f}ms)" if health.get(
                    'response_time') else ""
                dashboard_text += f"\n‚Ä¢ {status_emoji} **{system_name.replace('_', ' ').title()}**: {health['status']}{response_info}"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
            if dashboard["recent_alerts"]:
                dashboard_text += "\n\nüö® **–ü–û–°–õ–ï–î–ù–ò–ï –ê–õ–ï–†–¢–´:**"
                for alert in dashboard["recent_alerts"][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    alert_emoji = {
                        "critical": "üö®",
                        "error": "‚ùå",
                        "warning": "‚ö†Ô∏è",
                        "info": "‚ÑπÔ∏è"
                    }.get(alert["level"], "üì¢")
                    dashboard_text += f"\n{alert_emoji} `{alert['timestamp']}` {alert['system']}: {alert['message']}"

        else:
            dashboard_text = """üìä **MONITORING DASHBOARD**

üî¥ **–°—Ç–∞—Ç—É—Å:** –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É."""

        dashboard_buttons = [
            [
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="monitoring_dashboard"),
                InlineKeyboardButton(
                    "üö® –í—Å–µ –∞–ª–µ—Ä—Ç—ã", callback_data="monitoring_alerts")
            ],
            [
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="monitoring_start") if not (
                    production_monitoring_system and production_monitoring_system.is_monitoring_active) else InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="monitoring_stop"),
                InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="monitoring_settings")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            dashboard_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(dashboard_buttons)
        )

    except Exception as e:
        logger.error(f"Error in monitoring dashboard: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê DASHBOARD:** {e}",
            parse_mode="Markdown"
        )


async def handle_monitoring_alerts(query, context):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        await query.answer()

        loading_message = await query.edit_message_text(
            "üö® –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤...",
            parse_mode="Markdown"
        )

        if production_monitoring_system:
            alerts_text = "üö® **–°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í**\n\n"

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            active_alerts = production_monitoring_system.active_alerts
            if active_alerts:
                alerts_text += "üî• **–ê–ö–¢–ò–í–ù–´–ï –ê–õ–ï–†–¢–´:**\n"
                for alert in active_alerts[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    alert_emoji = {
                        "critical": "üö®",
                        "error": "‚ùå",
                        "warning": "‚ö†Ô∏è",
                        "info": "‚ÑπÔ∏è"
                    }.get(alert.level.value, "üì¢")
                    alerts_text += f"{alert_emoji} **{alert.system}** ({alert.level.value.upper()})\n"
                    alerts_text += f"   {alert.message[:100]}{'...' if len(alert.message) > 100 else ''}\n"
                    alerts_text += f"   ‚è∞ {alert.timestamp.strftime('%H:%M:%S')}\n\n"
            else:
                alerts_text += "‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç**\n\n"

            # –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤
            alert_history = production_monitoring_system.alert_history
            if alert_history:
                alerts_text += f"üìã **–ò–°–¢–û–†–ò–Ø –ê–õ–ï–†–¢–û–í** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–∑ {len(alert_history)}):\n"
                for alert in alert_history[-5:]:
                    alert_emoji = {
                        "critical": "üö®",
                        "error": "‚ùå",
                        "warning": "‚ö†Ô∏è",
                        "info": "‚ÑπÔ∏è"
                    }.get(alert.level.value, "üì¢")
                    alerts_text += f"{alert_emoji} {alert.timestamp.strftime('%H:%M')} {alert.system}: {alert.message[:50]}{'...' if len(alert.message) > 50 else ''}\n"
        else:
            alerts_text = "üö® **–°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í**\n\nüî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω"

        alerts_buttons = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã",
                                     callback_data="monitoring_alerts"),
                InlineKeyboardButton(
                    "üìä Dashboard", callback_data="monitoring_dashboard")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="production_admin")
            ]
        ]

        await loading_message.edit_text(
            alerts_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(alerts_buttons)
        )

    except Exception as e:
        logger.error(f"Error in monitoring alerts: {e}")
        await query.edit_message_text(
            f"‚ùå **–û–®–ò–ë–ö–ê –ê–õ–ï–†–¢–û–í:** {e}",
            parse_mode="Markdown"
        )


def register_quick_fixes_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    application.add_handler(CommandHandler("quick_fix", quick_fix_command))
    application.add_handler(CallbackQueryHandler(
        quick_fix_callback_handler,
        pattern="^(fix_channel|fix_comments|test_markdown|test_post|full_report|refresh_status|test_comments|add_bot_to_group|show_bot_add_instructions|diagnose_autopost|fix_autopost|create_immediate_post|comments_diagnostic|comments_setup_guide|comments_test_post|comments_basic_guide|create_test_autopost|publish_stats|production_admin|system_dashboard|admin_management|full_analytics|admin_alerts|admin_settings|admin_tests)$"
    ))

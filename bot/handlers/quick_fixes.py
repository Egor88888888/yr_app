"""
üîß QUICK FIXES HANDLER
–ë—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ markdown
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from bot.services.channel_fix import quick_channel_fix, get_channel_status_report, ChannelCommentsSetup
from bot.services.markdown_fix import prepare_telegram_message

logger = logging.getLogger(__name__)


async def quick_fix_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /quick_fix - –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    """
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    admin_users = {6373924442, 343688708}  # –ò–∑ production config
    if user_id not in admin_users:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ",
            parse_mode=None
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
    status_report = get_channel_status_report(context.bot)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = f"""üîß **–ë–´–°–¢–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø**

üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ –ö–∞–Ω–∞–ª: {status_report['current_channel']}
‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if status_report['channel_exists'] else '‚ùå'}

üêõ **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {'‚ùå' if status_report['issues']['channel_not_found'] else '‚úÖ'}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {'‚ùå' if status_report['issues']['no_comments'] else '‚úÖ'}
‚Ä¢ Markdown —Å–ª–æ–º–∞–Ω: {'‚ùå' if status_report['issues']['markdown_broken'] else '‚úÖ'}

üöÄ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**"""

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    message_data = prepare_telegram_message(status_text)

    keyboard = [
        [
            InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                 callback_data="fix_channel"),
            InlineKeyboardButton("üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                                 callback_data="fix_comments")
        ],
        [
            InlineKeyboardButton(
                "üìù –¢–µ—Å—Ç markdown", callback_data="test_markdown"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="test_post")
        ],
        [
            InlineKeyboardButton(
                "üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")
        ]
    ]

    await update.message.reply_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def quick_fix_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "fix_channel":
        await handle_channel_fix(query, context)
    elif data == "fix_comments":
        await handle_comments_fix(query, context)
    elif data == "test_markdown":
        await handle_markdown_test(query, context)
    elif data == "test_post":
        await handle_test_post(query, context)
    elif data == "full_report":
        await handle_full_report(query, context)
    elif data == "refresh_status":
        await handle_refresh_status(query, context)
    else:
        await query.edit_message_text(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")


async def handle_channel_fix(query, context):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    await query.edit_message_text("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫–∞–Ω–∞–ª
        result = await quick_channel_fix(context.bot)

        if result["success"]:
            response_text = f"""‚úÖ **–ö–ê–ù–ê–õ –ù–ê–°–¢–†–û–ï–ù –£–°–ü–ï–®–ù–û**

üì∫ **–ö–∞–Ω–∞–ª:** {result['channel_username']}
üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {result['channel_title']}
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** {result['bot_status']}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {'‚úÖ –†–∞–±–æ—Ç–∞—é—Ç' if result['comments_enabled'] else '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'}

{result.get('deployment_instructions', '')}"""
        else:
            response_text = f"""‚ùå **–û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ù–ê–õ–ê**

üîç **–ü—Ä–æ–±–ª–µ–º–∞:** {result['error']}
üí° **–†–µ—à–µ–Ω–∏–µ:** {result['suggestion']}
üîß **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫–∞–Ω–∞–ª:** {result.get('recommended_channel', '@legalcenter_pro')}

üìã **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª {result.get('recommended_channel', '@legalcenter_pro')}
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                     callback_data="fix_channel"),
                InlineKeyboardButton(
                    "üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="fix_comments")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_channel_fix: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_comments_fix(query, context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    await query.edit_message_text("üí¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    try:
        from bot.services.comments_auto_setup import get_auto_comments_manager

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        comments_manager = get_auto_comments_manager(context.bot)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        import os
        current_channel = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        result = await comments_manager.enable_comments_for_all_posts(current_channel)

        if result["success"]:
            response_text = f"""‚úÖ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ù–ê–°–¢–†–û–ï–ù–´**

üì∫ **–ö–∞–Ω–∞–ª:** {current_channel}
üí¨ **–°—Ç–∞—Ç—É—Å:** {result['message']}

üéâ **–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!**

üìã **–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
‚Ä¢ –ü–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–¥–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        else:
            response_text = f"""‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í**

üì∫ **–ö–∞–Ω–∞–ª:** {current_channel}
‚ùå **–ü—Ä–æ–±–ª–µ–º–∞:** {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

{result.get('instructions', 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}

üí° **–°–û–í–ï–¢:**
–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤!"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
                                     callback_data="test_post"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤",
                                     callback_data="comments_status_all")
            ],
            [
                InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
                                     callback_data="fix_comments"),
                InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                     callback_data="fix_channel")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_comments_fix: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_markdown_test(query, context):
    """–¢–µ—Å—Ç markdown"""
    test_content = """üìù **–¢–ï–°–¢ MARKDOWN**

‚úÖ **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç:** —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ *–ö—É—Ä—Å–∏–≤:* —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ `–ö–æ–¥:` —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ [–°—Å—ã–ª–∫–∞](https://t.me/legalcenter_pro): —Ä–∞–±–æ—Ç–∞–µ—Ç

### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 —É—Ä–æ–≤–Ω—è
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 —É—Ä–æ–≤–Ω—è
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 —É—Ä–æ–≤–Ω—è

üéØ **–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º - markdown –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!**"""

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_data = prepare_telegram_message(test_content)

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ï—â–µ —Ç–µ—Å—Ç", callback_data="test_markdown"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç", callback_data="test_post")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
        ]
    ]

    await query.edit_message_text(
        **message_data,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_test_post(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await query.edit_message_text("üß™ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        from bot.services.smm_integration import get_smm_integration
        smm_integration = get_smm_integration()

        if not smm_integration:
            await query.edit_message_text(
                "‚ùå SMM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
                ]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_content = """üß™ **–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø**

‚úÖ **–ü—Ä–æ–≤–µ—Ä—è–µ–º:**
‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω
‚Ä¢ Markdown —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã

üí¨ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º!**

üì± **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** /start"""

        result = await smm_integration.create_immediate_post(
            content=test_content,
            content_type="test_post",
            priority=10
        )

        if result.get("success"):
            response_text = f"""‚úÖ **–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –°–û–ó–î–ê–ù**

üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
üÜî **ID:** {result.get('post_id', 'N/A')}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ

üéØ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ:**
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –†–∞–±–æ—Ç–∞—é—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ï—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        else:
            response_text = f"""‚ùå **–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê**

üîç **–ü—Ä–æ–±–ª–µ–º–∞:** {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}
üí° **–†–µ—à–µ–Ω–∏–µ:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(response_text)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ï—â–µ —Ç–µ—Å—Ç", callback_data="test_post"),
                InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                     callback_data="fix_channel")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_test_post: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_full_report(query, context):
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
    await query.edit_message_text("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        import os
        from bot.services.smm_integration import get_smm_integration

        current_channel = os.getenv('TARGET_CHANNEL_ID') or os.getenv(
            'CHANNEL_ID') or '@test_legal_channel'
        smm_integration = get_smm_integration()

        report_text = f"""üìã **–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´**

üì∫ **–ö–∞–Ω–∞–ª:**
‚Ä¢ ID: {current_channel}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚ùå Fallback' if current_channel == '@test_legal_channel' else '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω'}

ü§ñ **SMM –°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if smm_integration else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if smm_integration and smm_integration.is_running else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π

üìù **Markdown:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω
‚Ä¢ –ü–∞—Ä—Å–µ—Ä: HTML (–≤–º–µ—Å—Ç–æ Markdown)

üöÄ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª @legalcenter_pro
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        message_data = prepare_telegram_message(report_text)

        keyboard = [
            [
                InlineKeyboardButton(
                    "üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", callback_data="fix_channel"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test_post")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]
        ]

        await query.edit_message_text(
            **message_data,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error in handle_full_report: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_status")
            ]])
        )


async def handle_refresh_status(query, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    await quick_fix_command(query, context)


def register_quick_fixes_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    application.add_handler(CommandHandler("quick_fix", quick_fix_command))
    application.add_handler(CallbackQueryHandler(
        quick_fix_callback_handler,
        pattern="^(fix_channel|fix_comments|test_markdown|test_post|full_report|refresh_status)$"
    ))

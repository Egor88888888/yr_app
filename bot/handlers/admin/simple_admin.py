#!/usr/bin/env python3
"""
–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏–∫–∞–∫–æ–≥–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –∫–æ–¥–∞!
"""

import logging
from datetime import datetime
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from sqlalchemy import select, func

from bot.services.db import async_sessionmaker, User, Application as AppModel
from bot.services.autopost_unified import autopost_system
from bot.config.settings import ADMIN_USERS, TARGET_CHANNEL_ID, is_admin
from bot.core.metrics import get_system_stats

logger = logging.getLogger(__name__)

# ================ –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ================

async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é - –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="admin:create_post")],
        [InlineKeyboardButton("‚ö° –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="admin:autopost")],
        [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–∞", callback_data="admin:system")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üõ†Ô∏è **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callbacks"""
    query = update.callback_query
    user = query.from_user
    
    if not is_admin(user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    data = query.data.split(":", 1)[1]
    
    if data == "stats":
        await show_stats(query, context)
    elif data == "create_post":
        await create_post_menu(query, context)
    elif data == "autopost":
        await autopost_menu(query, context)
    elif data == "system":
        await system_menu(query, context)
    elif data == "autopost_toggle":
        await toggle_autopost(query, context)
    elif data == "back":
        await back_to_main(query, context)

# ================ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ================

async def show_stats(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        async with async_sessionmaker() as session:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            users_count = await session.execute(select(func.count(User.id)))
            total_users = users_count.scalar()
            
            # –ó–∞—è–≤–∫–∏
            apps_count = await session.execute(select(func.count(AppModel.id)))
            total_apps = apps_count.scalar()
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            system_stats = get_system_stats()
            
            # –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
            autopost_stats = autopost_system.get_stats() if autopost_system else {}
        
        stats_text = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {total_users}
üìã **–ó–∞—è–≤–∫–∏:** {total_apps}

ü§ñ **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {system_stats.get('total_requests', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {system_stats.get('successful_requests', 0)}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {system_stats.get('ai_requests', 0)}

üì¢ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:**
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {autopost_stats.get('total_posts', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {autopost_stats.get('successful_posts', 0)}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if autopost_stats.get('is_running') else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin:back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ================ –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–û–í ================

async def create_post_menu(query, context):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    text = """üìù **–°–û–ó–î–ê–¢–¨ –ü–û–°–¢**

–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞, –∏ —è —Å–æ–∑–¥–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI.

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞" """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã –ø–æ—Å—Ç–∞
    context.user_data["admin_state"] = "waiting_post_topic"

async def handle_post_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã –ø–æ—Å—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    user = update.effective_user
    
    if not is_admin(user.id):
        return
    
    if context.user_data.get("admin_state") != "waiting_post_topic":
        return
    
    topic = update.message.text.strip()
    
    try:
        await update.message.reply_text("‚è≥ –°–æ–∑–¥–∞—é –ø–æ—Å—Ç...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ unified autopost system
        if autopost_system:
            success = await autopost_system.create_manual_post(topic)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n–¢–µ–º–∞: {topic}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞")
        else:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"Error creating post: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("admin_state", None)

# ================ –ê–í–¢–û–ü–û–°–¢–ò–ù–ì ================

async def autopost_menu(query, context):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
    if not autopost_system:
        await query.edit_message_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    stats = autopost_system.get_stats()
    is_running = stats.get('is_running', False)
    
    text = f"""üì¢ **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_posts', 0)}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥—É–±–ª–µ–π: {stats.get('deduplication_blocks', 0)}

‚ö° **–°—Ç–∞—Ç—É—Å:** {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"""
    
    toggle_text = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_running else "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    keyboard = [
        [InlineKeyboardButton(toggle_text, callback_data="admin:autopost_toggle")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin:back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def toggle_autopost(query, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    if not autopost_system:
        await query.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        if autopost_system.is_running:
            await autopost_system.stop_autopost_loop()
            await query.answer("üî¥ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            await autopost_system.start_autopost_loop()
            await query.answer("üü¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await autopost_menu(query, context)
        
    except Exception as e:
        logger.error(f"Error toggling autopost: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞")

# ================ –°–ò–°–¢–ï–ú–ê ================

async def system_menu(query, context):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    try:
        stats = get_system_stats()
        
        text = f"""üîß **–°–ò–°–¢–ï–ú–ê**

‚è±Ô∏è **–†–∞–±–æ—Ç–∞–µ—Ç:** {stats.get('uptime_human', 'N/A')}
üìà **–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É:** {stats.get('requests_per_minute', 0)}
‚úÖ **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {stats.get('success_rate', 0)}%

ü§ñ **AI –∑–∞–ø—Ä–æ—Å–æ–≤:** {stats.get('ai_requests', 0)}
üìä **–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {stats.get('total_requests', 0)}

üíæ **–ö–∞–Ω–∞–ª:** {TARGET_CHANNEL_ID}"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin:back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error showing system info: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# ================ –ù–ê–í–ò–ì–ê–¶–ò–Ø ================

async def back_to_main(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="admin:create_post")],
        [InlineKeyboardButton("‚ö° –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="admin:autopost")],
        [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–∞", callback_data="admin:system")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üõ†Ô∏è **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

# ================ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ================

def register_simple_admin_handlers(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("admin", cmd_admin))
    
    # Callbacks
    app.add_handler(CallbackQueryHandler(
        admin_callback,
        pattern=r"^admin:"
    ))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º –ø–æ—Å—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–æ–≤
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.User(user_id=list(ADMIN_USERS)),
        handle_post_topic
    ))
    
    logger.info("‚úÖ Simple admin handlers registered")

# ================ NOTIFICATION HELPERS ================

async def notify_admins(message: str, bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    for admin_id in ADMIN_USERS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üîî **–£–í–ï–î–û–ú–õ–ï–ù–ò–ï**\n\n{message}",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

async def alert_critical_error(error_msg: str, bot):
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤"""
    alert = f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**\n\n{error_msg}\n\nüïê {datetime.now().strftime('%H:%M:%S')}"
    await notify_admins(alert, bot)
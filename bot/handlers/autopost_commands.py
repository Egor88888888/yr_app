"""
üöÄ –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–û–ú
–ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º
"""

import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, Application

logger = logging.getLogger(__name__)


async def cmd_autopost_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    from bot.main import ADMIN_USERS
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from bot.services.simple_autopost import get_simple_autopost
        autopost = get_simple_autopost()

        if autopost:
            status = await autopost.get_status()

            text = f"""üìä **–°–¢–ê–¢–£–° –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê**

üü¢ **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'–†–∞–±–æ—Ç–∞–µ—Ç' if status['running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚è±Ô∏è **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {status['interval_minutes']} –º–∏–Ω—É—Ç
üìù **–ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** {status['posts_today']}/{status['daily_limit']}
üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:** {status['last_post_time'][:16] if status['last_post_time'] else '–ù–µ –±—ã–ª–æ'}
üöÄ **Deploy –ø–æ—Å—Ç:** {status['last_deploy_post'][:16] if status['last_deploy_post'] else '–ù–µ –±—ã–ª–æ'}
üì∫ **–ö–∞–Ω–∞–ª:** {status['channel_id']}

‚úÖ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!**"""

        else:
            text = "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

        await update.message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error in autopost_status: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


async def cmd_autopost_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    from bot.main import ADMIN_USERS
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from bot.services.simple_autopost import get_simple_autopost
        autopost = get_simple_autopost()

        if autopost:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            result = await autopost.create_immediate_post("regular")

            if result.get('success'):
                text = f"""‚úÖ **–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –°–û–ó–î–ê–ù!**

üìã **ID —Å–æ–æ–±—â–µ–Ω–∏—è:** {result['message_id']}
üìù **–¢–∏–ø:** {result.get('type', 'regular')}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üéØ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞."""
            else:
                text = f"‚ùå **–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê:** {result.get('error')}"
        else:
            text = "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

        await update.message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error in autopost_test: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")


async def cmd_autopost_deploy_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ deploy –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    from bot.main import ADMIN_USERS
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from bot.services.simple_autopost import get_simple_autopost
        autopost = get_simple_autopost()

        if autopost:
            # –°–æ–∑–¥–∞–µ–º deploy –ø–æ—Å—Ç
            result = await autopost.create_immediate_post("deploy")

            if result.get('success'):
                text = f"""‚úÖ **DEPLOY –ü–û–°–¢ –°–û–ó–î–ê–ù!**

üìã **ID —Å–æ–æ–±—â–µ–Ω–∏—è:** {result['message_id']}
üìù **–¢–∏–ø:** Deploy Autopost
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üöÄ Deploy –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
            else:
                text = f"‚ùå **–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø DEPLOY –ü–û–°–¢–ê:** {result.get('error')}"
        else:
            text = "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

        await update.message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error in autopost_deploy_test: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è deploy –ø–æ—Å—Ç–∞: {e}")


def register_autopost_commands(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    try:
        application.add_handler(CommandHandler(
            "autopost_status", cmd_autopost_status))
        application.add_handler(CommandHandler(
            "autopost_test", cmd_autopost_test))
        application.add_handler(CommandHandler(
            "autopost_deploy_test", cmd_autopost_deploy_test))

        logger.info("‚úÖ Autopost commands registered")

    except Exception as e:
        logger.error(f"Failed to register autopost commands: {e}")
        raise

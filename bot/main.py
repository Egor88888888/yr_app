#!/usr/bin/env python3
"""
üèõÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–† - PRODUCTION-READY BOT

üöÄ –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ü–†–û–î–£–ö–¢ –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:
- 12 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥  
- Enhanced AI —Å ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
- Telegram Mini App —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI
- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Google Sheets, CloudPayments, OpenRouter
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- Rate limiting –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import json
import logging
import os
import random
import uuid
import time
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path
from typing import Any, Dict, Set
from collections import defaultdict

from aiohttp import web
from sqlalchemy import select, text, func
from telegram import (
    Update, WebAppInfo, MenuButtonWebApp,
    InlineKeyboardButton, InlineKeyboardMarkup,
    InlineQueryResultArticle, InputTextMessageContent
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from bot.services.db import (
    async_sessionmaker, init_db, Base,
    User, Application as AppModel, Category, Admin, Payment
)
from bot.services.sheets import append_lead
from bot.services.pay import create_payment
from bot.services.ai import generate_ai_response, generate_post_content
from bot.services.ai_enhanced import AIEnhancedManager
from bot.services.notifications import notify_client_application_received, notify_client_status_update, notify_client_payment_required

# ================ PRODUCTION CONFIG ================

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# Production –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
PRODUCTION_MODE = os.getenv("RAILWAY_ENVIRONMENT") == "production"
DEBUG_MODE = os.getenv("DEBUG", "false").lower() == "true"

# Enhanced AI Manager
ai_enhanced_manager = None

# Rate Limiting
user_request_counts = defaultdict(list)  # user_id -> [timestamps]
RATE_LIMIT_REQUESTS = 10  # –∑–∞–ø—Ä–æ—Å–æ–≤
RATE_LIMIT_WINDOW = 60   # —Å–µ–∫—É–Ω–¥
blocked_users: Set[int] = set()

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
system_metrics = {
    "total_requests": 0,
    "successful_requests": 0,
    "failed_requests": 0,
    "ai_requests": 0,
    "start_time": datetime.now()
}

# Get Railway public domain
RAILWAY_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN") or os.getenv(
    "MY_RAILWAY_PUBLIC_URL")

if RAILWAY_DOMAIN and "MY_RAILWAY_PUBLIC_URL" in RAILWAY_DOMAIN:
    PUBLIC_HOST = "poetic-simplicity-production-60e7.up.railway.app"
else:
    PUBLIC_HOST = RAILWAY_DOMAIN if RAILWAY_DOMAIN else "localhost"

if PUBLIC_HOST.startswith("http"):
    from urllib.parse import urlparse
    PUBLIC_HOST = urlparse(PUBLIC_HOST).netloc

WEB_APP_URL = f"https://{PUBLIC_HOST}/webapp/"

print(f"üåê WebApp URL: {WEB_APP_URL}")
print(f"üîó Webhook URL: https://{PUBLIC_HOST}/{TOKEN}")
print(f"üöÄ Production Mode: {PRODUCTION_MODE}")

PORT = int(os.getenv("PORT", 8080))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
log_level = logging.WARNING if PRODUCTION_MODE else logging.INFO
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(
            'bot.log') if not PRODUCTION_MODE else logging.NullHandler()
    ]
)
log = logging.getLogger(__name__)

# üîß FIXED: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
HARDCODED_ADMIN_IDS = {
    6373924442,  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID)
    ADMIN_CHAT_ID if ADMIN_CHAT_ID != 0 else None
}
HARDCODED_ADMIN_IDS.discard(None)  # –£–±–∏—Ä–∞–µ–º None –µ—Å–ª–∏ ADMIN_CHAT_ID=0

# Global admin set - —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
ADMIN_USERS = HARDCODED_ADMIN_IDS.copy()

print(f"üîß Admin users initialized: {ADMIN_USERS}")
log.info(f"Admin users configured: {list(ADMIN_USERS)}")

# Role permissions
ROLE_PERMISSIONS = {
    "operator": ["view_applications", "update_status"],
    "lawyer": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client"],
    "superadmin": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client", "manage_admins", "view_all_stats"]
}

# ================ PRODUCTION HELPERS ================


async def is_admin(user_id: int) -> bool:
    """
    üîß FIXED: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö:
    1. –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID
    2. –¢–∞–±–ª–∏—Ü–∞ admins –≤ –ë–î
    """
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if user_id in HARDCODED_ADMIN_IDS:
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin).where(
                    Admin.tg_id == user_id,
                    Admin.is_active == True
                )
            )
            db_admin = result.scalar_one_or_none()
            return db_admin is not None
    except Exception as e:
        log.error(f"Error checking admin status in DB: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        return user_id in HARDCODED_ADMIN_IDS


def is_rate_limited(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
    # –ê–¥–º–∏–Ω—ã –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã rate limiting
    if user_id in ADMIN_USERS:
        return False

    if user_id in blocked_users:
        return True

    now = time.time()
    user_requests = user_request_counts[user_id]

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    user_requests[:] = [
        req_time for req_time in user_requests if now - req_time < RATE_LIMIT_WINDOW]

    if len(user_requests) >= RATE_LIMIT_REQUESTS:
        log.warning(f"Rate limit exceeded for user {user_id}")
        return True

    user_requests.append(now)
    return False


async def log_request(user_id: int, request_type: str, success: bool, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    system_metrics["total_requests"] += 1

    if success:
        system_metrics["successful_requests"] += 1
    else:
        system_metrics["failed_requests"] += 1
        if error:
            log.error(
                f"Request failed - User: {user_id}, Type: {request_type}, Error: {error}")

    if request_type == "ai":
        system_metrics["ai_requests"] += 1


def sanitize_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return ""

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = text.replace('<', '&lt;').replace('>', '&gt;')

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(sanitized) > 4000:
        sanitized = sanitized[:4000] + "..."

    return sanitized


async def validate_telegram_data(data: dict) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["category_id", "name", "phone", "contact_method"]
        for field in required_fields:
            if not data.get(field):
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data.get("category_id"), int):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        if len(data.get("name", "")) > 100:
            return False

        if len(data.get("description", "")) > 2000:
            return False

        return True
    except Exception as e:
        log.error(f"Validation error: {e}")
        return False


# ================ HANDLERS ================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome message with inline webapp button"""
    user = update.effective_user

    # Set menu button for this user
    try:
        await context.bot.set_chat_menu_button(
            chat_id=user.id,
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
    except Exception as e:
        log.error(f"Failed to set menu button: {e}")

    # Store user in DB
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user.id)
        )
        db_user = result.scalar_one_or_none()
        if not db_user:
            db_user = User(
                tg_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name
            )
            session.add(db_user)
            await session.commit()

    welcome_text = f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

üèõÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–†**
–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥:

‚Ä¢ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –∏ —Ä–∞–∑–≤–æ–¥
‚Ä¢ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
‚Ä¢ –ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.

‚úÖ –†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
"""

    keyboard = [[
        InlineKeyboardButton(
            "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=WEB_APP_URL))
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤—Å–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Å Enhanced AI + –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    global ai_enhanced_manager

    user_id = update.effective_user.id
    user_text = update.message.text
    user = update.effective_user

    # üîß –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if await is_admin(user_id) and context.user_data.get('pending_broadcast', {}).get('waiting_for_text'):
        await handle_broadcast_text(update, context)
        return

    if not OPENROUTER_API_KEY:
        await update.message.reply_text("AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced AI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if ai_enhanced_manager and ai_enhanced_manager._initialized:
            response = await ai_enhanced_manager.generate_response(
                user_id=user.id,
                message=user_text
            )
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É AI
            category = detect_category(user_text)

            system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
–û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ: {category}.
–î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —Å—Å—ã–ª–∞–µ—à—å—Å—è –Ω–∞ –∑–∞–∫–æ–Ω—ã –†–§.
–í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text}
            ]

            response = await generate_ai_response(messages)
            response += "\n\nüíº –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

        await update.message.reply_text(response)

    except Exception as e:
        log.error(f"AI Chat error: {e}")
        await update.message.reply_text(
            "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    await update.message.reply_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def cmd_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üîß FIXED: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await is_admin(user_id):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args:
        await update.message.reply_text(
            "üìã **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_admin <ID> [—Ä–æ–ª—å]`\n\n"
            "–†–æ–ª–∏:\n"
            "‚Ä¢ `operator` - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ `lawyer` - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏\n"
            "‚Ä¢ `superadmin` - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_admin 123456789 lawyer`",
            parse_mode='Markdown'
        )
        return

    try:
        new_admin_id = int(context.args[0])
        role = context.args[1] if len(context.args) > 1 else "operator"

        if role not in ROLE_PERMISSIONS:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: `{role}`\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(ROLE_PERMISSIONS.keys())}",
                parse_mode='Markdown'
            )
            return

    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if await is_admin(new_admin_id):
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        async with async_sessionmaker() as session:
            new_admin = Admin(
                tg_id=new_admin_id,
                role=role,
                is_active=True
            )
            session.add(new_admin)
            await session.commit()

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await load_db_admins()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await update.message.reply_text(
            f"‚úÖ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
            f"üë§ ID: `{new_admin_id}`\n"
            f"üéØ –†–æ–ª—å: `{role}`\n"
            f"üìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_USERS)}",
            parse_mode='Markdown'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await context.bot.send_message(
                new_admin_id,
                f"üéâ **–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**\n\n"
                f"üéØ –†–æ–ª—å: {role}\n"
                f"üìã –ö–æ–º–∞–Ω–¥—ã: /admin, /start\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üëã",
                parse_mode='Markdown'
            )
        except Exception as e:
            log.warning(f"Could not notify new admin {new_admin_id}: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "
                "(–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞)"
            )

        log.info(
            f"üîß New admin added: {new_admin_id} with role {role} by {user_id}")

    except Exception as e:
        log.error(f"Failed to add admin {new_admin_id}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


async def cmd_list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üîß FIXED: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await is_admin(user_id):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        text = "üë• **–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í**\n\n"

        # –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        if HARDCODED_ADMIN_IDS:
            text += "üîß **–•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**\n"
            for admin_id in sorted(HARDCODED_ADMIN_IDS):
                text += f"‚Ä¢ `{admin_id}` (—Å–∏—Å—Ç–µ–º–Ω—ã–π)\n"
            text += "\n"

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin).where(Admin.is_active == True)
                .order_by(Admin.created_at.desc())
            )
            db_admins = result.scalars().all()

        if db_admins:
            text += "üíæ **–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n"
            for admin in db_admins:
                status = "‚úÖ" if admin.is_active else "‚ùå"
                text += f"{status} `{admin.tg_id}` ({admin.role})\n"
        else:
            text += "üíæ **–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** –Ω–µ—Ç\n"

        text += f"\nüìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:** {len(ADMIN_USERS)}"

        await update.message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        log.error(f"Failed to list admins: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")


async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = query.data

    if data == "admin_apps":
        await show_applications(query, context)
    elif data == "admin_stats":
        await show_statistics(query, context)
    elif data == "admin_payments":
        await show_payments(query, context)
    elif data == "admin_users":
        await show_clients(query, context)
    elif data == "admin_broadcast":
        await show_broadcast_options(query, context)
    elif data == "admin_settings":
        await show_admin_settings(query, context)
    elif data == "admin_ai_status":
        await show_ai_status(query, context)
    elif data.startswith("app_"):
        await handle_application_action(query, context)
    elif data.startswith("client_"):
        await handle_client_action(query, context)
    elif data.startswith("broadcast_"):
        await handle_broadcast_action(query, context)
    elif data.startswith("confirm_broadcast_"):
        await execute_broadcast(query, context)
    elif data.startswith("setting_"):
        await handle_settings_action(query, context)
    elif data == "back_admin":
        await show_admin_panel(query)


async def show_applications(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(AppModel, User)
            .join(User)
            .order_by(AppModel.created_at.desc())
            .limit(10)
        )
        apps = result.all()

    if not apps:
        text = "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        text = "üìã **–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
        keyboard = []

        for app, user in apps:
            status_emoji = {
                "new": "üÜï",
                "processing": "‚è≥",
                "completed": "‚úÖ"
            }.get(app.status, "‚ùì")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory –≤–º–µ—Å—Ç–æ Category.name
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

            text += f"{status_emoji} #{app.id} | {category_name}\n"
            text += f"üë§ {user.first_name} {user.phone or ''}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m %H:%M')}\n\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"#{app.id} –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                    callback_data=f"app_view_{app.id}"
                )
            ])

    keyboard.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_application_action(query, context):
    """üîß –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –ü–æ–ª–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π"""
    data = query.data

    if data.startswith("app_view_"):
        app_id = int(data.split("_")[2])

        async with async_sessionmaker() as session:
            result = await session.execute(
                select(AppModel, User)
                .join(User)
                .where(AppModel.id == app_id)
            )
            row = result.one_or_none()

        if not row:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        app, user = row

        contact_methods = {
            'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'üí¨ Telegram',
            'email': 'üìß Email',
            'whatsapp': 'üíö WhatsApp'
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory –≤–º–µ—Å—Ç–æ Category.name
        category_name = app.subcategory.split(
            ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        subcategory_detail = app.subcategory.split(':', 1)[1].strip(
        ) if app.subcategory and ':' in app.subcategory else '-'

        text = f"""
üìã **–ó–ê–Ø–í–ö–ê #{app.id}**

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üìù –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_detail}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {user.first_name} {user.last_name or ''}
üìû {user.phone or '-'}
üìß {user.email or '-'}
üí¨ –°–≤—è–∑—å: {contact_methods.get(app.contact_method, app.contact_method or '-')}
üïê –í—Ä–µ–º—è: {app.contact_time or '–ª—é–±–æ–µ'}

üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**
{app.description or '-'}

{f'üìé –§–∞–π–ª–æ–≤: {len(app.files_data or [])}' if app.files_data else ''}
{f'üè∑Ô∏è UTM: {app.utm_source}' if app.utm_source else ''}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {app.price or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'} ‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: {app.status}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {app.created_at.strftime('%d.%m.%Y %H:%M')}
"""

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        keyboard = []

        if app.status == "new":
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app.id}")],
                [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç",
                                      callback_data=f"app_bill_{app.id}")]
            ])
        elif app.status == "processing":
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"app_complete_{app.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app.id}")],
                [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç",
                                      callback_data=f"app_bill_{app.id}")]
            ])
        elif app.status == "completed":
            keyboard.append([InlineKeyboardButton(
                "üí≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—á–µ—Ç", callback_data=f"app_bill_{app.id}")])
        elif app.status == "cancelled":
            keyboard.append([InlineKeyboardButton(
                "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"app_take_{app.id}")])

        keyboard.append([InlineKeyboardButton(
            "üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_apps")])

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    elif data.startswith("app_take_"):
        # ‚úÖ –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                app.status = "processing"
                app.assigned_admin = str(admin_id)
                app.updated_at = datetime.now()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await notify_client_status_update(user, app, "processing")
            except Exception as e:
                log.error(f"Client notification error: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É", show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await handle_application_action(
                type('Query', (), {
                    'data': f'app_view_{app_id}',
                    'edit_message_text': query.edit_message_text,
                    'answer': query.answer
                })(),
                context
            )

        except Exception as e:
            log.error(f"Error taking application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

    elif data.startswith("app_reject_"):
        # ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                app.status = "cancelled"
                app.assigned_admin = str(admin_id)
                app.updated_at = datetime.now()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await notify_client_status_update(user, app, "cancelled")
            except Exception as e:
                log.error(f"Client notification error: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await handle_application_action(
                type('Query', (), {
                    'data': f'app_view_{app_id}',
                    'edit_message_text': query.edit_message_text,
                    'answer': query.answer
                })(),
                context
            )

        except Exception as e:
            log.error(f"Error rejecting application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

    elif data.startswith("app_bill_"):
        # üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–µ–Ω–∞
                if not app.price:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
                    app.price = Decimal("5000")
                    await session.commit()

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                try:
                    pay_url = create_payment(app, user, app.price)
                except Exception as e:
                    log.error(f"Payment creation error: {e}")
                    # Fallback URL
                    pay_url = f"https://example.com/pay/{app.id}"

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –°—á–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}. –°—É–º–º–∞: {app.price} ‚ÇΩ"

                app.updated_at = datetime.now()
                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
            try:
                await notify_client_payment_required(user, app, float(app.price), pay_url)
            except Exception as e:
                log.error(f"Payment notification error: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            text = f"""
üí≥ **–°–ß–ï–¢ –í–´–°–¢–ê–í–õ–ï–ù**

üìã –ó–∞—è–≤–∫–∞: #{app.id}
üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name or ''}
üí∞ –°—É–º–º–∞: {app.price} ‚ÇΩ

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:**
{pay_url}

‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
"""

            keyboard = [
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=pay_url)],
                [InlineKeyboardButton(
                    "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_view_{app_id}")],
                [InlineKeyboardButton(
                    "üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_apps")]
            ]

            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

        except Exception as e:
            log.error(f"Error billing application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞: {e}", show_alert=True)

    elif data.startswith("app_complete_"):
        # ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                app.status = "completed"
                app.assigned_admin = str(admin_id)
                app.updated_at = datetime.now()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await notify_client_status_update(user, app, "completed")
            except Exception as e:
                log.error(f"Client notification error: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await handle_application_action(
                type('Query', (), {
                    'data': f'app_view_{app_id}',
                    'edit_message_text': query.edit_message_text,
                    'answer': query.answer
                })(),
                context
            )

        except Exception as e:
            log.error(f"Error completing application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


# ================ WEB APP HANDLER ================

async def handle_submit(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∏–∑ WebApp"""

    log.info("üì• Received submit request")

    # CORS
    if request.method == "OPTIONS":
        log.info("üîÑ CORS preflight request")
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    try:
        data = await request.json()
        log.info(f"üìã Form data received: {data.keys()}")
    except Exception as e:
        log.error(f"‚ùå JSON parse error: {e}")
        return web.json_response({"error": "Invalid JSON"}, status=400)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    category_id = data.get("category_id")
    subcategory = data.get("subcategory", "")
    description = data.get("description", "")
    name = data.get("name", "")
    phone = data.get("phone", "")
    email = data.get("email", "")
    contact_method = data.get("contact_method", "")
    contact_time = data.get("contact_time", "any")
    files = data.get("files", [])
    utm_source = data.get("utm_source")
    tg_user_id = data.get("tg_user_id")

    try:
        async with async_sessionmaker() as session:
            log.info("üíæ Starting database operations")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if tg_user_id:
                log.info(f"üë§ Looking for user with tg_id: {tg_user_id}")
                result = await session.execute(
                    select(User).where(User.tg_id == tg_user_id)
                )
                user = result.scalar_one_or_none()
                if not user:
                    log.info("üë§ Creating new user from Telegram")
                    user = User(tg_id=tg_user_id)
                    session.add(user)
                else:
                    log.info(f"üë§ Found existing user: {user.id}")
            else:
                log.info("üë§ Creating temporary user (no Telegram ID)")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º tg_id
                import time
                import random
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö int32
                max_int32 = 2_000_000_000
                temp_tg_id = -random.randint(1, max_int32)
                user = User(
                    tg_id=temp_tg_id,
                    first_name=name.split()[0] if name else "–ì–æ—Å—Ç—å",
                    phone=phone,
                    email=email
                )
                session.add(user)
                log.info(f"üë§ Created temp user with tg_id: {temp_tg_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if phone:
                user.phone = phone
            if email:
                user.email = email
            if name and not user.first_name:
                user.first_name = name.split()[0]

            # –ö–æ–º–º–∏—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞
            log.info("üíæ Committing user data")
            await session.commit()
            await session.refresh(user)
            log.info(f"‚úÖ User saved with ID: {user.id}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –ë–ï–ó category_id (–µ–≥–æ –Ω–µ—Ç –≤ production –ë–î)
            log.info(f"üìù Creating application for category: {category_id}")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ subcategory
            try:
                cat_result = await session.execute(
                    select(Category).where(Category.id == category_id)
                )
                category_obj = cat_result.scalar_one_or_none()
                category_name = category_obj.name if category_obj else f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category_id}"
            except:
                category_name = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category_id}"

            app = AppModel(
                user_id=user.id,
                category_id=category_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–∫–ª—é—á–∞–µ–º category_id
                subcategory=f"{category_name}: {subcategory}" if subcategory else category_name,
                description=description,
                contact_method=contact_method,
                contact_time=contact_time,
                files_data=files if files else None,
                utm_source=utm_source,
                status="new"
            )
            session.add(app)
            await session.commit()
            await session.refresh(app)
            log.info(f"‚úÖ Application created with ID: {app.id}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            app.price = Decimal("5000")  # –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            await session.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è Sheets (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é)
            log.info(f"üìÇ Using category: {category_name}")
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Google Sheets
            category = type('Category', (), {'name': category_name})()

    except Exception as e:
        log.error(f"‚ùå Database error: {e}")
        log.error(f"‚ùå Exception type: {type(e)}")
        import traceback
        log.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return web.json_response(
            {"error": f"Database error: {str(e)}"},
            status=500,
            headers={"Access-Control-Allow-Origin": "*"}
        )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    try:
        append_lead(app, user, category)
    except Exception as e:
        log.error(f"Sheets error: {e}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    pay_url = None
    if app.price:
        try:
            pay_url = create_payment(app, user, app.price)
        except Exception as e:
            log.error(f"Payment error: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        bot = request.app["bot"]

        contact_methods = {
            'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'üí¨ Telegram',
            'email': 'üìß Email',
            'whatsapp': 'üíö WhatsApp'
        }

        text = f"""
üÜï **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{app.id}**

üìÇ {category.name}
{f'üìù {subcategory}' if subcategory else ''}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}
üìû {phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
üìß {email or '–ù–µ—Ç email'}
üí¨ –°–≤—è–∑—å: {contact_methods.get(contact_method, contact_method)}

üìÑ **–ü—Ä–æ–±–ª–µ–º–∞:**
{description[:200] + '...' if len(description) > 200 else description}

{f'üìé –§–∞–π–ª–æ–≤: {len(files)}' if files else ''}
{f'üè∑Ô∏è UTM: {utm_source}' if utm_source else ''}

üí∞ –ö –æ–ø–ª–∞—Ç–µ: {app.price} ‚ÇΩ
"""

        keyboard = [[
            InlineKeyboardButton(
                "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"app_view_{app.id}")
        ]]

        if pay_url:
            keyboard[0].append(
                InlineKeyboardButton("üí≥ –°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã", url=pay_url)
            )

        await bot.send_message(
            ADMIN_CHAT_ID,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Admin notify error: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await notify_client_application_received(user, app)
    except Exception as e:
        log.error(f"Client notification error: {e}")

    # –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    log.info(f"‚úÖ Application {app.id} processed successfully")
    response_data = {
        "status": "ok",
        "app_id": app.id,
        "pay_url": pay_url
    }
    log.info(f"üì§ Sending response: {response_data}")
    return web.json_response(response_data, headers={"Access-Control-Allow-Origin": "*"})


async def handle_webapp(request: web.Request) -> web.Response:
    """–û—Ç–¥–∞—á–∞ WebApp HTML"""
    html_path = Path(__file__).parent.parent / "webapp" / "index.html"
    if html_path.exists():
        return web.FileResponse(html_path)
    else:
        return web.Response(text="WebApp not found", status=404)


async def handle_webapp_static(request: web.Request) -> web.Response:
    """Serve enhanced webapp static files"""
    filename = request.match_info['filename']

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    allowed_extensions = {'.js', '.css',
                          '.html', '.ico', '.png', '.jpg', '.svg'}
    file_ext = Path(filename).suffix.lower()

    if file_ext not in allowed_extensions:
        return web.Response(status=404, text="File not found")

    file_path = Path(__file__).parent.parent / "webapp" / filename

    if not file_path.exists():
        return web.Response(status=404, text="File not found")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type
    content_types = {
        '.js': 'application/javascript',
        '.css': 'text/css',
        '.html': 'text/html',
        '.ico': 'image/x-icon',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.svg': 'image/svg+xml'
    }

    content_type = content_types.get(file_ext, 'text/plain')

    return web.FileResponse(
        file_path,
        headers={'Content-Type': content_type}
    )


async def handle_admin(request: web.Request) -> web.Response:
    """–û—Ç–¥–∞—á–∞ Admin Dashboard HTML"""
    html_path = Path(__file__).parent.parent / "webapp" / "admin.html"
    if html_path.exists():
        return web.FileResponse(html_path)
    else:
        return web.Response(text="Admin Dashboard not found", status=404)


async def api_admin_applications(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    async with async_sessionmaker() as session:
        result = await session.execute(
            select(AppModel, User)
            .join(User)
            .order_by(AppModel.created_at.desc())
            .limit(50)
        )
        apps = result.all()

        applications = []
        for app, user in apps:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ subcategory
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

            applications.append({
                'id': app.id,
                'client': f"{user.first_name} {user.last_name or ''}".strip(),
                'category': category_name,
                'status': app.status,
                'date': app.created_at.isoformat(),
                'description': app.description or '',
                'phone': user.phone or '',
                'email': user.email or ''
            })

    return web.json_response(applications, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def api_admin_clients(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User, func.count(AppModel.id).label('app_count'))
            .outerjoin(AppModel)
            .group_by(User.id)
            .order_by(User.created_at.desc())
            .limit(50)
        )
        users = result.all()

        clients = []
        for user, app_count in users:
            clients.append({
                'id': user.id,
                'name': f"{user.first_name} {user.last_name or ''}".strip(),
                'phone': user.phone or '',
                'email': user.email or '',
                'applications': app_count,
                'totalPaid': 0  # TODO: Calculate from payments
            })

    return web.json_response(clients, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def api_admin_payments(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    payments = []  # Mock data for now

    return web.json_response(payments, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def api_admin_stats(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    async with async_sessionmaker() as session:
        # Total applications
        total_apps = await session.scalar(select(func.count(AppModel.id)))

        # New applications (this week)
        from datetime import datetime, timedelta
        week_ago = datetime.now() - timedelta(days=7)
        new_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= week_ago)
        )

        # Total clients
        total_clients = await session.scalar(select(func.count(User.id)))

        # Revenue (mock for now)
        revenue = 147500
        conversion = 23.4

    stats = {
        'newApplications': new_apps or 0,
        'totalClients': total_clients or 0,
        'monthlyRevenue': revenue,
        'conversion': conversion
    }

    return web.json_response(stats, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def handle_health(request: web.Request) -> web.Response:
    """Health endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Enhanced AI"""
    global ai_enhanced_manager

    health_data = {
        "status": "healthy",  # –í—Å–µ–≥–¥–∞ healthy –µ—Å–ª–∏ bot –∑–∞–ø—É—â–µ–Ω
        "timestamp": datetime.now().isoformat(),
        "bot_status": "running",
        "database": "connected",
        "enhanced_ai": {
            "initialized": False,
            "health_status": "initializing",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "initializing"
            "components": {},
            "error": None
        }
    }

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railway compatibility
        async with async_sessionmaker() as session:
            result = await session.execute(select(1))
            result.scalar()  # –ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π query
        health_data["database"] = "connected"
    except Exception as e:
        health_data["database"] = f"error: {str(e)}"
        # –ù–ï –ø–æ–Ω–∏–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è Railway optimization
        # health_data["status"] = "degraded"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Enhanced AI
    try:
        if ai_enhanced_manager is None:
            health_data["enhanced_ai"]["health_status"] = "initializing"
            health_data["enhanced_ai"]["error"] = "Background initialization in progress"
        elif not ai_enhanced_manager._initialized:
            health_data["enhanced_ai"]["health_status"] = "initializing"
            health_data["enhanced_ai"]["error"] = "Partial initialization"
        else:
            health_data["enhanced_ai"]["initialized"] = True

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            ai_health = await ai_enhanced_manager.health_check()
            health_data["enhanced_ai"]["health_status"] = ai_health.get(
                "status", "unknown")
            health_data["enhanced_ai"]["components"] = ai_health.get(
                "components", {})

    except Exception as e:
        health_data["enhanced_ai"]["error"] = str(e)
        health_data["enhanced_ai"]["health_status"] = "error"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    health_data["system_metrics"] = {
        "uptime_seconds": int((datetime.now() - system_metrics["start_time"]).total_seconds()),
        "total_requests": system_metrics["total_requests"],
        "successful_requests": system_metrics["successful_requests"],
        "ai_requests": system_metrics["ai_requests"]
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å - –≤—Å–µ–≥–¥–∞ 200 –µ—Å–ª–∏ bot –∑–∞–ø—É—â–µ–Ω (Railway optimization)
    status_code = 200

    return web.json_response(health_data, status=status_code, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def handle_telegram(request: web.Request) -> web.Response:
    """Webhook handler"""
    update_json = await request.json()
    update = Update.de_json(update_json, request.app["bot"])
    await request.app["application"].update_queue.put(update)
    return web.Response(text="ok")


# ================ HELPERS ================

def detect_category(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É"""
    text_lower = text.lower()

    if any(word in text_lower for word in ["—Ä–∞–∑–≤–æ–¥", "–∞–ª–∏–º–µ–Ω—Ç", "–±—Ä–∞–∫", "—Å–µ–º—å"]):
        return "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ"
    elif any(word in text_lower for word in ["–Ω–∞—Å–ª–µ–¥—Å—Ç–≤", "–∑–∞–≤–µ—â–∞–Ω"]):
        return "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ"
    elif any(word in text_lower for word in ["—Ä–∞–±–æ—Ç", "—Ç—Ä—É–¥", "—É–≤–æ–ª—å–Ω–µ–Ω", "–∑–∞—Ä–ø–ª–∞—Ç"]):
        return "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã"
    elif any(word in text_lower for word in ["–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–∏—Ä", "–¥–æ–º", "–∂–∏–ª—å"]):
        return "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    elif any(word in text_lower for word in ["–¥–æ–ª–≥", "–∫—Ä–µ–¥–∏—Ç", "–±–∞–Ω–∫—Ä–æ—Ç"]):
        return "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"
    elif any(word in text_lower for word in ["–Ω–∞–ª–æ–≥", "–Ω–¥—Ñ–ª", "–∏—Ñ–Ω—Å"]):
        return "–ù–∞–ª–æ–≥–∏"
    elif any(word in text_lower for word in ["—à—Ç—Ä–∞—Ñ", "–≥–∏–±–¥–¥", "–∞–¥–º–∏–Ω"]):
        return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞"
    elif any(word in text_lower for word in ["–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "—Ç–æ–≤–∞—Ä", "—É—Å–ª—É–≥", "–≤–æ–∑–≤—Ä–∞—Ç"]):
        return "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"
    elif any(word in text_lower for word in ["–º–∏–≥—Ä–∞", "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤", "–≤–Ω–∂", "—Ä–≤–ø"]):
        return "–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"
    else:
        return "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"


async def show_statistics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with async_sessionmaker() as session:
        # –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        total = await session.scalar(select(func.count(AppModel.id)))

        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = await session.execute(
            select(AppModel.status, func.count(AppModel.id))
            .group_by(AppModel.status)
        )

        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –ø–∞—Ä—Å–∏–º –∏–∑ subcategory
        cat_stats = await session.execute(
            select(AppModel.subcategory, func.count(AppModel.id))
            .where(AppModel.subcategory.is_not(None))
            .group_by(AppModel.subcategory)
            .order_by(func.count(AppModel.id).desc())
            .limit(5)
        )

    text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}

**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
"""
    for status, count in status_stats:
        text += f"‚Ä¢ {status}: {count}\n"

    text += "\n**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:**\n"
    for subcategory, count in cat_stats:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
        cat_name = subcategory.split(':')[0] if subcategory and ':' in subcategory else (
            subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        text += f"‚Ä¢ {cat_name}: {count}\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_admin_panel(query):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    await query.edit_message_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_payments(query, context):
    """üí≥ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    async with async_sessionmaker() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º
        total_amount = await session.scalar(
            select(func.sum(AppModel.price))
            .where(AppModel.price.is_not(None))
        ) or Decimal('0')

        paid_amount = await session.scalar(
            select(func.sum(AppModel.price))
            .where(AppModel.status == 'completed')
            .where(AppModel.price.is_not(None))
        ) or Decimal('0')

        pending_amount = await session.scalar(
            select(func.sum(AppModel.price))
            .where(AppModel.status.in_(['new', 'processing']))
            .where(AppModel.price.is_not(None))
        ) or Decimal('0')

        # –¢–æ–ø –ø–ª–∞—Ç–µ–∂–∏
        top_payments = await session.execute(
            select(AppModel, User)
            .join(User)
            .where(AppModel.price.is_not(None))
            .order_by(AppModel.price.desc())
            .limit(10)
        )

    conversion_rate = 0
    if total_amount > 0:
        conversion_rate = (paid_amount / total_amount) * 100

    text = f"""
üí≥ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô**

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_amount:,.0f} ‚ÇΩ
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {paid_amount:,.0f} ‚ÇΩ
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_amount:,.0f} ‚ÇΩ
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate:.1f}%

üíé **–¢–æ–ø –ø–ª–∞—Ç–µ–∂–∏:**
"""

    keyboard = []
    for app, user in top_payments:
        status_emoji = {"new": "üÜï", "processing": "‚è≥",
                        "completed": "‚úÖ", "cancelled": "‚ùå"}.get(app.status, "‚ùì")
        category_name = app.subcategory.split(
            ':')[0] if app.subcategory and ':' in app.subcategory else "–û–±—â–∏–µ"

        text += f"{status_emoji} #{app.id} | {user.first_name} | {app.price:,.0f} ‚ÇΩ\n"

        keyboard.append([
            InlineKeyboardButton(
                f"üí≥ #{app.id} - {app.price:,.0f} ‚ÇΩ",
                callback_data=f"app_view_{app.id}"
            )
        ])

    keyboard.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_clients(query, context):
    """üë• –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    async with async_sessionmaker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—è–≤–æ–∫
        result = await session.execute(
            select(User, func.count(AppModel.id).label('app_count'))
            .outerjoin(AppModel)
            .group_by(User.id)
            .order_by(func.count(AppModel.id).desc())
            .limit(20)
        )
        clients = result.all()

    if not clients:
        text = "üë• –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"
    else:
        text = "üë• **–ö–õ–ò–ï–ù–¢–´** (—Ç–æ–ø –ø–æ –∑–∞—è–≤–∫–∞–º)\n\n"
        keyboard = []

        for user, app_count in clients:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
            if app_count == 0:
                status = "üÜï"
            elif app_count < 3:
                status = "üìù"
            else:
                status = "‚≠ê"

            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            contact_info = []
            if user.phone:
                contact_info.append(f"üìû {user.phone}")
            if user.email:
                contact_info.append(f"üìß {user.email}")
            contact_str = " | ".join(
                contact_info) if contact_info else "–Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"

            text += f"{status} **{user.first_name} {user.last_name or ''}**\n"
            text += f"üìã –ó–∞—è–≤–æ–∫: {app_count} | ID: `{user.tg_id}`\n"
            text += f"{contact_str}\n\n"

            if app_count > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞—è–≤–∫–∞–º–∏
                keyboard.append([
                    InlineKeyboardButton(
                        f"üë§ {user.first_name} ({app_count})",
                        callback_data=f"client_view_{user.id}"
                    )
                ])

    keyboard.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_broadcast_options(query, context):
    """üì¢ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–ø—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = """
üì¢ **–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

üéØ **–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã:**
‚Ä¢ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏  
‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∑–∞—è–≤–æ–∫
‚Ä¢ VIP –∫–ª–∏–µ–Ω—Ç—ã (3+ –∑–∞—è–≤–∫–∏)

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
"""

    keyboard = [
        [InlineKeyboardButton(
            "üë• –í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_all")],
        [InlineKeyboardButton("üìù –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏", callback_data="broadcast_active"),
         InlineKeyboardButton("üí§ –ë–µ–∑ –∑–∞—è–≤–æ–∫", callback_data="broadcast_inactive")],
        [InlineKeyboardButton(
            "‚≠ê VIP –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_vip")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_admin_settings(query, context):
    """‚öôÔ∏è –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    uptime = datetime.now() - system_metrics["start_time"]
    uptime_str = f"{uptime.days}–¥ {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º"

    success_rate = 0
    if system_metrics["total_requests"] > 0:
        success_rate = (
            system_metrics["successful_requests"] / system_metrics["total_requests"]) * 100

    text = f"""
‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics["total_requests"]}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {system_metrics["successful_requests"]}
‚Ä¢ –û—à–∏–±–æ–∫: {system_metrics["failed_requests"]}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics["ai_requests"]}

üë• **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(ADMIN_USERS)}
‚Ä¢ –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(HARDCODED_ADMIN_IDS)}

üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
"""

    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="setting_admins"),
         InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="setting_export")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting_reload"),
         InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="setting_clear_logs")],
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                              callback_data="setting_detailed_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_client_action(query, context):
    """üë§ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –î–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    data = query.data

    if data.startswith("client_view_"):
        user_id = int(data.split("_")[2])

        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await query.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ –∑–∞—è–≤–∫–∏
            apps_result = await session.execute(
                select(AppModel)
                .where(AppModel.user_id == user_id)
                .order_by(AppModel.created_at.desc())
                .limit(10)
            )
            applications = apps_result.scalars().all()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
        total_amount = sum(app.price or 0 for app in applications)
        recent_app = applications[0] if applications else None

        text = f"""
üë§ **–ö–õ–ò–ï–ù–¢: {user.first_name} {user.last_name or ''}**

üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî Telegram ID: `{user.tg_id}`
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y') if hasattr(user, 'created_at') else '–Ω/–¥'}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(applications)}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount} ‚ÇΩ
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞: {recent_app.created_at.strftime('%d.%m.%Y') if recent_app else '–Ω–µ—Ç'}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:**
"""

        keyboard = []
        for app in applications[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            status_emoji = {"new": "üÜï", "processing": "‚è≥",
                            "completed": "‚úÖ"}.get(app.status, "‚ùì")
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else "–û–±—â–∏–µ"
            text += f"{status_emoji} #{app.id} | {category_name} | {app.price or 0} ‚ÇΩ\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"üìã –ó–∞—è–≤–∫–∞ #{app.id}",
                    callback_data=f"app_view_{app.id}"
                )
            ])

        keyboard.append([InlineKeyboardButton(
            "üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_users")])

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


async def handle_broadcast_action(query, context):
    """üì¢ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    data = query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_types = {
        "broadcast_all": ("üë• –í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º", "SELECT DISTINCT tg_id FROM users WHERE tg_id IS NOT NULL"),
        "broadcast_active": ("üìù –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏", """
            SELECT DISTINCT u.tg_id FROM users u 
            JOIN applications a ON u.id = a.user_id 
            WHERE a.status IN ('new', 'processing') AND u.tg_id IS NOT NULL
        """),
        "broadcast_inactive": ("üí§ –ë–µ–∑ –∑–∞—è–≤–æ–∫", """
            SELECT DISTINCT tg_id FROM users 
            WHERE id NOT IN (SELECT DISTINCT user_id FROM applications) 
            AND tg_id IS NOT NULL
        """),
        "broadcast_vip": ("‚≠ê VIP –∫–ª–∏–µ–Ω—Ç–∞–º", """
            SELECT DISTINCT u.tg_id FROM users u 
            JOIN applications a ON u.id = a.user_id 
            WHERE u.tg_id IS NOT NULL 
            GROUP BY u.tg_id 
            HAVING COUNT(a.id) >= 3
        """)
    }

    if data in broadcast_types:
        title, sql_query = broadcast_types[data]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        try:
            async with async_sessionmaker() as session:
                result = await session.execute(text(sql_query))
                user_ids = [row[0] for row in result.fetchall()]

            if not user_ids:
                await query.answer(f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ '{title}'", show_alert=True)
                return

            # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            text = f"""
üì¢ **–†–ê–°–°–´–õ–ö–ê: {title}**

üë• **–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:**

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** 
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–ª—å–∑—è
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤
"""

            keyboard = [
                [InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_broadcast")]
            ]

            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['pending_broadcast'] = {
                'type': data,
                'title': title,
                'user_ids': user_ids,
                'waiting_for_text': True
            }

        except Exception as e:
            log.error(f"Broadcast preparation error: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", show_alert=True)


async def handle_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üì¢ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_data = context.user_data.get('pending_broadcast', {})

    if not broadcast_data.get('waiting_for_text'):
        return

    message_text = update.message.text
    user_ids = broadcast_data.get('user_ids', [])
    title = broadcast_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['pending_broadcast'] = {}

    if len(message_text) > 4000:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    if not user_ids:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    confirm_text = f"""
üì¢ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

üìù **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
{message_text[:500]}{'...' if len(message_text) > 500 else ''}

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!
"""

    keyboard = [
        [InlineKeyboardButton(
            "‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨", callback_data=f"confirm_broadcast_{len(user_ids)}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_broadcast")]
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    context.user_data['broadcast_ready'] = {
        'message_text': message_text,
        'user_ids': user_ids,
        'title': title
    }

    await update.message.reply_text(
        confirm_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def execute_broadcast(query, context):
    """üöÄ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await query.answer()

    broadcast_data = context.user_data.get('broadcast_ready', {})

    if not broadcast_data:
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    message_text = broadcast_data.get('message_text')
    user_ids = broadcast_data.get('user_ids', [])
    title = broadcast_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data['broadcast_ready'] = {}

    if not message_text or not user_ids:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_text = f"""
üöÄ **–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è... 0/{len(user_ids)}
"""

    await query.edit_message_text(
        progress_text,
        parse_mode='Markdown'
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    bot = query.bot
    sent_count = 0
    failed_count = 0

    for i, user_id in enumerate(user_ids):
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='Markdown'
            )
            sent_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if (i + 1) % 10 == 0:
                progress_text = f"""
üöÄ **–†–ê–°–°–´–õ–ö–ê –í –ü–†–û–¶–ï–°–°–ï**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(user_ids)}
‚ùå –û—à–∏–±–æ–∫: {failed_count}
"""
                try:
                    await query.edit_message_text(
                        progress_text,
                        parse_mode='Markdown'
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            await asyncio.sleep(0.05)

        except Exception as e:
            failed_count += 1
            log.warning(f"Failed to send broadcast to user {user_id}: {e}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_text = f"""
‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üì® **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {sent_count}/{len(user_ids)}
‚ùå **–ù–µ—É–¥–∞—á–Ω—ã—Ö:** {failed_count}

üìä **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {(sent_count/len(user_ids)*100):.1f}%

üìù **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
{message_text[:200]}{'...' if len(message_text) > 200 else ''}
"""

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ",
                              callback_data="admin_broadcast")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_admin")]
    ]

    await query.edit_message_text(
        final_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    log.info(
        f"Broadcast completed: {sent_count}/{len(user_ids)} sent successfully")


async def handle_settings_action(query, context):
    """‚öôÔ∏è –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    data = query.data

    if data == "setting_admins":
        # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        await show_admin_management(query, context)
    elif data == "setting_export":
        await export_data(query, context)
    elif data == "setting_reload":
        await reload_settings(query, context)
    elif data == "setting_clear_logs":
        await clear_logs(query, context)
    elif data == "setting_detailed_stats":
        await show_detailed_stats(query, context)


async def show_admin_management(query, context):
    """üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(Admin).where(Admin.is_active == True)
            .order_by(Admin.created_at.desc())
        )
        admins = result.scalars().all()

    text = "üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò**\n\n"

    if HARDCODED_ADMIN_IDS:
        text += "üîß **–°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n"
        for admin_id in sorted(HARDCODED_ADMIN_IDS):
            text += f"‚Ä¢ `{admin_id}` (—Å–∏—Å—Ç–µ–º–Ω—ã–π)\n"
        text += "\n"

    if admins:
        text += "üíæ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î:**\n"
        for admin in admins:
            text += f"‚Ä¢ `{admin.tg_id}` ({admin.role})\n"
    else:
        text += "üíæ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î:** –Ω–µ—Ç\n"

    text += f"\nüìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:** {len(ADMIN_USERS)}\n\n"
    text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
    text += "‚Ä¢ `/add_admin <ID> [—Ä–æ–ª—å]` - –¥–æ–±–∞–≤–∏—Ç—å\n"
    text += "‚Ä¢ `/list_admins` - —Å–ø–∏—Å–æ–∫\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                              callback_data="setting_reload_admins")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_data(query, context):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with async_sessionmaker() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            total_apps = await session.scalar(select(func.count(AppModel.id)))
            total_users = await session.scalar(select(func.count(User.id)))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_stats = await session.execute(
                select(AppModel.status, func.count(AppModel.id))
                .group_by(AppModel.status)
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
üìä **–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•** 
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ó–∞—è–≤–æ–∫: {total_apps}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_USERS)}

**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫:**
"""
        for status, count in status_stats:
            report += f"‚Ä¢ {status}: {count}\n"

        report += f"""

**–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - system_metrics['start_time']}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['total_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {system_metrics['successful_requests']}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['ai_requests']}

üìé –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.
"""

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
        ]

        await query.edit_message_text(
            report,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        await query.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", show_alert=True)


async def reload_settings(query, context):
    """üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
        await load_db_admins()

        await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        await show_admin_settings(query, context)

    except Exception as e:
        await query.answer(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}", show_alert=True)


async def clear_logs(query, context):
    """üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    # –û—á–∏—â–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    system_metrics["total_requests"] = 0
    system_metrics["successful_requests"] = 0
    system_metrics["failed_requests"] = 0
    system_metrics["ai_requests"] = 0
    system_metrics["start_time"] = datetime.now()

    await query.answer("‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", show_alert=True)
    await show_admin_settings(query, context)


async def show_detailed_stats(query, context):
    """üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    async with async_sessionmaker() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)

        # –ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= today)
        )

        # –ó–∞—è–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= week_ago)
        )

        # –ó–∞—è–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü
        month_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= month_ago)
        )

        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –º–µ—Å—è—Ü
        top_categories = await session.execute(
            select(AppModel.subcategory, func.count(AppModel.id))
            .where(AppModel.created_at >= month_ago)
            .where(AppModel.subcategory.is_not(None))
            .group_by(AppModel.subcategory)
            .order_by(func.count(AppModel.id).desc())
            .limit(5)
        )

    text = f"""
üìà **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üìÖ **–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:**
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_apps} –∑–∞—è–≤–æ–∫
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_apps} –∑–∞—è–≤–æ–∫  
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {month_apps} –∑–∞—è–≤–æ–∫

üìä **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–µ—Å—è—Ü):**
"""

    for subcategory, count in top_categories:
        cat_name = subcategory.split(
            ':')[0] if subcategory and ':' in subcategory else subcategory
        text += f"‚Ä¢ {cat_name}: {count}\n"

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    uptime = datetime.now() - system_metrics["start_time"]
    success_rate = 0
    if system_metrics["total_requests"] > 0:
        success_rate = (
            system_metrics["successful_requests"] / system_metrics["total_requests"]) * 100

    text += f"""

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds // 3600}—á
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
‚Ä¢ RPS: {system_metrics["total_requests"] / max(uptime.total_seconds(), 1):.2f}
"""

    keyboard = [
        [InlineKeyboardButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="setting_detailed_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_ai_status(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Enhanced AI"""
    global ai_enhanced_manager

    text = "ü§ñ **–°–¢–ê–¢–£–° ENHANCED AI**\n\n"

    if ai_enhanced_manager is None:
        text += "‚ùå Enhanced AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        text += "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π AI"
    elif not ai_enhanced_manager._initialized:
        text += "‚ö†Ô∏è Enhanced AI —á–∞—Å—Ç–∏—á–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        text += "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º"
    else:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            health = await ai_enhanced_manager.health_check()

            if health.get("status") == "healthy":
                text += "‚úÖ Enhanced AI —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\n"
            else:
                text += "‚ö†Ô∏è Enhanced AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏\n\n"

            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            text += "**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**\n"
            components = health.get("components", {})

            for name, status in components.items():
                emoji = "‚úÖ" if status.get("status") == "ok" else "‚ùå"
                text += f"{emoji} {name.replace('_', ' ').title()}\n"

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            try:
                analytics = await ai_enhanced_manager.get_analytics_summary()
                if analytics.get("status") != "no_data":
                    text += f"\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {analytics.get('total_requests', 0)}\n"
                    text += f"‚ö° –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analytics.get('success_rate', 0):.1%}\n"
                    text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {analytics.get('avg_response_time', 0):.1f}ms\n"
                    if analytics.get('estimated_cost'):
                        text += f"üí∞ –†–∞—Å—Ö–æ–¥—ã: ${analytics.get('estimated_cost', 0):.2f}\n"
            except:
                pass

        except Exception as e:
            text += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ JOBS ================

async def autopost_job(context: ContextTypes.DEFAULT_TYPE):
    """üß† ML-POWERED –ê–í–¢–û–ü–û–°–¢–ò–ù–ì —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if not CHANNEL_ID:
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Content Intelligence System
        from bot.services.content_intelligence import ContentIntelligenceSystem

        content_system = ContentIntelligenceSystem()
        await content_system.initialize()

        # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        log.info("üîç Starting intelligent content collection...")
        generated_posts = await content_system.collect_and_process_news()

        if generated_posts:
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            post_text = generated_posts[0]
            log.info(f"üìù Publishing AI-generated post: {post_text[:50]}...")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = [[
                InlineKeyboardButton("üíº –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                     url=f"https://t.me/{context.bot.username}")
            ]]

            await context.bot.send_message(
                CHANNEL_ID,
                post_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            log.info("‚úÖ Intelligent autopost published successfully")
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
            log.info("üì∞ No new content found, using fallback post generation")
            await _fallback_autopost(context)

    except Exception as e:
        log.error(f"‚ùå ML autopost failed: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await _fallback_autopost(context)


async def _fallback_autopost(context: ContextTypes.DEFAULT_TYPE):
    """Fallback –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ ML —Å–∏—Å—Ç–µ–º—ã"""

    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è fallback
    advanced_topics = [
        "–ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä—É–¥–æ–≤–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ 2024",
        "–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω: —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å",
        "–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã",
        "–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –≤ 2024",
        "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞: –ø–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º",
        "–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ–Ω–ª–∞–π–Ω",
        "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ: –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ",
        "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        "–ñ–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã: –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞",
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è"
    ]

    topic = random.choice(advanced_topics)

    messages = [{
        "role": "system",
        "content": """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–æ–∑–¥–∞—é—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞.
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∞–≤–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        - –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
        - –û–±—ä–µ–º: 400-500 —Å–∏–º–≤–æ–ª–æ–≤
        - –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É"""
    }, {
        "role": "user",
        "content": f"–°–æ–∑–¥–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}. –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã."
    }]

    text = await generate_ai_response(messages, model="openai/gpt-4o", max_tokens=600)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[
        InlineKeyboardButton("üíº –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                             url=f"https://t.me/{context.bot.username}")
    ]]

    await context.bot.send_message(
        CHANNEL_ID,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ MAIN ================

async def load_db_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ ADMIN_USERS"""
    global ADMIN_USERS
    try:
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin.tg_id).where(Admin.is_active == True)
            )
            db_admin_ids = {row[0] for row in result.fetchall()}

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∏–∑ –ë–î
        old_count = len(ADMIN_USERS)
        ADMIN_USERS = HARDCODED_ADMIN_IDS.union(db_admin_ids)
        log.info(
            f"üîß Admins reloaded: hardcoded={len(HARDCODED_ADMIN_IDS)}, from_db={len(db_admin_ids)}, total={len(ADMIN_USERS)} (was {old_count})")
        print(f"üîß Admin users updated: {len(ADMIN_USERS)} total")

    except Exception as e:
        log.error(f"Failed to load DB admins: {e}")
        # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        ADMIN_USERS = HARDCODED_ADMIN_IDS.copy()


async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    global ai_enhanced_manager

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
    await load_db_admins()

    # üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú Enhanced AI
    try:
        log.info("üöÄ Initializing Enhanced AI system...")
        ai_enhanced_manager = AIEnhancedManager()
        await ai_enhanced_manager.initialize()
        print("‚úÖ Enhanced AI initialized successfully")
        log.info("Enhanced AI system is ready")
    except Exception as e:
        print(f"‚ùå Failed to initialize Enhanced AI: {e}")
        log.error(f"Enhanced AI initialization error: {e}")
        import traceback
        log.error(f"Enhanced AI traceback: {traceback.format_exc()}")
        ai_enhanced_manager = None
        log.info("Will use basic AI as fallback")

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await application.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
        print("‚úÖ Menu button set successfully")
    except Exception as e:
        print(f"‚ùå Failed to set menu button: {e}")
        log.error(f"Menu button error: {e}")


async def fix_database_schema():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
    try:
        log.info("üîß Checking and fixing database schema...")

        async with async_sessionmaker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ user_id
            result = await session.execute(text("""
                SELECT data_type 
                FROM information_schema.columns 
                WHERE table_name = 'applications' AND column_name = 'user_id'
            """))
            user_id_type = result.scalar_one_or_none()

            if user_id_type != "integer":
                log.info("üîÑ user_id column type needs conversion")

                # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                log.info("üßπ Cleaning up invalid user_id values...")

                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ user_id (–Ω–µ —á–∏—Å–ª–æ–≤—ã–µ)
                invalid_result = await session.execute(text("""
                    SELECT id, user_id 
                    FROM applications 
                    WHERE user_id !~ '^[0-9]+$'
                """))
                invalid_apps = invalid_result.fetchall()

                for app_id, bad_user_id in invalid_apps:
                    try:
                        log.info(
                            f"üîß Fixing app {app_id} with bad user_id: '{bad_user_id}'")

                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
                        temp_user_result = await session.execute(text("""
                            SELECT id FROM users 
                            WHERE first_name = '–ì–æ—Å—Ç—å' 
                            LIMIT 1
                        """))
                        temp_user = temp_user_result.scalar_one_or_none()

                        if not temp_user:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            import random
                            temp_tg_id = -random.randint(1000000, 2000000000)

                            await session.execute(text("""
                                INSERT INTO users (tg_id, first_name) 
                                VALUES (:tg_id, '–ì–æ—Å—Ç—å')
                                RETURNING id
                            """), {"tg_id": temp_tg_id})

                            temp_user_result = await session.execute(text("""
                                SELECT id FROM users 
                                WHERE tg_id = :tg_id
                            """), {"tg_id": temp_tg_id})

                            temp_user = temp_user_result.scalar_one()
                            log.info(
                                f"‚úÖ Created new temp user {temp_user} for app {app_id}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id
                        await session.execute(text("""
                            UPDATE applications 
                            SET user_id = :user_id 
                            WHERE id = :app_id
                        """), {"user_id": str(temp_user), "app_id": app_id})

                        log.info(
                            f"‚úÖ Fixed app {app_id}: '{bad_user_id}' -> {temp_user}")

                    except Exception as fix_error:
                        log.error(f"‚ùå Failed to fix app {app_id}: {fix_error}")
                        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å—Ç–∞–≤–∏–º 1 (–¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
                        await session.execute(text("""
                            UPDATE applications 
                            SET user_id = '1' 
                            WHERE id = :app_id
                        """), {"app_id": app_id})

                await session.commit()
                log.info("‚úÖ Invalid user_id values cleaned up")

                # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø
                log.info("üîÑ Converting user_id column type to INTEGER...")
                await session.execute(text("""
                    ALTER TABLE applications 
                    ALTER COLUMN user_id TYPE INTEGER USING user_id::INTEGER
                """))

                await session.commit()
                log.info("‚úÖ user_id column type converted to INTEGER")
                print("‚úÖ Database schema fixed: user_id converted to INTEGER")
            else:
                log.info("‚úÖ user_id column has correct type")

            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            log.info("üîß Checking for missing columns...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ notes
            notes_result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' AND column_name = 'notes'
            """))
            has_notes = notes_result.scalar_one_or_none()

            if not has_notes:
                log.info("‚ûï Adding missing 'notes' column...")
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN notes TEXT
                """))
                await session.commit()
                log.info("‚úÖ Added 'notes' column")
                print("‚úÖ Added missing 'notes' column")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ assigned_admin
            admin_result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' AND column_name = 'assigned_admin'
            """))
            has_assigned_admin = admin_result.scalar_one_or_none()

            if not has_assigned_admin:
                log.info("‚ûï Adding missing 'assigned_admin' column...")
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN assigned_admin VARCHAR(64)
                """))
                await session.commit()
                log.info("‚úÖ Added 'assigned_admin' column")
                print("‚úÖ Added missing 'assigned_admin' column")

            print("‚úÖ Database schema is up to date")

    except Exception as e:
        log.error(f"‚ùå Database schema fix failed: {e}")
        print(f"‚ö†Ô∏è Database schema fix failed: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É


async def handle_debug_fix_schema(request: web.Request) -> web.Response:
    """Debug endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î"""
    log.info("üîß Debug endpoint hit for schema fix")
    try:
        await fix_database_schema()
        return web.Response(text="Database schema fixed successfully!")
    except Exception as e:
        log.error(f"‚ùå Failed to fix database schema: {e}")
        return web.Response(text=f"Failed to fix database schema: {e}", status=500)


async def handle_debug_check_schema(request: web.Request) -> web.Response:
    """Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã –ë–î"""
    log.info("üîç Debug endpoint hit for schema check")
    try:
        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã applications
            result = await session.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                ORDER BY ordinal_position
            """))

            columns = result.fetchall()

            response_text = "APPLICATIONS TABLE SCHEMA:\n\n"
            for col in columns:
                response_text += f"- {col[0]} ({col[1]}) nullable={col[2]} default={col[3]}\n"

            return web.Response(text=response_text)
    except Exception as e:
        log.error(f"‚ùå Failed to check database schema: {e}")
        return web.Response(text=f"Failed to check database schema: {e}", status=500)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await fix_database_schema()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ webapp
    app = web.Application()
    app["bot"] = application.bot
    app["application"] = application

    # –†–æ—É—Ç—ã
    app.router.add_post(f"/{TOKEN}", handle_telegram)
    app.router.add_route("*", "/submit", handle_submit)
    app.router.add_get("/webapp/", handle_webapp)
    app.router.add_get("/webapp/{filename}", handle_webapp_static)
    app.router.add_get("/admin/", handle_admin)

    # API —Ä–æ—É—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    app.router.add_route("*", "/api/admin/applications",
                         api_admin_applications)
    app.router.add_route("*", "/api/admin/clients", api_admin_clients)
    app.router.add_route("*", "/api/admin/payments", api_admin_payments)
    app.router.add_route("*", "/api/admin/stats", api_admin_stats)

    # Health endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    app.router.add_get("/health", handle_health)

    # Debug endpoint for schema fix (DISABLED in production for security)
    # app.router.add_get("/debug/fix-schema", handle_debug_fix_schema)
    # app.router.add_get("/debug/check-schema", handle_debug_check_schema)

    app.router.add_static(
        "/webapp/", path=Path(__file__).parent.parent / "webapp")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("admin", cmd_admin))
    application.add_handler(CommandHandler("add_admin", cmd_add_admin))
    application.add_handler(CommandHandler("list_admins", cmd_list_admins))
    application.add_handler(CallbackQueryHandler(admin_callback))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        ai_chat
    ))

    # –î–∂–æ–±—ã
    if application.job_queue is not None:
        application.job_queue.run_repeating(
            autopost_job,
            interval=timedelta(hours=2),
            first=timedelta(minutes=10)
        )
        print("‚úÖ Job queue initialized - autopost enabled")
        log.info("Job queue initialized successfully")
    else:
        print("‚ö†Ô∏è Job queue not available - autopost disabled")
        log.warning("Job queue not available, autopost functionality disabled")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"https://{PUBLIC_HOST}/{TOKEN}"
    await application.bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async with application:
        await application.start()
        log.info(f"Bot started on port {PORT}")

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–ø—É—Å–∫–∞–µ–º post_init –≤ background –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ Railway
        async def background_init():
            """Background –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced AI –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Railway timeout"""
            try:
                print("üîß Starting background Enhanced AI initialization...")
                await post_init(application)
                print("‚úÖ Background Enhanced AI initialization completed")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                try:
                    await application.bot.send_message(
                        ADMIN_CHAT_ID,
                        "üöÄ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω —Å Enhanced AI!\n\n"
                        "–ö–æ–º–∞–Ω–¥—ã:\n"
                        "/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
                    )
                except:
                    pass
            except Exception as e:
                print(f"‚ùå Background Enhanced AI initialization failed: {e}")
                log.error(f"Background Enhanced AI init error: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Enhanced AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ background
        asyncio.create_task(background_init())

        print(
            "üöÄ Railway-optimized startup completed - Enhanced AI initializing in background")

        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º
        await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())

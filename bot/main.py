#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üèõÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–† - PRODUCTION-READY BOT

üöÄ –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ü–†–û–î–£–ö–¢ –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:
- 12 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥
- Enhanced AI —Å ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
- Telegram Mini App —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI
- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Google Sheets, CloudPayments, OpenRouter
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- Rate limiting –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import json
import logging
import os
import random
import uuid
import time
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path
from typing import Any, Dict, Set
from collections import defaultdict

from sqlalchemy import select, text, func
from telegram import (
    Update, MenuButtonWebApp, WebAppInfo,
    InlineKeyboardButton, InlineKeyboardMarkup,
    InlineQueryResultArticle, InputTextMessageContent
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from telegram.constants import ParseMode

from bot.services.db import (
    async_sessionmaker, init_db, Base,
    User, Application as AppModel, Category, Admin, Payment
)
from bot.services.sheets import append_lead
from bot.services.pay import create_payment
from bot.services.ai import generate_ai_response, generate_post_content
from bot.services.ai_enhanced import AIEnhancedManager
from bot.services.notifications import notify_client_application_received, notify_client_status_update, notify_client_payment_required
from bot.handlers.smm_admin import register_smm_admin_handlers
from menu_utils import MenuBuilder, format_menu_title, format_stats_section
from missing_handlers import handle_missing_callback, validate_callback_coverage
# –ò–º–ø–æ—Ä—Ç –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
from bot.handlers.quick_fixes import register_quick_fixes_handlers
# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from bot.handlers.production_testing import register_production_testing_handlers
# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
try:
    from bot.services.enhanced_autopost import (
        generate_professional_post,
        should_create_autopost,
        get_enhanced_autopost_status,
        schedule_smart_post,
        get_scheduled_posts,
        add_post_comment,
        get_post_comments,
        get_autopost_dashboard,
        publish_post_now
    )
    ENHANCED_AUTOPOST_AVAILABLE = True
except ImportError:
    ENHANCED_AUTOPOST_AVAILABLE = False
    print('WARNING: Enhanced autopost system not available')


# ================ PRODUCTION CONFIG ================

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# Production –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
PRODUCTION_MODE = os.getenv("RAILWAY_ENVIRONMENT") == "production"
DEBUG_MODE = os.getenv("DEBUG", "false").lower() == "true"

# Enhanced AI Manager
ai_enhanced_manager = None

# Rate Limiting
user_request_counts = defaultdict(list)  # user_id -> [timestamps]
RATE_LIMIT_REQUESTS = 10  # –∑–∞–ø—Ä–æ—Å–æ–≤
RATE_LIMIT_WINDOW = 60   # —Å–µ–∫—É–Ω–¥
blocked_users: Set[int] = set()

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
system_metrics = {
    "total_requests": 0,
    "successful_requests": 0,
    "failed_requests": 0,
    "ai_requests": 0,
    "start_time": datetime.now()
}

# Get Railway public domain
RAILWAY_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN") or os.getenv(
    "MY_RAILWAY_PUBLIC_URL")

if RAILWAY_DOMAIN and "MY_RAILWAY_PUBLIC_URL" in RAILWAY_DOMAIN:
    PUBLIC_HOST = "poetic-simplicity-production-60e7.up.railway.app"
else:
    PUBLIC_HOST = RAILWAY_DOMAIN if RAILWAY_DOMAIN else "localhost"

if PUBLIC_HOST.startswith("http"):
    from urllib.parse import urlparse
    PUBLIC_HOST = urlparse(PUBLIC_HOST).netloc

WEB_APP_URL = f"https://{PUBLIC_HOST}/webapp/"

print(f"GLOBE: WebApp URL: {WEB_APP_URL}")
print(f"LINK: Webhook URL: https://{PUBLIC_HOST}/{TOKEN}")
print(f"üöÄ Production Mode: {PRODUCTION_MODE}")

PORT = int(os.getenv("PORT", 8080))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID") or os.getenv("CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
log_level = logging.WARNING if PRODUCTION_MODE else logging.INFO
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(
            'bot.log') if not PRODUCTION_MODE else logging.NullHandler()
    ]
)
log = logging.getLogger(__name__)

# üîß FIXED: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
HARDCODED_ADMIN_IDS = {
    6373924442,  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    439952839,   # –í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–¥–º–∏–Ω: @Dmitriy_nosow - –î–º–∏—Ç—Ä–∏–π –ù–æ—Å–æ–≤
    ADMIN_CHAT_ID if ADMIN_CHAT_ID != 0 else None
}
HARDCODED_ADMIN_IDS.discard(None)  # –£–±–∏—Ä–∞–µ–º None –µ—Å–ª–∏ ADMIN_CHAT_ID=0

# Global admin set - —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
ADMIN_USERS = HARDCODED_ADMIN_IDS.copy()

print(f"üîß Admin users initialized: {ADMIN_USERS}")
log.info(f"Admin users configured: {list(ADMIN_USERS)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
async def notify_all_admins(context: ContextTypes.DEFAULT_TYPE, message: str, parse_mode: str = ParseMode.MARKDOWN):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    """
    sent_count = 0
    errors = []
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏–∑ HARDCODED_ADMIN_IDS
    for admin_id in HARDCODED_ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode=parse_mode
            )
            sent_count += 1
            log.info(f"‚úÖ Notification sent to admin {admin_id}")
        except Exception as e:
            error_msg = f"Failed to send to admin {admin_id}: {str(e)}"
            errors.append(error_msg)
            log.warning(f"‚ö†Ô∏è {error_msg}")
    
    # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ADMIN_CHAT_ID –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if ADMIN_CHAT_ID != 0 and ADMIN_CHAT_ID not in HARDCODED_ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                parse_mode=parse_mode
            )
            sent_count += 1
            log.info(f"‚úÖ Notification sent to ADMIN_CHAT_ID {ADMIN_CHAT_ID}")
        except Exception as e:
            error_msg = f"Failed to send to ADMIN_CHAT_ID {ADMIN_CHAT_ID}: {str(e)}"
            errors.append(error_msg)
            log.warning(f"‚ö†Ô∏è {error_msg}")
    
    log.info(f"üìä Admin notifications: {sent_count} sent, {len(errors)} errors")
    return sent_count, errors

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def notify_all_admins_with_keyboard(context: ContextTypes.DEFAULT_TYPE, message: str, 
                                        keyboard: InlineKeyboardMarkup, parse_mode: str = ParseMode.MARKDOWN):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    sent_count = 0
    errors = []
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏–∑ HARDCODED_ADMIN_IDS
    for admin_id in HARDCODED_ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=keyboard,
                parse_mode=parse_mode
            )
            sent_count += 1
            log.info(f"‚úÖ Notification with keyboard sent to admin {admin_id}")
        except Exception as e:
            error_msg = f"Failed to send to admin {admin_id}: {str(e)}"
            errors.append(error_msg)
            log.warning(f"‚ö†Ô∏è {error_msg}")
    
    # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ADMIN_CHAT_ID –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if ADMIN_CHAT_ID != 0 and ADMIN_CHAT_ID not in HARDCODED_ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                reply_markup=keyboard,
                parse_mode=parse_mode
            )
            sent_count += 1
            log.info(f"‚úÖ Notification with keyboard sent to ADMIN_CHAT_ID {ADMIN_CHAT_ID}")
        except Exception as e:
            error_msg = f"Failed to send to ADMIN_CHAT_ID {ADMIN_CHAT_ID}: {str(e)}"
            errors.append(error_msg)
            log.warning(f"‚ö†Ô∏è {error_msg}")
    
    log.info(f"üìä Admin keyboard notifications: {sent_count} sent, {len(errors)} errors")
    return sent_count, errors

# Role permissions
ROLE_PERMISSIONS = {
    "operator": ["view_applications", "update_status"],
    "lawyer": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client"],
    "superadmin": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client", "manage_admins", "view_all_stats"]
}

# ================ PRODUCTION HELPERS ================


async def is_admin(user_id: int) -> bool:
    """
    üîß FIXED: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö:
    1. –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID
    2. –¢–∞–±–ª–∏—Ü–∞ admins –≤ –ë–î
    """
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if user_id in HARDCODED_ADMIN_IDS:
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin).where(
                    Admin.tg_id == user_id,
                    Admin.is_active == True
                )
            )
            db_admin = result.scalar_one_or_none()
            return db_admin is not None
    except Exception as e:
        log.error(f"Error checking admin status in DB: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        return user_id in HARDCODED_ADMIN_IDS


def is_rate_limited(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
    # –ê–¥–º–∏–Ω—ã –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã rate limiting
    if user_id in ADMIN_USERS:
        return False

    if user_id in blocked_users:
        return True

    now = time.time()
    user_requests = user_request_counts[user_id]

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    user_requests[:] = [
        req_time for req_time in user_requests if now - req_time < RATE_LIMIT_WINDOW]

    if len(user_requests) >= RATE_LIMIT_REQUESTS:
        log.warning(f"Rate limit exceeded for user {user_id}")
        return True

    user_requests.append(now)
    return False


async def log_request(user_id: int, request_type: str, success: bool, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    system_metrics["total_requests"] += 1

    if success:
        system_metrics["successful_requests"] += 1
    else:
        system_metrics["failed_requests"] += 1
        if error:
            log.error(
                f"Request failed - User: {user_id}, Type: {request_type}, Error: {error}")

    if request_type == "ai":
        system_metrics["ai_requests"] += 1


def sanitize_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return ""

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = text.replace('<', '&lt;').replace('>', '&gt;')

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(sanitized) > 4000:
        sanitized = sanitized[:4000] + "..."

    return sanitized


async def validate_telegram_data(data: dict) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["category_id", "name", "phone", "contact_method"]
        for field in required_fields:
            if not data.get(field):
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data.get("category_id"), int):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        if len(data.get("name", "")) > 100:
            return False

        if len(data.get("description", "")) > 2000:
            return False

        return True
    except Exception as e:
        log.error(f"Validation error: {e}")
        return False


# ================ HANDLERS ================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome message with inline webapp button"""
    user = update.effective_user

    # Set menu button for this user
    try:
        await context.bot.set_chat_menu_button(
            chat_id=user.id,
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
    except Exception as e:
        log.error(f"Failed to set menu button: {e}")

    # Store user in DB
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user.id)
        )
        db_user = result.scalar_one_or_none()
        if not db_user:
            db_user = User(
                tg_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name
            )
            session.add(db_user)
            await session.commit()

    welcome_text = f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

üèõÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–†**
–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥:

‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –∏ —Ä–∞–∑–≤–æ–¥
‚Ä¢ üìã –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã
‚Ä¢ üíº –¢—Ä—É–¥–æ–≤—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
‚Ä¢ üè† –ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üìâ –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü
‚Ä¢ üí∞ –ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ ‚öñÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
‚Ä¢ üõÇ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ
‚Ä¢ üìö –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.

‚úÖ –†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
üíµ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
"""

    keyboard = [[
        InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=WEB_APP_URL)
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –ø—É—Ç–µ–º"""
    global ai_enhanced_manager

    user_id = update.effective_user.id
    user_text = update.message.text
    user = update.effective_user

    # üîß –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await is_admin(user_id) and context.user_data.get('pending_broadcast', {}).get('waiting_for_text'):
        await handle_broadcast_text(update, context)
        return

    # üîß –§–ò–ö–°: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    if context.user_data.get('awaiting_consultation_details'):
        await handle_consultation_details(update, context)
        return

    # üîß –§–ò–ö–°: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if context.user_data.get('awaiting_phone_input'):
        await handle_phone_input(update, context)
        return

    # üîß –§–ò–ö–°: –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é
    if context.user_data.get('awaiting_manual_post') and await is_admin(user_id):
        await handle_manual_post_input(update, context)
        return

    # üîß –§–ò–ö–°: –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç
    if context.user_data.get('editing_post') and await is_admin(user_id):
        await handle_edit_post_input(update, context)
        return

    if not OPENROUTER_API_KEY:
        await update.message.reply_text("AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    await log_request(user_id, "ai", True)

    try:
        # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced AI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if ai_enhanced_manager and ai_enhanced_manager._initialized:
            log.info(f" Using Enhanced AI for user {user_id}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id (Telegram ID, –Ω–µ database ID)
            response = await ai_enhanced_manager.generate_response(
                user_id=user_id,  # Telegram ID
                message=user_text,
                context={
                    'telegram_user': {
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username
                    },
                    'message_timestamp': datetime.now().isoformat()
                }
            )

            log.info(
                f"‚úÖ Enhanced AI response generated: {len(response)} chars")
        else:
            log.info(f"WARNING: Using fallback AI for user {user_id}")

            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É AI
            category = detect_category(user_text)

            system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
–û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ: {category}.
–î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —Å—Å—ã–ª–∞–µ—à—å—Å—è –Ω–∞ –∑–∞–∫–æ–Ω—ã –†–§.
–í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text}
            ]

            response = await generate_ai_response(messages)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–¥ 402 –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª—å —Ç–µ–∫—Å—Ç–∞
            if "–∫–æ–¥ 402" not in response:
                response += "\n\n –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."

        # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Å–µ–≥–¥–∞
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=WEB_APP_URL),
                InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
                                     callback_data="request_call")
            ],
            [
                InlineKeyboardButton(
                    "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="chat_consultation"),
                InlineKeyboardButton("üí≥ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                                     callback_data="get_price")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—à–∏–±–æ–∫
        try:
            await update.message.reply_text(response, reply_markup=reply_markup)
        except Exception as reply_error:
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –∫–Ω–æ–ø–∫–∏
            logger.error(
                f"Failed to send response with buttons: {reply_error}")
            await update.message.reply_text(
                "ü§ñ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏:",
                reply_markup=reply_markup
            )

        log.info(
            f"‚úÖ AI response sent to user {user_id} with client flow buttons")

    except Exception as e:
        log.error(f"‚ùå AI Chat error for user {user_id}: {e}")
        await log_request(user_id, "ai", False, str(e))

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        fallback_keyboard = [
            [
                InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=WEB_APP_URL),
                InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
                                     callback_data="request_call")
            ],
            [
                InlineKeyboardButton(
                    "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="chat_consultation"),
                InlineKeyboardButton("üí≥ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                                     callback_data="get_price")
            ]
        ]

        await update.message.reply_text(
            "ü§ñ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(fallback_keyboard)
        )


async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await update.message.reply_text(" –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        async with async_sessionmaker() as session:
            total_users = await session.scalar(select(func.count(User.id)))
            total_apps = await session.scalar(select(func.count(AppModel.id)))
            new_apps_today = await session.scalar(
                select(func.count(AppModel.id))
                .where(AppModel.created_at >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))
            )
    except:
        total_users = total_apps = new_apps_today = 0

    admin_text = f"""üèõÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–† - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
- –ó–∞—è–≤–æ–∫: {total_apps}
- –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_apps_today}
- –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_USERS)}

üéõÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**"""

    keyboard = [
        [
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏",
                                 callback_data="admin_apps"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(
                "üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
            InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(
                "ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
            InlineKeyboardButton(" –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(
                "üöÄ SMM –°–∏—Å—Ç–µ–º–∞", callback_data="smm_main_panel"),
            InlineKeyboardButton(
                " –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏",
                                 callback_data="admin_manage_admins"),
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                 callback_data="admin_detailed_analytics")
        ],
        [
            InlineKeyboardButton(
                "üìÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="admin_autopost"),
            InlineKeyboardButton("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
                                 callback_data="admin_view_scheduled")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å",
                                 callback_data="admin_refresh"),
            InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                                 callback_data="admin_export")
        ]
    ]

    await update.message.reply_text(
        admin_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def cmd_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üîß FIXED: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await is_admin(user_id):
        await update.message.reply_text(" –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args:
        await update.message.reply_text(
            "üìã **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_admin <ID> [—Ä–æ–ª—å]`\n\n"
            "–†–æ–ª–∏:\n"
            "- `operator` - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫\n"
            "- `lawyer` - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏\n"
            "- `superadmin` - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_admin 123456789 lawyer`",
            parse_mode='Markdown'
        )
        return

    try:
        new_admin_id = int(context.args[0])
        role = context.args[1] if len(context.args) > 1 else "operator"

        if role not in ROLE_PERMISSIONS:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: `{role}`\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(ROLE_PERMISSIONS.keys())}",
                parse_mode='Markdown'
            )
            return

    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if await is_admin(new_admin_id):
        await update.message.reply_text(f"WARNING: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        async with async_sessionmaker() as session:
            new_admin = Admin(
                tg_id=new_admin_id,
                role=role,
                is_active=True
            )
            session.add(new_admin)
            await session.commit()

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await load_db_admins()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await update.message.reply_text(
            f"‚úÖ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
            f"üë§ ID: `{new_admin_id}`\n"
            f"üéØ –†–æ–ª—å: `{role}`\n"
            f"üìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_USERS)}",
            parse_mode='Markdown'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await context.bot.send_message(
                new_admin_id,
                f"PARTY: **–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**\n\n"
                f"üéØ –†–æ–ª—å: {role}\n"
                f"üìã –ö–æ–º–∞–Ω–¥—ã: /admin, /start\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! HELLO:",
                parse_mode='Markdown'
            )
        except Exception as e:
            log.warning(f"Could not notify new admin {new_admin_id}: {e}")
            await update.message.reply_text(
                "WARNING: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "
                "(–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞)"
            )

        log.info(
            f"üîß New admin added: {new_admin_id} with role {role} by {user_id}")

    except Exception as e:
        log.error(f"Failed to add admin {new_admin_id}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


async def cmd_list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üîß FIXED: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await is_admin(user_id):
        await update.message.reply_text(" –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        text = "üë• **–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í**\n\n"

        # –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        if HARDCODED_ADMIN_IDS:
            text += "üîß **–•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**\n"
            for admin_id in sorted(HARDCODED_ADMIN_IDS):
                text += f"- `{admin_id}` (—Å–∏—Å—Ç–µ–º–Ω—ã–π)\n"
            text += "\n"

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin).where(Admin.is_active == True)
                .order_by(Admin.created_at.desc())
            )
            db_admins = result.scalars().all()

        if db_admins:
            text += " **–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n"
            for admin in db_admins:
                status = "‚úÖ" if admin.is_active else "‚ùå"
                text += f"{status} `{admin.tg_id}` ({admin.role})\n"
        else:
            text += " **–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** –Ω–µ—Ç\n"

        text += f"\nüìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:** {len(ADMIN_USERS)}"

        await update.message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        log.error(f"Failed to list admins: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")


async def universal_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback queries (–∞–¥–º–∏–Ω—Å–∫–∏—Ö –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö)"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    # üéØ –ù–û–í–û–ï: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    client_actions = [
        "request_call", "chat_consultation", "get_price", "back_to_chat",
        "enter_phone", "submit_call_request"
    ]

    if data in client_actions or data.startswith("consultation_category_"):
        await client_flow_callback(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if not await is_admin(user_id):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if data == "admin_apps":
        await show_applications(query, context)
    elif data == "admin_stats":
        await show_statistics(query, context)
    elif data == "admin_payments":
        await show_payments(query, context)
    elif data == "admin_users":
        await show_clients(query, context)
    elif data == "admin_broadcast":
        await show_broadcast_options(query, context)
    elif data == "admin_settings":
        await show_admin_settings(query, context)
    elif data == "admin_ai_status":
        await show_ai_status(query, context)
    elif data == "admin_manage_admins":
        await show_admin_management_panel(query, context)
    elif data == "admin_detailed_analytics":
        await show_detailed_analytics_panel(query, context)
    elif data == "admin_refresh":
        await refresh_admin_panel(query, context)
    elif data == "admin_export":
        await show_export_options(query, context)
    elif data == "admin_autopost":
        await show_autopost_panel(query, context)
    elif data == "admin_schedule_post":
        await handle_schedule_post(query, context)
    elif data == "admin_view_scheduled":
        await show_scheduled_posts(query, context)
    elif data == "smm_main_panel":
        await show_smm_main_panel(query, context)
    elif data.startswith("app_"):
        await handle_application_action(query, context)
    elif data.startswith("client_"):
        await handle_client_action(query, context)
    elif data.startswith("broadcast_"):
        await handle_broadcast_action(query, context)
    elif data.startswith("confirm_broadcast_"):
        await execute_broadcast(query, context)
    elif data.startswith("setting_"):
        await handle_settings_action(query, context)
    elif data == "back_admin":
        await cmd_admin_callback(query, context)
    elif data.startswith("admin_add_") or data.startswith("admin_list_") or data.startswith("admin_reload_") or data.startswith("admin_role_"):
        await handle_admin_management_actions(query, context)
    elif data.startswith("export_") or data.startswith("analytics_"):
        await handle_export_analytics_actions(query, context)
    elif data == "smm_optimize":
        await handle_smm_optimize(query, context)
    elif data == "smm_toggle":
        await handle_smm_toggle(query, context)
    elif data.startswith("smm_"):
        await handle_smm_actions(query, context)
    elif data.startswith("post_"):
        await handle_post_actions(query, context)
    elif data.startswith("comment_"):
        await handle_comment_actions(query, context)
    else:
        # Catch-all for unimplemented callbacks
        await handle_missing_callback(query, context, data)


async def show_autopost_panel(query, context):
    """üìÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
    try:
        if ENHANCED_AUTOPOST_AVAILABLE:
            dashboard_data = await get_autopost_dashboard()

            stats = dashboard_data['statistics']
            scheduled = dashboard_data['scheduled_posts']

            text = f"""üìÖ **–ü–ê–ù–ï–õ–¨ –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {stats.get('last_post_time', '–ù–∏–∫–æ–≥–¥–∞')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if dashboard_data['system_status'] == 'active' else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

üìã **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:** {len(scheduled)}"""

            if scheduled:
                text += "\n\nüìÖ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã:**"
                for post in scheduled[:3]:
                    text += f"\n‚Ä¢ {post['title'][:40]}... ({post['scheduled_time'][:16]})"
        else:
            text = "‚ùå **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"

        keyboard = [
            [
                InlineKeyboardButton("‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç",
                                     callback_data="admin_schedule_post"),
                InlineKeyboardButton(
                    "üìã –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_view_scheduled")
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_autopost"),
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_admin")
            ]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Error in show_autopost_panel: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_admin")
            ]])
        )


async def handle_schedule_post(query, context):
    """‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
    try:
        if not ENHANCED_AUTOPOST_AVAILABLE:
            await query.edit_message_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
                ]])
            )
            return

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        post_data = await schedule_smart_post(24)  # 24 —á–∞—Å–∞ –æ—Ç —Å–µ–π—á–∞—Å

        text = f"""‚úÖ **–ü–û–°–¢ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù**

üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {post_data['title']}
üóÇ **–¢–∏–ø:** {post_data['type']}
üìã **–¢–µ–º–∞:** {post_data['topic']}
‚è∞ **–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {post_data['scheduled_time'][:16]}

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if post_data.get('enable_comments') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post_preview_{post_data['post_id']}"),
                InlineKeyboardButton(
                    "üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"post_publish_{post_data['post_id']}")
            ],
            [
                InlineKeyboardButton("‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ",
                                     callback_data="admin_schedule_post"),
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
            ]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Error in handle_schedule_post: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
            ]])
        )


async def show_scheduled_posts(query, context):
    """üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        if not ENHANCED_AUTOPOST_AVAILABLE:
            await query.edit_message_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
                ]])
            )
            return

        scheduled_posts = await get_scheduled_posts(10)

        if not scheduled_posts:
            text = "üìã **–ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–û–°–¢–´**\n\n–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="admin_schedule_post"),
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
                ]
            ]
        else:
            text = f"üìã **–ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–û–°–¢–´** ({len(scheduled_posts)})\n\n"
            keyboard = []

            for i, post in enumerate(scheduled_posts[:5], 1):
                scheduled_time = post['scheduled_time'][:16]
                text += f"{i}. **{post['title'][:30]}...**\n"
                text += f"   üìÖ {scheduled_time} | üí¨ {post['comments_count']} –∫–æ–º–º.\n\n"

                keyboard.append([
                    InlineKeyboardButton(
                        f"üìù –ü–æ—Å—Ç #{i}", callback_data=f"post_view_{post['post_id']}"),
                    InlineKeyboardButton(
                        f"üí¨ –ö–æ–º–º.", callback_data=f"post_comments_{post['post_id']}")
                ])

            keyboard.append([
                InlineKeyboardButton("‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ",
                                     callback_data="admin_schedule_post"),
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_view_scheduled")
            ])
            keyboard.append([
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
            ])

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Error in show_scheduled_posts: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
            ]])
        )


async def handle_post_actions(query, context):
    """üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–∞–º–∏"""
    data = query.data

    try:
        if data.startswith("post_view_"):
            post_id = data.replace("post_view_", "")
            await show_post_preview(query, context, post_id)

        elif data.startswith("post_publish_"):
            post_id = data.replace("post_publish_", "")
            await publish_post_immediately(query, context, post_id)

        elif data.startswith("post_comments_"):
            post_id = data.replace("post_comments_", "")
            await show_post_comments(query, context, post_id)

        elif data.startswith("post_preview_"):
            post_id = data.replace("post_preview_", "")
            await show_post_preview(query, context, post_id)

        else:
            await handle_missing_callback(query, context, data)

    except Exception as e:
        log.error(f"Error in handle_post_actions: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–æ–º",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")
            ]])
        )


async def handle_comment_actions(query, context):
    """üí¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    data = query.data

    try:
        if data.startswith("comment_add_"):
            post_id = data.replace("comment_add_", "")
            await start_comment_dialog(query, context, post_id)

        elif data.startswith("comment_moderate_"):
            comment_id = data.replace("comment_moderate_", "")
            await moderate_comment(query, context, comment_id)

        elif data.startswith("comment_reply_"):
            comment_id = data.replace("comment_reply_", "")
            await reply_to_comment(query, context, comment_id)

        else:
            await handle_missing_callback(query, context, data)

    except Exception as e:
        log.error(f"Error in handle_comment_actions: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")


async def show_post_preview(query, context, post_id: str):
    """üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞"""
    try:
        if not ENHANCED_AUTOPOST_AVAILABLE:
            await query.edit_message_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_scheduled")
                ]])
            )
            return

        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
        text = f"""üìù **–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê**

üÜî **ID:** {post_id}
‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å:** –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞."""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_{post_id}"),
                InlineKeyboardButton(
                    "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f"post_comments_{post_id}")
            ],
            [
                InlineKeyboardButton(
                    "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_add_{post_id}"),
                InlineKeyboardButton(
                    "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"post_analytics_{post_id}")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_view_scheduled")
            ]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Error in show_post_preview: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_scheduled")
            ]])
        )


async def publish_post_immediately(query, context, post_id: str):
    """üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    try:
        if not ENHANCED_AUTOPOST_AVAILABLE:
            await query.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
        success = await publish_post_now(post_id)

        if success:
            await query.edit_message_text(
                f"‚úÖ **–ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù**\n\nüÜî ID: {post_id}\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "üìã –ö —Å–ø–∏—Å–∫—É", callback_data="admin_view_scheduled"),
                    InlineKeyboardButton(
                        "üìÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="admin_autopost")
                ]]),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                f"‚ùå **–û–®–ò–ë–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò**\n\nüÜî ID: {post_id}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"post_publish_{post_id}"),
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_scheduled")
                ]]),
                parse_mode='Markdown'
            )

    except Exception as e:
        log.error(f"Error in publish_post_immediately: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")


async def show_post_comments(query, context, post_id: str):
    """üí¨ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É"""
    try:
        if not ENHANCED_AUTOPOST_AVAILABLE:
            await query.edit_message_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_scheduled")
                ]])
            )
            return

        comments = await get_post_comments(post_id, 5)

        if not comments:
            text = f"üí¨ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ö –ü–û–°–¢–£**\n\nüÜî **ID –ø–æ—Å—Ç–∞:** {post_id}\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text = f"üí¨ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ö –ü–û–°–¢–£** ({len(comments)})\n\nüÜî **ID –ø–æ—Å—Ç–∞:** {post_id}\n\n"

            for i, comment in enumerate(comments, 1):
                username = comment.get('username', '–ê–Ω–æ–Ω–∏–º')
                comment_time = comment['comment_time'][:
                                                       16] if comment['comment_time'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                text += f"{i}. **@{username}** ({comment_time})\n"
                text += f"   {comment['comment_text'][:50]}...\n\n"

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_add_{post_id}"),
                InlineKeyboardButton(
                    "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data=f"comment_moderate_{post_id}")
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"post_comments_{post_id}"),
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ö –ø–æ—Å—Ç—É", callback_data=f"post_view_{post_id}")
            ]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Error in show_post_comments: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_scheduled")
            ]])
        )


async def show_applications(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(AppModel, User)
            .join(User)
            .order_by(AppModel.created_at.desc())
            .limit(10)
        )
        apps = result.all()

    if not apps:
        text = "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        text = "üìã **–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
        keyboard = []

        for app, user in apps:
            status_emoji = {
                "new": "üÜï",
                "processing": "‚è≥",
                "completed": "‚úÖ"
            }.get(app.status, "")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory –≤–º–µ—Å—Ç–æ Category.name
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

            text += f"{status_emoji} #{app.id} | {category_name}\n"
            text += f"üë§ {user.first_name} {user.phone or ''}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m %H:%M')}\n\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"#{app.id} –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                    callback_data=f"app_view_{app.id}"
                )
            ])

    keyboard.append([InlineKeyboardButton(
        "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_admin")])

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to edit message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


async def handle_application_action(query, context):
    """üîß –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –ü–æ–ª–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π"""
    data = query.data

    if data.startswith("app_view_"):
        app_id = int(data.split("_")[2])

        async with async_sessionmaker() as session:
            result = await session.execute(
                select(AppModel, User)
                .join(User)
                .where(AppModel.id == app_id)
            )
            row = result.one_or_none()

        if not row:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        app, user = row

        contact_methods = {
            'phone': 'PHONE: –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'CHAT: Telegram',
            'email': 'EMAIL: Email',
            'whatsapp': ' WhatsApp'
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory –≤–º–µ—Å—Ç–æ Category.name
        category_name = app.subcategory.split(
            ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        subcategory_detail = app.subcategory.split(':', 1)[1].strip(
        ) if app.subcategory and ':' in app.subcategory else '-'

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        description = (app.description or '-')
        if len(description) > 500:
            description = description[:500] + '...'

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        def escape_markdown(text):
            if not text or text == '-':
                return text
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            text = str(text)
            chars = ['*', '_', '[', ']', '`', '\\']
            for char in chars:
                text = text.replace(char, f'\\{char}')
            return text

        safe_description = escape_markdown(description)
        safe_first_name = escape_markdown(user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏')
        safe_last_name = escape_markdown(user.last_name or '')
        safe_phone = escape_markdown(user.phone or '-')
        safe_email = escape_markdown(user.email or '-')
        safe_category = escape_markdown(category_name)
        safe_subcategory = escape_markdown(subcategory_detail)

        text = f"""
üìã **–ó–ê–Ø–í–ö–ê #{app.id}**

FOLDER: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {safe_category}
üìù –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {safe_subcategory}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {safe_first_name} {safe_last_name}
PHONE: {safe_phone}
EMAIL: {safe_email}
CHAT: –°–≤—è–∑—å: {contact_methods.get(app.contact_method, app.contact_method or '-')}
CLOCK: –í—Ä–µ–º—è: {app.contact_time or '–ª—é–±–æ–µ'}

 **–û–ø–∏—Å–∞–Ω–∏–µ:**
{safe_description}

{f' –§–∞–π–ª–æ–≤: {len(app.files_data or [])}' if app.files_data else ''}
{f' UTM: {app.utm_source}' if app.utm_source else ''}

üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {app.price or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}  rubles
üìä –°—Ç–∞—Ç—É—Å: {app.status}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {app.created_at.strftime('%d.%m.%Y %H:%M')}
"""

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        if len(text) > 4000:
            text = text[:4000] + '\n\\.\\.\\.'

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        keyboard = []

        if app.status == "new":
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app.id}")],
                [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç",
                                      callback_data=f"app_bill_{app.id}")]
            ])
        elif app.status == "processing":
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"app_complete_{app.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app.id}")],
                [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç",
                                      callback_data=f"app_bill_{app.id}")]
            ])
        elif app.status == "completed":
            keyboard.append([InlineKeyboardButton(
                "üí≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—á–µ—Ç", callback_data=f"app_bill_{app.id}")])
        elif app.status == "cancelled":
            keyboard.append([InlineKeyboardButton(
                "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"app_take_{app.id}")])

        keyboard.append([InlineKeyboardButton(
            "üìã –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="admin_apps")])

        try:
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            log.error(f"Failed to edit message: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            try:
                await query.message.reply_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as fallback_error:
                log.error(f"Fallback message also failed: {fallback_error}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

    elif data.startswith("app_take_"):
        # ‚úÖ –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                app.status = "processing"
                app.assigned_admin = str(admin_id)
                app.updated_at = datetime.now()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await notify_client_status_update(user, app, "processing")
            except Exception as e:
                log.error(f"Client notification error: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É", show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await handle_application_action(
                type('Query', (), {
                    'data': f'app_view_{app_id}',
                    'edit_message_text': query.edit_message_text,
                    'answer': query.answer
                })(),
                context
            )

        except Exception as e:
            log.error(f"Error taking application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

    elif data.startswith("app_reject_"):
        # ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                app.status = "cancelled"
                app.assigned_admin = str(admin_id)
                app.updated_at = datetime.now()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await notify_client_status_update(user, app, "cancelled")
            except Exception as e:
                log.error(f"Client notification error: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await handle_application_action(
                type('Query', (), {
                    'data': f'app_view_{app_id}',
                    'edit_message_text': query.edit_message_text,
                    'answer': query.answer
                })(),
                context
            )

        except Exception as e:
            log.error(f"Error rejecting application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

    elif data.startswith("app_bill_"):
        # üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–µ–Ω–∞
                if not app.price:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
                    app.price = Decimal("5000")
                    await session.commit()

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                try:
                    pay_url = create_payment(app, user, app.price)
                    if pay_url is None:
                        # –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                        pay_url = None
                except Exception as e:
                    log.error(f"Payment creation error: {e}")
                    pay_url = None

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –°—á–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}. –°—É–º–º–∞: {app.price}  rubles"

                app.updated_at = datetime.now()
                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
            try:
                await notify_client_payment_required(user, app, float(app.price), pay_url)
            except Exception as e:
                log.error(f"Payment notification error: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if pay_url:
                text = f"""
üí≥ **–°–ß–ï–¢ –í–´–°–¢–ê–í–õ–ï–ù**

üìã –ó–∞—è–≤–∫–∞: #{app.id}
üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name or ''}
üíµ –°—É–º–º–∞: {app.price}  rubles

LINK: **–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:**
{pay_url}

‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
"""

                keyboard = [
                    [InlineKeyboardButton(
                        "LINK: –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=pay_url)],
                    [InlineKeyboardButton(
                        "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_view_{app_id}")],
                    [InlineKeyboardButton(
                        "üìã –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="admin_apps")]
                ]
            else:
                text = f"""
üí≥ **–°–ß–ï–¢ –í–´–°–¢–ê–í–õ–ï–ù**

üìã –ó–∞—è–≤–∫–∞: #{app.id}
üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name or ''}
üíµ –°—É–º–º–∞: {app.price}  rubles

WARNING: **–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞**
–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º

‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
"""

                keyboard = [
                    [InlineKeyboardButton(
                        "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", callback_data=f"app_view_{app_id}")],
                    [InlineKeyboardButton(
                        "üìã –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="admin_apps")]
                ]

            try:
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as e:
                log.error(f"Failed to edit message: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                try:
                    await query.message.reply_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as fallback_error:
                    log.error(
                        f"Fallback message also failed: {fallback_error}")
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

        except Exception as e:
            log.error(f"Error billing application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞: {e}", show_alert=True)

    elif data.startswith("app_complete_"):
        # ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É
        app_id = int(data.split("_")[2])
        admin_id = query.from_user.id

        try:
            async with async_sessionmaker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
                result = await session.execute(
                    select(AppModel, User)
                    .join(User)
                    .where(AppModel.id == app_id)
                )
                row = result.one_or_none()

                if not row:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                app, user = row

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                app.status = "completed"
                app.assigned_admin = str(admin_id)
                app.updated_at = datetime.now()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if not app.notes:
                    app.notes = ""
                app.notes += f"\n[{datetime.now().strftime('%d.%m %H:%M')}] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

                await session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await notify_client_status_update(user, app, "completed")
            except Exception as e:
                log.error(f"Client notification error: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await handle_application_action(
                type('Query', (), {
                    'data': f'app_view_{app_id}',
                    'edit_message_text': query.edit_message_text,
                    'answer': query.answer
                })(),
                context
            )

        except Exception as e:
            log.error(f"Error completing application {app_id}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


async def handle_client_action(query, context):
    """üë§ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –î–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    data = query.data

    if data.startswith("client_view_"):
        user_id = int(data.split("_")[2])

        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await query.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ –∑–∞—è–≤–∫–∏
            apps_result = await session.execute(
                select(AppModel)
                .where(AppModel.user_id == user_id)
                .order_by(AppModel.created_at.desc())
                .limit(10)
            )
            applications = apps_result.scalars().all()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
        total_amount = sum(app.price or 0 for app in applications)
        recent_app = applications[0] if applications else None

        text = f"""
üë§ **–ö–õ–ò–ï–ù–¢: {user.first_name} {user.last_name or ''}**

PHONE: –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
EMAIL: Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
ID: Telegram ID: `{user.tg_id}`
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y') if hasattr(user, 'created_at') else '–Ω/–¥'}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(applications)}
- –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}  rubles
- –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞: {recent_app.created_at.strftime('%d.%m.%Y') if recent_app else '–Ω–µ—Ç'}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:**
"""

        keyboard = []
        for app in applications[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            status_emoji = {"new": "üÜï", "processing": "‚è≥",
                            "completed": "‚úÖ"}.get(app.status, "")
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else "–û–±—â–∏–µ"
            text += f"{status_emoji} #{app.id} | {category_name} | {app.price or 0}  rubles\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"üìã –ó–∞—è–≤–∫–∞ #{app.id}",
                    callback_data=f"app_view_{app.id}"
                )
            ])

        keyboard.append([InlineKeyboardButton(
            " –ö —Å–ø–∏—Å–∫—É", callback_data="admin_users")])

        try:
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            log.error(f"Failed to edit message: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            try:
                await query.message.reply_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as fallback_error:
                log.error(f"Fallback message also failed: {fallback_error}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


async def handle_broadcast_action(query, context):
    """ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    data = query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_types = {
        "broadcast_all": ("üë• –í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º", "SELECT DISTINCT tg_id FROM users WHERE tg_id IS NOT NULL"),
        "broadcast_active": ("üìù –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏", """
            SELECT DISTINCT u.tg_id FROM users u
            JOIN applications a ON u.id = a.user_id
            WHERE a.status IN ('new', 'processing') AND u.tg_id IS NOT NULL
        """),
        "broadcast_inactive": (" –ë–µ–∑ –∑–∞—è–≤–æ–∫", """
            SELECT DISTINCT tg_id FROM users
            WHERE id NOT IN (SELECT DISTINCT user_id FROM applications)
            AND tg_id IS NOT NULL
        """),
        "broadcast_vip": ("STAR: VIP –∫–ª–∏–µ–Ω—Ç–∞–º", """
            SELECT DISTINCT u.tg_id FROM users u
            JOIN applications a ON u.id = a.user_id
            WHERE u.tg_id IS NOT NULL
            GROUP BY u.tg_id
            HAVING COUNT(a.id) >= 3
        """)
    }

    if data in broadcast_types:
        title, sql_query = broadcast_types[data]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        try:
            async with async_sessionmaker() as session:
                result = await session.execute(text(sql_query))
                user_ids = [row[0] for row in result.fetchall()]

            if not user_ids:
                await query.answer(f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ '{title}'", show_alert=True)
                return

            # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            text = f"""
 **–†–ê–°–°–´–õ–ö–ê: {title}**

üë• **–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:**

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.

WARNING: **–í–Ω–∏–º–∞–Ω–∏–µ:**
- –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–ª—å–∑—è
- –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤
"""

            keyboard = [
                [InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_broadcast")]
            ]

            try:
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as e:
                log.error(f"Failed to edit message: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                try:
                    await query.message.reply_text(
                        text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as fallback_error:
                    log.error(
                        f"Fallback message also failed: {fallback_error}")
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['pending_broadcast'] = {
                'type': data,
                'title': title,
                'user_ids': user_ids,
                'waiting_for_text': True
            }

        except Exception as e:
            log.error(f"Broadcast preparation error: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", show_alert=True)


async def handle_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_data = context.user_data.get('pending_broadcast', {})

    if not broadcast_data.get('waiting_for_text'):
        return

    message_text = update.message.text
    user_ids = broadcast_data.get('user_ids', [])
    title = broadcast_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['pending_broadcast'] = {}

    if len(message_text) > 4000:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    if not user_ids:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    confirm_text = f"""
 **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

üìù **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
{message_text[:500]}{'...' if len(message_text) > 500 else ''}

WARNING: **–í–Ω–∏–º–∞–Ω–∏–µ:** –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!
"""

    keyboard = [
        [InlineKeyboardButton(
            "‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨", callback_data=f"confirm_broadcast_{len(user_ids)}")],
        [InlineKeyboardButton(
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_broadcast")]
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    context.user_data['broadcast_ready'] = {
        'message_text': message_text,
        'user_ids': user_ids,
        'title': title
    }

    try:
        await update.message.reply_text(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to send confirmation message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        try:
            await update.message.reply_text(
                confirm_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await update.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await update.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)


async def execute_broadcast(query, context):
    """üöÄ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await query.answer()

    broadcast_data = context.user_data.get('broadcast_ready', {})

    if not broadcast_data:
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    message_text = broadcast_data.get('message_text')
    user_ids = broadcast_data.get('user_ids', [])
    title = broadcast_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data['broadcast_ready'] = {}

    if not message_text or not user_ids:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_text = f"""
üöÄ **–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è... 0/{len(user_ids)}
"""

    try:
        await query.edit_message_text(
            progress_text,
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to send progress message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        try:
            await query.message.reply_text(
                progress_text,
                parse_mode='Markdown'
            )
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    bot = query.bot
    sent_count = 0
    failed_count = 0

    for i, user_id in enumerate(user_ids):
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='Markdown'
            )
            sent_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if (i + 1) % 10 == 0:
                progress_text = f"""
üöÄ **–†–ê–°–°–´–õ–ö–ê –í –ü–†–û–¶–ï–°–°–ï**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(user_ids)}

‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(user_ids)}
‚ùå –û—à–∏–±–æ–∫: {failed_count}
"""
                try:
                    await query.edit_message_text(
                        progress_text,
                        parse_mode='Markdown'
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            await asyncio.sleep(0.05)

        except Exception as e:
            failed_count += 1
            log.warning(f"Failed to send broadcast to user {user_id}: {e}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_text = f"""
‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**

üéØ **–ì—Ä—É–ø–ø–∞:** {title}
 **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {sent_count}/{len(user_ids)}
‚ùå **–ù–µ—É–¥–∞—á–Ω—ã—Ö:** {failed_count}

üìä **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {(sent_count/len(user_ids)*100):.1f}%

üìù **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
{message_text[:200]}{'...' if len(message_text) > 200 else ''}
"""

    keyboard = [
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ",
                              callback_data="admin_broadcast")],
        [InlineKeyboardButton(" –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_admin")]
    ]

    try:
        await query.edit_message_text(
            final_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to edit message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await query.message.reply_text(
                final_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

    log.info(
        f"Broadcast completed: {sent_count}/{len(user_ids)} sent successfully")


async def handle_settings_action(query, context):
    """ –ü–†–û–î–ê–ö–®–ù-–ì–û–¢–û–í–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    data = query.data

    if data == "setting_admins":
        # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        await show_admin_management(query, context)
    elif data == "setting_export":
        await export_data(query, context)
    elif data == "setting_reload":
        await reload_settings(query, context)
    elif data == "setting_clear_logs":
        await clear_logs(query, context)
    elif data == "setting_detailed_stats":
        await show_detailed_stats(query, context)


async def show_admin_management(query, context):
    """üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(Admin).where(Admin.is_active == True)
            .order_by(Admin.created_at.desc())
        )
        admins = result.scalars().all()

    text = "üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò**\n\n"

    if HARDCODED_ADMIN_IDS:
        text += "üîß **–°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n"
        for admin_id in sorted(HARDCODED_ADMIN_IDS):
            text += f"- `{admin_id}` (—Å–∏—Å—Ç–µ–º–Ω—ã–π)\n"
        text += "\n"

    if admins:
        text += " **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î:**\n"
        for admin in admins:
            text += f"- `{admin.tg_id}` ({admin.role})\n"
    else:
        text += " **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î:** –Ω–µ—Ç\n"

    text += f"\nüìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:** {len(ADMIN_USERS)}\n\n"
    text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
    text += "- `/add_admin <ID> [—Ä–æ–ª—å]` - –¥–æ–±–∞–≤–∏—Ç—å\n"
    text += "- `/list_admins` - —Å–ø–∏—Å–æ–∫\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                              callback_data="setting_reload_admins")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to edit message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


async def export_data(query, context):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with async_sessionmaker() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            total_apps = await session.scalar(select(func.count(AppModel.id)))
            total_users = await session.scalar(select(func.count(User.id)))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_stats = await session.execute(
                select(AppModel.status, func.count(AppModel.id))
                .group_by(AppModel.status)
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
üìä **–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•**
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
- –ó–∞—è–≤–æ–∫: {total_apps}
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_USERS)}

**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫:**
"""
        for status, count in status_stats:
            report += f"- {status}: {count}\n"

        report += f"""

**–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - system_metrics['start_time']}
- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['total_requests']}
- –£—Å–ø–µ—à–Ω—ã—Ö: {system_metrics['successful_requests']}
- AI –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['ai_requests']}

 –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.
"""

        keyboard = [
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_settings")]
        ]

        try:
            await query.edit_message_text(
                report,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            log.error(f"Failed to edit message: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            try:
                await query.message.reply_text(
                    report,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as fallback_error:
                log.error(f"Fallback message also failed: {fallback_error}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

    except Exception as e:
        await query.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", show_alert=True)


async def reload_settings(query, context):
    """üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
        await load_db_admins()

        await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        await show_admin_settings(query, context)

    except Exception as e:
        await query.answer(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}", show_alert=True)


async def clear_logs(query, context):
    """ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    # –û—á–∏—â–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    system_metrics["total_requests"] = 0
    system_metrics["successful_requests"] = 0
    system_metrics["failed_requests"] = 0
    system_metrics["ai_requests"] = 0
    system_metrics["start_time"] = datetime.now()

    await query.answer("‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", show_alert=True)
    await show_admin_settings(query, context)


async def show_detailed_stats(query, context):
    """üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    async with async_sessionmaker() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)

        # –ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= today)
        )

        # –ó–∞—è–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= week_ago)
        )

        # –ó–∞—è–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü
        month_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= month_ago)
        )

        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –º–µ—Å—è—Ü
        top_categories = await session.execute(
            select(AppModel.subcategory, func.count(AppModel.id))
            .where(AppModel.created_at >= month_ago)
            .where(AppModel.subcategory.is_not(None))
            .group_by(AppModel.subcategory)
            .order_by(func.count(AppModel.id).desc())
            .limit(5)
        )

    text = f"""
üìà **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üìÖ **–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:**
- –°–µ–≥–æ–¥–Ω—è: {today_apps} –∑–∞—è–≤–æ–∫
- –ó–∞ –Ω–µ–¥–µ–ª—é: {week_apps} –∑–∞—è–≤–æ–∫
- –ó–∞ –º–µ—Å—è—Ü: {month_apps} –∑–∞—è–≤–æ–∫

üìä **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–µ—Å—è—Ü):**
"""

    for subcategory, count in top_categories:
        cat_name = subcategory.split(
            ':')[0] if subcategory and ':' in subcategory else subcategory
        text += f"- {cat_name}: {count}\n"

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    uptime = datetime.now() - system_metrics["start_time"]
    success_rate = 0
    if system_metrics["total_requests"] > 0:
        success_rate = (
            system_metrics["successful_requests"] / system_metrics["total_requests"]) * 100

    text += f"""

 **–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds // 3600}—á
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
- RPS: {system_metrics["total_requests"] / max(uptime.total_seconds(), 1):.2f}
"""

    keyboard = [
        [InlineKeyboardButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="setting_detailed_stats")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to edit message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


async def client_flow_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üéØ –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—É—Ç–∏"""
    query = update.callback_query
    await query.answer()

    data = query.data
    user = query.from_user

    if data == "request_call":
        await handle_request_call(query, context)
    elif data == "chat_consultation":
        await handle_chat_consultation(query, context)
    elif data == "get_price":
        await handle_get_price(query, context)
    elif data.startswith("consultation_category_"):
        await handle_consultation_category(query, context)
    elif data == "enter_phone":
        await handle_enter_phone(query, context)
    elif data == "submit_call_request":
        await handle_submit_call_request(query, context)
    elif data == "back_to_chat":
        await handle_back_to_chat(query, context)


async def handle_request_call(query, context):
    """PHONE: –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫"""
    text = """
PHONE: **–ó–ê–ö–ê–ó–ê–¢–¨ –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö**

–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞.
–ù–∞—à —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.

CLOCK: **–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:** 9:00 - 21:00 (–ú–°–ö)
üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** –ü–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç –ë–ï–°–ü–õ–ê–¢–ù–û

üìù –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É:
"""

    keyboard = [
        [InlineKeyboardButton("PHONE: –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                              callback_data="enter_phone")],
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=WEB_APP_URL)],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_chat")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_chat_consultation(query, context):
    """CHAT: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ —á–∞—Ç–µ"""
    text = """
CHAT: **–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –í –ß–ê–¢–ï**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:

üéØ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —á–∞—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:**
- –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û
"""

    keyboard = [
        [
            InlineKeyboardButton(" –°–µ–º–µ–π–Ω–æ–µ",
                                 callback_data="consultation_category_family"),
            InlineKeyboardButton(" –ñ–∏–ª–∏—â–Ω–æ–µ",
                                 callback_data="consultation_category_housing")
        ],
        [
            InlineKeyboardButton(" –¢—Ä—É–¥–æ–≤—ã–µ",
                                 callback_data="consultation_category_labor"),
            InlineKeyboardButton("üí≥ –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ",
                                 callback_data="consultation_category_bankruptcy")
        ],
        [
            InlineKeyboardButton(" –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏",
                                 callback_data="consultation_category_consumer"),
            InlineKeyboardButton("SCALES: –î—Ä—É–≥–∏–µ",
                                 callback_data="consultation_category_other")
        ],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_chat")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_get_price(query, context):
    """üìä –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    text = """
üìä **–°–¢–û–ò–ú–û–°–¢–¨ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –£–°–õ–£–ì**

üíµ **–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò:**
- –£—Å—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 2 000  rubles/—á–∞—Å
- –ü–∏—Å—å–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 1 500  rubles
- –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 3 000  rubles

SCALES: **–°–£–î–ï–ë–ù–û–ï –ü–†–ï–î–°–¢–ê–í–ò–¢–ï–õ–¨–°–¢–í–û:**
- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –¥–µ–ª–∞: –æ—Ç 30 000  rubles
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞: –æ—Ç 15 000  rubles
- –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–ø–æ—Ä—ã: –æ—Ç 50 000  rubles

üìù **–°–û–°–¢–ê–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–û–í:**
- –ü—Ä–µ—Ç–µ–Ω–∑–∏–∏: –æ—Ç 5 000  rubles
- –î–æ–≥–æ–≤–æ—Ä—ã: –æ—Ç 10 000  rubles
- –ò—Å–∫–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è: –æ—Ç 15 000  rubles

 **–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:**
- –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û
- –°–∫–∏–¥–∫–∞ 20% –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –º–µ—Å—è—Ü
- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
"""

    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç", url=WEB_APP_URL)],
        [InlineKeyboardButton("PHONE: –û–±—Å—É–¥–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                              callback_data="request_call")],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_chat")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_consultation_category(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    category_map = {
        "consultation_category_family": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "consultation_category_housing": "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "consultation_category_labor": "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã",
        "consultation_category_bankruptcy": "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ",
        "consultation_category_consumer": "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π",
        "consultation_category_other": "–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
    }

    category = category_map.get(query.data, "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

    text = f"""
‚úÖ **–í–´–ë–†–ê–ù–ê –ö–ê–¢–ï–ì–û–†–ò–Ø: {category.upper()}**

–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:

üìù **–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å:**
- –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
- –ß—Ç–æ —É–∂–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏
- –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω
- –ï—Å—Ç—å –ª–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å

 **–ù–∞—à —é—Ä–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç**

–õ–∏–±–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['consultation_category'] = category
    context.user_data['awaiting_consultation_details'] = True

    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∑–∞—è–≤–∫—É", url=WEB_APP_URL)],
        [InlineKeyboardButton("‚óÄ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                              callback_data="chat_consultation")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_back_to_chat(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    text = """
CHAT: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ.

–ù–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!
"""

    keyboard = [
        [
            InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=WEB_APP_URL),
            InlineKeyboardButton("PHONE: –ó–≤–æ–Ω–æ–∫",
                                 callback_data="request_call")
        ],
        [
            InlineKeyboardButton("CHAT: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                                 callback_data="chat_consultation"),
            InlineKeyboardButton("üìä –°—Ç–æ–∏–º–æ—Å—Ç—å",
                                 callback_data="get_price")
        ]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_consultation_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_text = update.message.text
    user = update.effective_user
    category = context.user_data.get('consultation_category', '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã')

    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_consultation_details'] = False

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω —á–∞—Ç
    admin_text = f"""
üìù **–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –í –ß–ê–¢–ï**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {user.first_name} {user.last_name or ''}
ID: **ID:** `{user_id}`
FOLDER: **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}

 **–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:**
{user_text}

CLOCK: **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üéØ **–¢—Ä–µ–±—É–µ—Ç—Å—è:** –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ —á–∞—Ç–µ
"""

    admin_keyboard = [[
        InlineKeyboardButton("CHAT: –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                             url=f"tg://user?id={user_id}")
    ]]

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await notify_all_admins_with_keyboard(
            context, 
            admin_text, 
            InlineKeyboardMarkup(admin_keyboard)
        )
        log.info(
            f"‚úÖ Consultation request sent to ALL admins for user {user_id}")
    except Exception as e:
        log.error(f"‚ùå Failed to send consultation request to admin: {e}")

    # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    response_text = f"""
‚úÖ **–ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ –ü–†–ò–ù–Ø–¢–ê**

FOLDER: **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}
CLOCK: **–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

 **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
- –ù–∞—à —é—Ä–∏—Å—Ç –∏–∑—É—á–∏—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é
- –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç
- –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û

IDEA: **–ü–æ–∫–∞ –∂–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞:**
–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã.
"""

    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∑–∞—è–≤–∫—É", url=WEB_APP_URL)],
        [InlineKeyboardButton("PHONE: –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
                              callback_data="request_call")]
    ]

    await update.message.reply_text(
        response_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    try:
        if ai_enhanced_manager and ai_enhanced_manager._initialized:
            ai_response = await ai_enhanced_manager.generate_response(
                user_id=user_id,
                message=f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ {category}: {user_text}",
                context={
                    'consultation_category': category,
                    'is_consultation_request': True
                }
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            await update.message.reply_text(
                f"ü§ñ **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø AI-–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø:**\n\n{ai_response}\n\n"
                f"SCALES: –ù–∞—à —é—Ä–∏—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç –¥–µ—Ç–∞–ª–∏ –∏ –¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            )

    except Exception as e:
        log.error(f"‚ùå Failed to generate AI consultation: {e}")


async def enhanced_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    user_id = update.effective_user.id
    user_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    if context.user_data.get('awaiting_consultation_details'):
        await handle_consultation_details(update, context)
        return

    # –û–±—ã—á–Ω–∞—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    await ai_chat(update, context)


async def show_ai_status(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Enhanced AI"""
    global ai_enhanced_manager

    text = "ü§ñ **–°–¢–ê–¢–£–° ENHANCED AI**\n\n"

    if ai_enhanced_manager is None:
        text += "‚ùå Enhanced AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        text += "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π AI"
    elif not ai_enhanced_manager._initialized:
        text += "WARNING: Enhanced AI —á–∞—Å—Ç–∏—á–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        text += "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º"
    else:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            health = await ai_enhanced_manager.health_check()

            if health.get("status") == "healthy":
                text += "‚úÖ Enhanced AI —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\n"
            else:
                text += "WARNING: Enhanced AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏\n\n"

            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            text += "**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**\n"
            components = health.get("components", {})

            for name, status in components.items():
                emoji = "‚úÖ" if status.get(
                    "status") == "ok" else "‚ùå"
                text += f"{emoji} {name.replace('_', ' ').title()}\n"

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            try:
                analytics = await ai_enhanced_manager.get_analytics_summary()
                if analytics.get("status") != "no_data":
                    text += f"\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {analytics.get('total_requests', 0)}\n"
                    text += f" –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analytics.get('success_rate', 0):.1%}\n"
                    text += f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {analytics.get('avg_response_time', 0):.1f}ms\n"
                    if analytics.get('estimated_cost'):
                        text += f"üíµ –†–∞—Å—Ö–æ–¥—ã: ${analytics.get('estimated_cost', 0):.2f}\n"
            except:
                pass

        except Exception as e:
            text += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to edit message: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as fallback_error:
            log.error(f"Fallback message also failed: {fallback_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


async def handle_enter_phone(query, context):
    """PHONE: –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∫–∞"""
    text = """
PHONE: **–£–ö–ê–ñ–ò–¢–ï –í–ê–® –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

üìù **–§–æ—Ä–º–∞—Ç:** +7 (900) 123-45-67 –∏–ª–∏ 89001234567

CLOCK: **–¢–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:**
- –£—Ç—Ä–æ–º (9:00-12:00)
- –î–Ω–µ–º (12:00-17:00)
- –í–µ—á–µ—Ä–æ–º (17:00-21:00)
- –°–µ–π—á–∞—Å (–≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)

–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:
`+7 (900) 123-45-67, –∑–≤–æ–Ω–∏—Ç—å –≤–µ—á–µ—Ä–æ–º`
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    context.user_data['awaiting_phone_input'] = True

    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤–º–µ—Å—Ç–æ –∑–≤–æ–Ω–∫–∞", url=WEB_APP_URL)],
        [InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="request_call")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    user_text = update.message.text
    user = update.effective_user

    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_phone_input'] = False

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫ –≤ –∞–¥–º–∏–Ω —á–∞—Ç
    admin_text = f"""
PHONE: **–ó–ê–Ø–í–ö–ê –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {user.first_name} {user.last_name or ''}
ID: **ID:** `{user_id}`

PHONE: **–ö–æ–Ω—Ç–∞–∫—Ç:** {user_text}

CLOCK: **–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üéØ **–¢—Ä–µ–±—É–µ—Ç—Å—è:** –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
üíµ **–£—Å–ª–æ–≤–∏–µ:** –ü–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç –ë–ï–°–ü–õ–ê–¢–ù–û
"""

    admin_keyboard = [[
        InlineKeyboardButton("PHONE: –ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                             url=f"tg://user?id={user_id}"),
        InlineKeyboardButton("CHAT: –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={user_id}")
    ]]

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
        await notify_all_admins_with_keyboard(
            context, 
            admin_text, 
            InlineKeyboardMarkup(admin_keyboard)
        )
        log.info(f"‚úÖ Call request sent to ALL admins for user {user_id}")
    except Exception as e:
        log.error(f"‚ùå Failed to send call request to admin: {e}")

    # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    response_text = f"""
‚úÖ **–ó–ê–Ø–í–ö–ê –ù–ê –ó–í–û–ù–û–ö –ü–†–ò–ù–Ø–¢–ê**

PHONE: **–í–∞—à –Ω–æ–º–µ—Ä:** {user_text}
CLOCK: **–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

 **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
- –ù–∞—à —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö
- –ü–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ë–ï–°–ü–õ–ê–¢–ù–û

PHONE: **–ï—Å–ª–∏ –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–º—Å—è:**
–ü–æ–ø—Ä–æ–±—É–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º —Å–∞–º–∏.
"""

    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞", url=WEB_APP_URL)],
        [InlineKeyboardButton("CHAT: –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ",
                              callback_data="chat_consultation")]
    ]

    await update.message.reply_text(
        response_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_submit_call_request(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫"""
    await query.answer("–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)


# ================ JOBS ================

async def autopost_job(context: ContextTypes.DEFAULT_TYPE):
    """üéØ –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–ô –ê–í–¢–û–ü–û–°–¢–ò–ù–ì: –∫–µ–π—Å—ã, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã, –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã"""
    if not CHANNEL_ID:
        return

    log.info("üöÄ Starting diverse legal content autopost...")

    try:
        # –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_types = [
            "legal_case",        # –ö–µ–π—Å –∏–∑ –∂–∏–∑–Ω–∏ (40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            "normative_act",     # –ù–æ–≤—ã–π –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç (25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            "legal_precedent",   # –°—É–¥–µ–±–Ω—ã–π –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç (20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            "legal_aspect",      # –í–∞–∂–Ω—ã–π –ø—Ä–∞–≤–æ–≤–æ–π –∞—Å–ø–µ–∫—Ç (15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        ]

        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        weights = [40, 25, 20, 15]
        import random
        content_type = random.choices(content_types, weights=weights)[0]

        log.info(f"üìù Selected content type: {content_type}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if content_type == "legal_case":
            post_text = await generate_case_post()
        elif content_type == "normative_act":
            post_text = await generate_normative_act_post()
        elif content_type == "legal_precedent":
            post_text = await generate_precedent_post()
        elif content_type == "legal_aspect":
            post_text = await generate_legal_aspect_post()
        else:
            # Fallback –∫ –∫–µ–π—Å—É
            post_text = await generate_case_post()

        log.info(
            f"‚úÖ Generated {content_type} post: {len(post_text)} chars")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        keyboard = [[
            InlineKeyboardButton(" –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                 url=f"https://t.me/{context.bot.username}")
        ]]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
        message = await context.bot.send_message(
            CHANNEL_ID,
            post_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

        log.info(
            f"‚úÖ {content_type} post sent to channel: {message.message_id}")

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        try:
            from bot.services.ai_enhanced.analytics.interaction_tracker import InteractionTracker
            tracker = InteractionTracker()
            try:
                from bot.services.ai_enhanced.core.context_builder import AIContext
                ai_context = AIContext()
                await tracker.track_interaction(
                    user_id=0,  # —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    session_id=0,  # —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å–µ—Å—Å–∏—è
                    message=f"autopost_{content_type}",
                    response=post_text,
                    context=ai_context,
                    response_time_ms=1000  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                )
            except Exception as track_error:
                log.error(f"Autopost tracking failed: {track_error}")
        except Exception as analytics_error:
            log.error(f"Analytics tracking failed: {analytics_error}")

    except Exception as e:
        log.error(f"‚ùå Diverse autopost failed: {e}")
        await send_emergency_post(context)


async def generate_case_post() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –∫–µ–π—Å–æ–º –∏–∑ –∂–∏–∑–Ω–∏"""
    try:
        from bot.services.content_intelligence.post_generator import PostGenerator
        generator = PostGenerator()
        return await generator.generate_post()
    except Exception as e:
        log.error(f"Case post generation failed: {e}")
        return get_emergency_case_post()


async def generate_normative_act_post() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ –Ω–æ–≤–æ–º –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–º –∞–∫—Ç–µ"""
    import random

    normative_acts = [
        {
            "title": "–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã",
            "act": "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ No. 2463 –æ—Ç 31.12.2024",
            "changes": """üîÑ **–ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:**
- –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã —Ç–µ–ø–µ—Ä—å –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π
- –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –æ–±—è–∑–∞–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
- –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Å–∞–º–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
- –í–≤–µ–¥–µ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∑–∞ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤""",
            "impact": """üìà **–ö–ê–ö –≠–¢–û –í–õ–ò–Ø–ï–¢ –ù–ê –í–ê–°:**
‚úÖ –ë–æ–ª—å—à–µ –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö –Ω–∞ Wildberries, Ozon, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–µ–∑ —Å–ø–æ—Ä–æ–≤ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–∞–∂–µ –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
WARNING: –ò—Å–∫–ª—é—á–µ–Ω–∏—è: –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã""",
            "action": """IDEA: **–ß–¢–û –î–ï–õ–ê–¢–¨:**
1. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø–æ–∫—É–ø–∫–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —á–µ–∫–∏)
2. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø—Ä–æ–¥–∞–≤—Ü—É
3. –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ 3 –¥–Ω—è - –ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
4. –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ - –∂–∞–ª—É–π—Ç–µ—Å—å –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞"""
        },
        {
            "title": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¢—Ä—É–¥–æ–≤–æ–º –∫–æ–¥–µ–∫—Å–µ: —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç—Ä—É–¥–æ–≤—ã–µ –∫–Ω–∏–∂–∫–∏",
            "act": "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω No. 439-–§–ó –æ—Ç 16.12.2024",
            "changes": """üîÑ **–ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:**
- –° 1 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥–∞ –≤—Å–µ –Ω–æ–≤—ã–µ —Ç—Ä—É–¥–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã —Ç–æ–ª—å–∫–æ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ
- –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω —É–≤–µ–¥–æ–º–ª—è—Ç—å –ü–§–† –æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –¥–Ω—è
- –í–≤–µ–¥–µ–Ω—ã —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–∞—á—É —Å–≤–µ–¥–µ–Ω–∏–π (–¥–æ 50,000 rubles)
- –ë—É–º–∞–∂–Ω—ã–µ —Ç—Ä—É–¥–æ–≤—ã–µ –∫–Ω–∏–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞—è–≤–ª–µ–Ω–∏—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞""",
            "impact": """üìà **–ö–ê–ö –≠–¢–û –í–õ–ò–Ø–ï–¢ –ù–ê –í–ê–°:**
‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É –±–µ–∑ –±—É–º–∞–∂–Ω–æ–π –≤–æ–ª–æ–∫–∏—Ç—ã
‚úÖ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Ç–µ—Ä–∏ —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏
‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–∂—É —á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏
WARNING: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π""",
            "action": """IDEA: **–ß–¢–û –î–ï–õ–ê–¢–¨:**
1. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é —Ç—Ä—É–¥–æ–≤—É—é –∫–Ω–∏–∂–∫—É
2. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥
3. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ç—Ä–µ–±—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
4. –í–µ–¥–∏—Ç–µ –ª–∏—á–Ω—ã–π –∞—Ä—Ö–∏–≤ —Å–ø—Ä–∞–≤–æ–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ —Ä–∞–±–æ—Ç–µ"""
        },
        {
            "title": "–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–¥–µ–ª–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ–¥–µ",
            "act": "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω No. 478-–§–ó –æ—Ç 28.12.2024",
            "changes": """üîÑ **–ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:**
- –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ NFT —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–¥–µ–ª—É –∫–∞–∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞–∂–∏—Ç–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ
- –î–æ–ª–≥–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –¥–µ–ª—è—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –∏–º—É—â–µ—Å—Ç–≤—É
- –î–æ—Ö–æ–¥—ã –æ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ
- –£–ø—Ä–æ—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ —á–µ—Ä–µ–∑ –Ω–æ—Ç–∞—Ä–∏—É—Å–∞ –±–µ–∑ —Å—É–¥–∞""",
            "impact": """üìà **–ö–ê–ö –≠–¢–û –í–õ–ò–Ø–ï–¢ –ù–ê –í–ê–°:**
‚úÖ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞
‚úÖ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫—Ä—ã—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
‚úÖ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–æ—Ç–∞—Ä–∏—É—Å–∞
WARNING: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Ö–æ–¥—ã –∏ –∞–∫—Ç–∏–≤—ã""",
            "action": """IDEA: **–ß–¢–û –î–ï–õ–ê–¢–¨:**
1. –í–µ–¥–∏—Ç–µ —É—á–µ—Ç –≤—Å–µ—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ –≤ –±—Ä–∞–∫–µ
2. –ü—Ä–∏ —Ä–∞–∑–≤–æ–¥–µ –∑–∞—è–≤–ª—è–π—Ç–µ –æ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö —Å—É–ø—Ä—É–≥–∞
3. –¢—Ä–µ–±—É–π—Ç–µ —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –±—Ä–∞–∫–∞
4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
        }
    ]

    selected = random.choice(normative_acts)

    post = f"""üÜï **–ù–û–í–´–ô –ó–ê–ö–û–ù: {selected['title'].upper()}**

SCROLL: **{selected['act']}**

{selected['changes']}

{selected['impact']}

{selected['action']}

 **–ù–£–ñ–ù–ê –ü–û–ú–û–©–¨ –Æ–†–ò–°–¢–ê?**
–ù–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –∫ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?

üéØ –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:
‚úÖ –û–±—ä—è—Å–Ω—è—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à–∏ –ø—Ä–∞–≤–∞
‚úÖ –ü–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –Ω–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
‚úÖ –°–æ—Å—Ç–∞–≤—è—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π

CHAT: –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û: /start
SCALES: –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ!"""

    return post


async def generate_precedent_post() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ —Å—É–¥–µ–±–Ω–æ–º –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–µ"""
    import random

    precedents = [
        {
            "title": "–í–µ—Ä—Ö–æ–≤–Ω—ã–π —Å—É–¥ –∑–∞—â–∏—Ç–∏–ª –ø—Ä–∞–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
            "case": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ No. 5-–ö–ì24-119-–ö2",
            "story": """üìã **–î–ï–õ–û:**
–ì—Ä–∞–∂–¥–∞–Ω–∫–∞ –ú. –∫—É–ø–∏–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ Wildberries –∑–∞ 45,000 rubles. –¢–æ–≤–∞—Ä –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–¥–¥–µ–ª–∫–æ–π. –ü—Ä–æ–¥–∞–≤–µ—Ü –∏—Å—á–µ–∑, Wildberries –æ—Ç–∫–∞–∑—ã–≤–∞–ª—Å—è –≤–æ–∑–º–µ—â–∞—Ç—å —É—â–µ—Ä–±, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ —Ç–æ, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ '–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º'.""",
            "decision": """SCALES: **–†–ï–®–ï–ù–ò–ï –°–£–î–ê:**
–í–µ—Ä—Ö–æ–≤–Ω—ã–π —Å—É–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∏–ª: –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–µ—Å–µ—Ç —Å–æ–ª–∏–¥–∞—Ä–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏:
- –ù–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
- –ü–æ–ª—É—á–∞–ª –∫–æ–º–∏—Å—Å–∏—é —Å –ø—Ä–æ–¥–∞–∂–∏
- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏""",
            "impact": """üéØ **–ó–ù–ê–ß–ï–ù–ò–ï –î–õ–Ø –ì–†–ê–ñ–î–ê–ù:**
‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–º–µ—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
‚úÖ –ù–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å—É—Ç Ozon, Wildberries, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
‚úÖ –°—É–¥—ã –æ–±—è–∑–∞–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç—É –ø—Ä–∞–∫—Ç–∏–∫—É –≤–æ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"""
        },
        {
            "title": "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ —Ä–∞—Å—à–∏—Ä–∏–ª –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∫—É",
            "case": "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–° –†–§ No. 29-–ü –æ—Ç 15.11.2024",
            "story": """üìã **–î–ï–õ–û:**
–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –°. —Ä–∞–±–æ—Ç–∞–ª —É–¥–∞–ª–µ–Ω–Ω–æ 2 –≥–æ–¥–∞. –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª –≤—ã—Ö–æ–¥ –≤ –æ—Ñ–∏—Å, —É–≥—Ä–æ–∂–∞—è —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º. –°. –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ —Å—É–¥, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤.""",
            "decision": """SCALES: **–†–ï–®–ï–ù–ò–ï –°–£–î–ê:**
–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –ø—Ä–∏–∑–Ω–∞–ª: –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω–æ, –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—Ç–µ –≤ –æ—Ñ–∏—Å–µ –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Ä—É—à–∞–µ—Ç:
- –ü—Ä–∞–≤–æ –Ω–∞ —Å–≤–æ–±–æ–¥—É —Ç—Ä—É–¥–∞
- –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- –ü—Ä–∞–≤–æ –Ω–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞""",
            "impact": """üéØ **–ó–ù–ê–ß–ï–ù–ò–ï –î–õ–Ø –†–ê–ë–û–¢–ù–ò–ö–û–í:**
‚úÖ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–∏—Å–µ
‚úÖ –ù–µ–ª—å–∑—è —É–≤–æ–ª–∏—Ç—å –∑–∞ –æ—Ç–∫–∞–∑ –æ—Ç –æ—Ñ–∏—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤–µ—Å–∫–∏—Ö –ø—Ä–∏—á–∏–Ω
‚úÖ –ü—Ä–∏ —Å–ø–æ—Ä–µ —Å—É–¥ –±—É–¥–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
‚úÖ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ '—É–¥–∞–ª–µ–Ω—â–∏–∫–æ–≤' –Ω–∞ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ"""
        },
        {
            "title": "–ë–∞–Ω–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç–∞ –±–µ–∑ –≤–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π",
            "case": "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ª–µ–Ω—É–º–∞ –í–ê–° –†–§ No. 62 –æ—Ç 04.12.2024",
            "story": """üìã **–î–ï–õ–û:**
–ò–ü –ö–æ–∑–ª–æ–≤ –ø–æ–ª—É—á–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—á–µ—Ç–∞ –≤ –°–±–µ—Ä–±–∞–Ω–∫–µ –∑–∞ '–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'. –ë–∞–Ω–∫ –Ω–µ –æ–±—ä—è—Å–Ω–∏–ª –ø—Ä–∏—á–∏–Ω—ã. –ë–∏–∑–Ω–µ—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –Ω–∞—á–∞–ª–∏—Å—å —à—Ç—Ä–∞—Ñ—ã –∏ —É–±—ã—Ç–∫–∏.""",
            "decision": """SCALES: **–†–ï–®–ï–ù–ò–ï –°–£–î–ê:**
–í—ã—Å—à–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥ —É—Å—Ç–∞–Ω–æ–≤–∏–ª: –±–∞–Ω–∫–∏ –æ–±—è–∑–∞–Ω—ã:
- –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç –ø—Ä–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
- –í–æ–∑–º–µ—â–∞—Ç—å —É–±—ã—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ""",
            "impact": """üéØ **–ó–ù–ê–ß–ï–ù–ò–ï –î–õ–Ø –ë–ò–ó–ù–ï–°–ê:**
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –±–∞–Ω–∫–∞–º–∏
‚úÖ –ü—Ä–∞–≤–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –∑–∞ —É–±—ã—Ç–∫–∏
‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –æ—Ç –±–∞–Ω–∫–∞
‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—á–µ—Ç–æ–≤"""
        }
    ]

    selected = random.choice(precedents)

    post = f"""SCALES: **–í–ê–ñ–ù–´–ô –ü–†–ï–¶–ï–î–ï–ù–¢: {selected['title'].upper()}**

üìã **{selected['case']}**

{selected['story']}

{selected['decision']}

{selected['impact']}

IDEA: **–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:**
1. –°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö —Å–ø–æ—Ä–∞—Ö
2. –¢—Ä–µ–±—É–π—Ç–µ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ–±–ª—é–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ –∂–∞–ª–æ–±—ã –≤ –Ω–∞–¥–∑–æ—Ä–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–∫–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

 **–°–¢–û–õ–ö–ù–£–õ–ò–°–¨ –° –ü–û–•–û–ñ–ï–ô –°–ò–¢–£–ê–¶–ò–ï–ô?**
–ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É:

‚úÖ –°–æ—Å—Ç–∞–≤–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã
‚úÖ –ü–æ–º–æ–∂–µ–º –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Å—É–¥–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
‚úÖ –î–æ–±—å–µ–º—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

CHAT: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: /start
SCALES: –ó–Ω–∞–Ω–∏–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–æ–≤ - –∫–ª—é—á –∫ –ø–æ–±–µ–¥–µ –≤ —Å—É–¥–µ!"""

    return post


async def generate_legal_aspect_post() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ –≤–∞–∂–Ω–æ–º –ø—Ä–∞–≤–æ–≤–æ–º –∞—Å–ø–µ–∫—Ç–µ"""
    import random

    legal_aspects = [
        {
            "title": "–ú–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥: –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å",
            "intro": """üíµ **–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?**
–ú–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥ –º–æ–∂–Ω–æ –≤–∑—ã—Å–∫–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤ –ª—é–±–æ–º —Å–ø–æ—Ä–µ, –Ω–æ 90% –≥—Ä–∞–∂–¥–∞–Ω –¥–µ–ª–∞—é—Ç —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—É—á–∞—é—Ç –∫–æ–ø–µ–π–∫–∏ –≤–º–µ—Å—Ç–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—É–º–º.""",
            "key_points": """üéØ **–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´:**

üìä **–†–∞–∑–º–µ—Ä—ã –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ:**
- –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–æ—Ä—ã: 5,000-50,000 rubles
- –¢—Ä—É–¥–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: 10,000-100,000 rubles
- –î–¢–ü —Å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º–∏: 50,000-500,000 rubles
- –ö–ª–µ–≤–µ—Ç–∞, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è: 20,000-200,000 rubles

üéØ **–§–∞–∫—Ç–æ—Ä—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—É–º–º—ã:**
- –ü—É–±–ª–∏—á–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è (—Å–æ—Ü—Å–µ—Ç–∏, –°–ú–ò)
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤
- –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ (–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)
- –ì—Ä—É–±–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
- –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—á–∏–∫–∞""",
            "mistakes": """‚ùå **–¢–ò–ü–ò–ß–ù–´–ï –û–®–ò–ë–ö–ò:**
- –ü—Ä–æ—Å—è—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ (1,000-3,000 rubles) - —Å—É–¥ —Å–Ω–∏–∂–∞–µ—Ç –µ—â–µ –±–æ–ª—å—à–µ
- –ù–µ –æ–±–æ—Å–Ω–æ–≤—ã–≤–∞—é—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
- –ù–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π
- –ó–∞–±—ã–≤–∞—é—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞ –¥–∞—Ç—É –≤—ã–Ω–µ—Å–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è""",
            "tips": """‚úÖ **–ö–ê–ö –°–î–ï–õ–ê–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–û:**
1. –ò–∑—É—á–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –¥–µ–ª–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–æ—Ç–µ–∫—É —Å—É–¥–æ–≤
2. –ü—Ä–æ—Å–∏—Ç–µ —Å—É–º–º—É –≤ 2-3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –∂–µ–ª–∞–µ–º–æ–π
3. –°–æ–±–∏—Ä–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∫–∏ –æ –ª–µ—á–µ–Ω–∏–∏, –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π
4. –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
5. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–π –æ—Ç–≤–µ—Ç—á–∏–∫–æ–º"""
        },
        {
            "title": "–°—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏: –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å",
            "intro": """CLOCK: **–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?**
–ö–∞–∂–¥—ã–π –≥–æ–¥ —Ç—ã—Å—è—á–∏ –≥—Ä–∞–∂–¥–∞–Ω —Ç–µ—Ä—è—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –Ω–µ –∑–Ω–∞—é—Ç –ø—Ä–æ —Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏.""",
            "key_points": """üéØ **–û–°–ù–û–í–ù–´–ï –°–†–û–ö–ò:**

üìÖ **3 –≥–æ–¥–∞ (–æ–±—â–∏–π —Å—Ä–æ–∫):**
- –í–∑—ã—Å–∫–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º
- –í–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞ –æ—Ç –î–¢–ü
- –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç
- –í–∑—ã—Å–∫–∞–Ω–∏–µ —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π

üìÖ **1 –≥–æ–¥ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏):**
- –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –∑–∞—Ä–ø–ª–∞—Ç–∞)
- –°–ø–æ—Ä—ã –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –≥—Ä—É–∑–æ–≤
- –ù–∏—á—Ç–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫

üìÖ **2 –≥–æ–¥–∞:**
- –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
- –°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã

üìÖ **10 –ª–µ—Ç:**
- –í–æ–∑–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–¥–∞ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—é""",
            "mistakes": """‚ùå **–û–ü–ê–°–ù–´–ï –ó–ê–ë–õ–£–ñ–î–ï–ù–ò–Ø:**
- "–°—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è" - –ù–ï–¢! –° –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
- "–ï—Å–ª–∏ –ø–æ–¥–∞–ª –ø—Ä–µ—Ç–µ–Ω–∑–∏—é, —Å—Ä–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è" - –ù–ï–¢! –¢–æ–ª—å–∫–æ —Å—É–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç
- "–£—Å—Ç–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—é –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Å—Ä–æ–∫" - –ù–ï–¢! –¢–æ–ª—å–∫–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –¥–æ–ª–≥–∞""",
            "tips": """‚úÖ **–ö–ê–ö –ó–ê–©–ò–¢–ò–¢–¨ –°–ï–ë–Ø:**
1. –í–µ–¥–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º
2. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∑–∞–∫–∞–∑–Ω—ã–º–∏ –ø–∏—Å—å–º–∞–º–∏
3. –ü—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ - –ø–æ–¥–∞–≤–∞–π—Ç–µ –∏—Å–∫, –¥–∞–∂–µ –¥–ª—è '–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤'
4. –ü–æ–ª—É—á–∞–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –≤–∏–Ω—ã –∏–ª–∏ –¥–æ–ª–≥–∞
5. –ü–æ–º–Ω–∏—Ç–µ: —Å—É–¥ –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –ø—Ä–∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω–∞—Ö"""
        },
        {
            "title": "–°—É–¥–µ–±–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: –∫–∞–∫ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø—Ä–∞–≤–æ—Å—É–¥–∏–µ",
            "intro": """MONEY: **–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?**
–î–∞–∂–µ –≤—ã–∏–≥—Ä–∞–≤ —Å—É–¥, –º–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —É–±—ã—Ç–∫–µ –∏–∑-–∑–∞ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –ù–æ –µ—Å—Ç—å –∑–∞–∫–æ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ª–æ–∂–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.""",
            "key_points": """üéØ **–í–ò–î–´ –†–ê–°–•–û–î–û–í:**

üíµ **–ì–æ—Å–ø–æ—à–ª–∏–Ω–∞:**
- –î–æ 1 –º–ª–Ω rubles - –æ—Ç 4% –¥–æ 13,200 rubles
- –°–≤—ã—à–µ 1 –º–ª–Ω rubles - 13,200 rubles + 0.5% —Å —Å—É–º–º—ã —Å–≤—ã—à–µ
- –ù–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã - 300 rubles
- –ú–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥ - 300 rubles

üíµ **–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ:**
- –Æ—Ä–∏—Å—Ç—ã: 2,000-10,000 rubles –∑–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–µ
- –ü–æ —Å–ª–æ–∂–Ω—ã–º –¥–µ–ª–∞–º: –¥–æ 50,000 rubles –∏ –≤—ã—à–µ
- –í–æ–∑–º–µ—â–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö '—Ä–∞–∑—É–º–Ω—ã—Ö'

üíµ **–≠–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:**
- –ü–æ—á–µ—Ä–∫–æ–≤–µ–¥—á–µ—Å–∫–∞—è: 15,000-30,000 rubles
- –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è: 20,000-50,000 rubles
- –û—Ü–µ–Ω–æ—á–Ω–∞—è: 5,000-15,000 rubles""",
            "mistakes": """‚ùå **–î–û–†–û–ì–ò–ï –û–®–ò–ë–ö–ò:**
- –ù–µ –ø—Ä–æ—Å—è—Ç –≤–æ–∑–º–µ—â–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∏—Å–∫–æ–≤–æ–º –∑–∞—è–≤–ª–µ–Ω–∏–∏
- –ù–µ –≤–µ–¥—É—Ç —É—á–µ—Ç –≤—Å–µ—Ö —Ç—Ä–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
- –°–æ–≥–ª–∞—à–∞—é—Ç—Å—è –Ω–∞ –º–∏—Ä–æ–≤—É—é –±–µ–∑ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
- –ù–µ –æ–±–∂–∞–ª—É—é—Ç –æ—Ç–∫–∞–∑ –≤ –≤–æ–∑–º–µ—â–µ–Ω–∏–∏ '–∑–∞–≤—ã—à–µ–Ω–Ω—ã—Ö' —Å—É–º–º""",
            "tips": """‚úÖ **–ö–ê–ö –°–≠–ö–û–ù–û–ú–ò–¢–¨:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—å–≥–æ—Ç—ã –ø–æ –≥–æ—Å–ø–æ—à–ª–∏–Ω–µ (–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, –∏–Ω–≤–∞–ª–∏–¥—ã)
2. –ü—Ä–∏ –∏—Å–∫–µ –¥–æ 50,000 rubles - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è —Å–∞–º–∏
3. –•–æ–¥–∞—Ç–∞–π—Å—Ç–≤—É–π—Ç–µ –æ–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –∏—Å–∫–∞ –¥–ª—è –≤–æ–∑–º–µ—â–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
4. –í–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —É—á–µ—Ç –≤—Å–µ—Ö —Ç—Ä–∞—Ç
5. –í –º–∏—Ä–æ–≤–æ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        }
    ]

    selected = random.choice(legal_aspects)

    post = f"""IDEA: **–ü–†–ê–í–û–í–û–ô –õ–ò–ö–ë–ï–ó: {selected['title'].upper()}**

{selected['intro']}

{selected['key_points']}

{selected['mistakes']}

{selected['tips']}

 **–ù–£–ñ–ù–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–û–ú–û–©–¨?**
–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å–æ —Å–ª–æ–∂–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π?

üéØ –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã:
‚úÖ –ü—Ä–æ—Å—á–∏—Ç–∞—é—Ç –≤—Å–µ —Ä–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–µ–π—Å—Ç–≤–∏–π
‚úÖ –ü–æ–º–æ–≥—É—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
‚úÖ –î–æ–±—å—é—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏

CHAT: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: /start
BOOKS: –ó–Ω–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ - –≤–∞—à–∞ –ª—É—á—à–∞—è –∑–∞—â–∏—Ç–∞!"""

    return post


async def send_emergency_post(context):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–∏ —Å–±–æ—è—Ö"""
    emergency_post = get_emergency_case_post()

    keyboard = [[
        InlineKeyboardButton(" –°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                             url=f"https://t.me/{context.bot.username}")
    ]]

    await context.bot.send_message(
        CHANNEL_ID,
        emergency_post,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    log.info("SHIELD: Emergency post sent successfully")


def get_emergency_case_post() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–µ–π—Å-–ø–æ—Å—Ç"""
    return """üìã **–ö–ï–ô–° –ò–ó –ñ–ò–ó–ù–ò:**
–í–ª–∞–¥–∏–º–∏—Ä –∫—É–ø–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–∞–ª–æ–Ω–µ –∑–∞ 1,2 –º–ª–Ω rubles. –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏—Å—å —Å–∫—Ä—ã—Ç—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è. –î–∏–ª–µ—Ä —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–∑–Ω–æ—Å' –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.

SCALES: **–ê–õ–ì–û–†–ò–¢–ú –†–ï–®–ï–ù–ò–Ø:**
1. üìù –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—É—é –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –∫ –¥–∏–ª–µ—Ä—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Ä–µ–º–æ–Ω—Ç–∞
2. SEARCH: –ó–∞–∫–∞–∂–∏—Ç–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –¥–µ—Ñ–µ–∫—Ç–∞
3.  –ù–∞–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –¥–∏–ª–µ—Ä—É –∑–∞–∫–∞–∑–Ω—ã–º –ø–∏—Å—å–º–æ–º
4. üèõÔ∏è –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ - –∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä –∏ –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
5. SCALES: –ü–æ–¥–∞—á–∞ –∏—Å–∫–∞ –≤ —Å—É–¥ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –∑–∞–º–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
6. üíµ –í–∑—ã—Å–∫–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∏ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞
7.  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—Å–µ—Ö –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤

BOOKS: **–ù–û–†–ú–ê–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê:**
SCROLL: –ó–∞–∫–æ–Ω "–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π" No. 2300-1:
- –°—Ç–∞—Ç—å—è 18 - –ø—Ä–∞–≤–æ –Ω–∞ –æ–±–º–µ–Ω/–≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
- –°—Ç–∞—Ç—å—è 19 - –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã
- –°—Ç–∞—Ç—å—è 29 - –ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤

WARNING: **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –î–∏–ª–µ—Ä –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
- –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã (30-50 —Ç—ã—Å rubles)
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—É–¥–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (6-12 –º–µ—Å—è—Ü–µ–≤)

 **–ü–û–õ–£–ß–ò–¢–ï –ü–û–ú–û–©–¨ –≠–ö–°–ü–ï–†–¢–ê:**
–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ–±–º–∞–Ω–æ–º –∞–≤—Ç–æ–¥–∏–ª–µ—Ä–∞? –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ!

üéØ –ù–∞—à–∏ –∞–≤—Ç–æ—é—Ä–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç:
‚úÖ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
‚úÖ –ù–∞–π—Ç–∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ —Ä–∞–∑—É–º–Ω—ã–º —Ü–µ–Ω–∞–º
‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å –¥–∏–ª–µ—Ä–æ–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º
‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Å—É–¥–µ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

CHAT: –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û: /start
SCALES: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ 85% —Å–ª—É—á–∞–µ–≤!"""


async def _fallback_autopost(context: ContextTypes.DEFAULT_TYPE):
    """–†–ï–ó–ï–†–í–ù–´–ô –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å –∫–µ–π—Å–∞–º–∏"""

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        from bot.services.content_intelligence.post_generator import PostGenerator

        enhanced_generator = PostGenerator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç —Å –∫–µ–π—Å–æ–º
        log.info("üìù Generating fallback professional case post...")
        post_text = await enhanced_generator.generate_post()

        log.info(
            f"‚úÖ Generated fallback professional post: {len(post_text)} chars")

    except Exception as e:
        log.error(f"‚ùå Enhanced post generation failed: {e}")

        # –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ó–ï–†–í —Å –∫–µ–π—Å–∞–º–∏
        fallback_cases = [
            """üìã **–ö–ï–ô–° –ò–ó –ñ–ò–ó–ù–ò:**
–ï–ª–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É 3 –º–µ—Å—è—Ü–∞. –î–∏—Ä–µ–∫—Ç–æ—Ä —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', –Ω–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ. –£–≥—Ä–æ–∂–∞–µ—Ç —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞.

SCALES: **–ê–õ–ì–û–†–ò–¢–ú –†–ï–®–ï–ù–ò–Ø:**
1. üìã –ü–æ–¥–∞–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –≤—ã–ø–ª–∞—Ç—ã
2. PHONE: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞
3.  –°–æ–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä, —Ç–∞–±–µ–ª–∏, —Å–ø—Ä–∞–≤–∫–∏
4. SCALES: –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
5. üíµ –¢—Ä–µ–±—É–π—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É (1/150 –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë)
6. üèõÔ∏è –£–≤–µ–¥–æ–º–∏—Ç–µ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤
7. PHONE: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏—â–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã

BOOKS: **–ù–û–†–ú–ê–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê:**
SCROLL: –¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§ No. 197-–§–ó:
- –°—Ç–∞—Ç—å—è 136 - —Å—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
- –°—Ç–∞—Ç—å—è 236 - –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞—Ä–ø–ª–∞—Ç—ã
- –°—Ç–∞—Ç—å—è 140 - —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏

WARNING: **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–∞–≤–∏—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–≤—ã–Ω–æ—Å–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è
- –ö–æ–º–ø–∞–Ω–∏—è –º–æ–∂–µ—Ç –æ–±–∞–Ω–∫—Ä–æ—Ç–∏—Ç—å—Å—è, –∏–∑–±–µ–≥–∞—è –≤—ã–ø–ª–∞—Ç
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –∑–∞–π–º–µ—Ç –º–µ—Å—è—Ü—ã
- –ë–µ–∑ –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–∂–Ω–æ –¥–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –¥–æ–ª–≥–∞

 **–ü–û–õ–£–ß–ò–¢–ï –ü–û–ú–û–©–¨ –≠–ö–°–ü–ï–†–¢–ê:**
–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –ø–ª–∞—Ç–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—É? –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–∞–≤–∞!

üéØ –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∑—ã—Å–∫–∞—Ç—å:
‚úÖ –í—Å—é –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏
‚úÖ –ú–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤
‚úÖ –í–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å

CHAT: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: /start
SCALES: –í–∑—ã—Å–∫–∏–≤–∞–µ–º –¥–æ–ª–≥–∏ –¥–∞–∂–µ —Å –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–≤—à–∏—Ö—Å—è –∫–æ–º–ø–∞–Ω–∏–π!""",

            """üìã **–ö–ï–ô–° –ò–ó –ñ–ò–ó–ù–ò:**
–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –ü–µ—Ç—Ä–æ–≤—ã—Ö 4 –º–µ—Å—è—Ü–∞ –Ω–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã. –£–ö —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω—É—é –æ–ø–ª–∞—Ç—É –∑–∞ –ñ–ö–£, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ '–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'. –ñ–∏–ª—å—Ü—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –≥—Ä–µ—Ç—å –≤–æ–¥—É –∏ –ø–æ–∫—É–ø–∞—Ç—å —É—Å–ª—É–≥–∏ –±–∞–Ω–∏.

SCALES: **–ê–õ–ì–û–†–ò–¢–ú –†–ï–®–ï–ù–ò–Ø:**
1. üìù –ü–æ–¥–∞–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—É—é –∂–∞–ª–æ–±—É –≤ –£–ö —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
2. PHOTO: –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å–ª—É–≥–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å –¥–∞—Ç–æ–π
3. üèõÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∂–∏–ª–∏—â–Ω—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
4. üíµ –¢—Ä–µ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Å–ª—É–≥–∏
5. PHONE: –ü–æ–¥–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –∂–∞–ª–æ–±—É –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –∂–∏–ª—å—Ü–æ–≤
6. SCALES: –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ - –∏—Å–∫ –≤ —Å—É–¥ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ —É—â–µ—Ä–±–∞
7. üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–π—Ç–µ —Å–º–µ–Ω—É —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏

BOOKS: **–ù–û–†–ú–ê–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê:**
SCROLL: –ñ–ö –†–§ No. 188-–§–ó:
- –°—Ç–∞—Ç—å—è 154 - —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç—ã –∑–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
- –°—Ç–∞—Ç—å—è 161 - –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

üèõÔ∏è –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ No. 354:
- –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥

WARNING: **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –£–ö –º–æ–∂–µ—Ç —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–∑–±–µ–≥–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
- –î–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä —É—â–µ—Ä–±–∞ –±–µ–∑ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã —Å–ª–æ–∂–Ω–æ
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–º–µ–Ω—É –£–ö

 **–ü–û–õ–£–ß–ò–¢–ï –ü–û–ú–û–©–¨ –≠–ö–°–ü–ï–†–¢–ê:**
–£–ö –Ω–∞—Ä—É—à–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–∞–≤–∞? –î–æ–±–µ–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏!

üéØ –ù–∞—à–∏ –∂–∏–ª–∏—â–Ω—ã–µ —é—Ä–∏—Å—Ç—ã:
‚úÖ –î–æ–±—å—é—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
‚úÖ –í–∑—ã—â—É—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
‚úÖ –ü—Ä–∏–≤–ª–µ–∫—É—Ç –£–ö –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
‚úÖ –û—Ä–≥–∞–Ω–∏–∑—É—é—Ç —Å–º–µ–Ω—É –£–ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

CHAT: –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û: /start
 –ó–∞—â–∏—â–∞–µ–º –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —Å 2010 –≥–æ–¥–∞!""",

            """üìã **–ö–ï–ô–° –ò–ó –ñ–ò–ó–ù–ò:**
–ü–æ—Å–ª–µ —Ä–∞–∑–≤–æ–¥–∞ –ú–∏—Ö–∞–∏–ª –Ω–µ –ø–ª–∞—Ç–∏—Ç –∞–ª–∏–º–µ–Ω—Ç—ã –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞ 8 –º–µ—Å—è—Ü–µ–≤. –°–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –ë—ã–≤—à–∞—è –∂–µ–Ω–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–∞ –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –ª–µ—á–µ–Ω–∏–µ —Å—ã–Ω–∞.

SCALES: **–ê–õ–ì–û–†–ò–¢–ú –†–ï–®–ï–ù–ò–Ø:**
1. üìã –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –≤ –º–∏—Ä–æ–≤–æ–π —Å—É–¥
2.  –ü–æ–ª—É—á–∏—Ç–µ —Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –æ–± –∞–ª–∏–º–µ–Ω—Ç–∞—Ö
3. üèõÔ∏è –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –≤ –§–°–°–ü –ø–æ –º–µ—Å—Ç—É —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω–∏–∫–∞
4. SEARCH: –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ —Ä–æ–∑—ã—Å–∫–µ –¥–æ–ª–∂–Ω–∏–∫–∞ –∏ –µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞
5. üí≥ –¢—Ä–µ–±—É–π—Ç–µ –∞—Ä–µ—Å—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –∏ –∏–º—É—â–µ—Å—Ç–≤–∞
6.  –ò–Ω–∏—Ü–∏–∏—Ä—É–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–µ–∑–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É
7. SCALES: –ü—Ä–∏ –∑–ª–æ—Å—Ç–Ω–æ–º —É–∫–ª–æ–Ω–µ–Ω–∏–∏ - –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–∏ —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–µ–ª–∞

BOOKS: **–ù–û–†–ú–ê–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê:**
SCROLL: –°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ No. 223-–§–ó:
- –°—Ç–∞—Ç—å—è 80 - –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –¥–µ—Ç–µ–π
- –°—Ç–∞—Ç—å—è 81 - —Ä–∞–∑–º–µ—Ä –∞–ª–∏–º–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö
- –°—Ç–∞—Ç—å—è 115 - –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∞–ª–∏–º–µ–Ω—Ç–æ–≤

üèõÔ∏è –§–ó "–û–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ":
- –°—Ç–∞—Ç—å—è 65 - –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤–∑—ã—Å–∫–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É

WARNING: **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –î–æ–ª–∂–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—è—Ü—ã –∏ –≥–æ–¥—ã
- –ê–ª–∏–º–µ–Ω—Ç—ã –≤–∑—ã—Å–∫–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
- –ü—Ä–∏ –≤—ã–µ–∑–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É —Ä–æ–∑—ã—Å–∫ —É—Å–ª–æ–∂–Ω—è–µ—Ç—Å—è

 **–ü–û–õ–£–ß–ò–¢–ï –ü–û–ú–û–©–¨ –≠–ö–°–ü–ï–†–¢–ê:**
–ù–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –≤—ã–ø–ª–∞—Ç—ã –∞–ª–∏–º–µ–Ω—Ç–æ–≤? –ú—ã –ø–æ–º–æ–∂–µ–º!

üéØ –ù–∞—à–∏ —Å–µ–º–µ–π–Ω—ã–µ —é—Ä–∏—Å—Ç—ã:
‚úÖ –ù–∞–π–¥—É—Ç —Å–∫—Ä—ã—Ç—ã–µ –¥–æ—Ö–æ–¥—ã –∏ –∏–º—É—â–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–∏–∫–∞
‚úÖ –î–æ–±—å—é—Ç—Å—è –∞—Ä–µ—Å—Ç–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–æ–≤
‚úÖ –ò–Ω–∏—Ü–∏–∏—Ä—É—é—Ç —É–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–ª–æ—Å—Ç–Ω—ã—Ö –Ω–µ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤
‚úÖ –í–∑—ã—â—É—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏ –Ω–µ—É—Å—Ç–æ–π–∫–æ–π

CHAT: –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û: /start
 –ó–∞—â–∏—â–∞–µ–º –ø—Ä–∞–≤–∞ –¥–µ—Ç–µ–π –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"""
        ]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–µ–π—Å
        import random
        post_text = random.choice(fallback_cases)
        log.info(
            f"SHIELD: Using emergency fallback case post: {len(post_text)} chars")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[
        InlineKeyboardButton(" –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                             url=f"https://t.me/{context.bot.username}")
    ]]

    await context.bot.send_message(
        CHANNEL_ID,
        post_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ MAIN ================

async def load_db_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ ADMIN_USERS"""
    global ADMIN_USERS
    try:
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin.tg_id).where(Admin.is_active == True)
            )
            db_admin_ids = {row[0] for row in result.fetchall()}

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∏–∑ –ë–î
        old_count = len(ADMIN_USERS)
        ADMIN_USERS = HARDCODED_ADMIN_IDS.union(db_admin_ids)
        log.info(
            f"üîß Admins reloaded: hardcoded={len(HARDCODED_ADMIN_IDS)}, from_db={len(db_admin_ids)}, total={len(ADMIN_USERS)} (was {old_count})")
        print(f"üîß Admin users updated: {len(ADMIN_USERS)} total")

    except Exception as e:
        log.error(f"Failed to load DB admins: {e}")
        # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        ADMIN_USERS = HARDCODED_ADMIN_IDS.copy()


async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    global ai_enhanced_manager

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
    await load_db_admins()

    # üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú Enhanced AI
    try:
        log.info("üöÄ Initializing Enhanced AI system...")
        ai_enhanced_manager = AIEnhancedManager()
        await ai_enhanced_manager.initialize()
        print("‚úÖ Enhanced AI initialized successfully")
        log.info("Enhanced AI system is ready")
    except Exception as e:
        print(f"‚ùå Failed to initialize Enhanced AI: {e}")
        log.error(f"Enhanced AI initialization error: {e}")
        import traceback
        log.error(f"Enhanced AI traceback: {traceback.format_exc()}")
        ai_enhanced_manager = None
        log.info("Will use basic AI as fallback")

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await application.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
        print("‚úÖ Menu button set successfully")
    except Exception as e:
        print(f"‚ùå Failed to set menu button: {e}")
        log.error(f"Menu button error: {e}")

    # üöÄ –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê
    try:
        print("üîß Initializing simple autopost system...")
        from .services.simple_autopost import init_simple_autopost

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(init_simple_autopost(application.bot))
        print("‚úÖ Simple autopost system initialization started!")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        try:
            from telegram.ext import ContextTypes
            context = ContextTypes.DEFAULT_TYPE(application=application)
            context._bot = application.bot
            await notify_all_admins(
                context,
                "üöÄ **–°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê –ó–ê–ü–£–©–ï–ù–ê!**\n\n"
                "‚úÖ Deploy –∞–≤—Ç–æ–ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n"
                "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã: –∫–∞–∂–¥—ã–π —á–∞—Å\n"
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                "/autopost_status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n"
                "/autopost_test - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
                ParseMode.MARKDOWN
            )
        except:
            pass

    except Exception as e:
        print(f"‚ùå Simple autopost initialization failed: {e}")
        log.error(f"Simple autopost error: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            print("üîß Fallback: trying complex SMM system...")
            from .services.smm_integration import initialize_smm_integration
            smm_integration = await initialize_smm_integration(application.bot, ai_enhanced_manager)
            if smm_integration:
                await smm_integration.start_smm_system()
                print("‚úÖ Complex SMM system started as fallback")
        except Exception as smm_error:
            print(f"‚ùå Both autopost systems failed: {smm_error}")


async def fix_database_schema():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
    try:
        log.info("üîß Checking and fixing database schema...")

        async with async_sessionmaker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ user_id
            result = await session.execute(text("""
                SELECT data_type
                FROM information_schema.columns
                WHERE table_name = 'applications' AND column_name = 'user_id'
            """))
            user_id_type = result.scalar_one_or_none()

            if user_id_type != "integer":
                log.info("üîÑ user_id column type needs conversion")

                # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                log.info(" Cleaning up invalid user_id values...")

                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ user_id (–Ω–µ —á–∏—Å–ª–æ–≤—ã–µ)
                invalid_result = await session.execute(text("""
                    SELECT id, user_id
                    FROM applications
                    WHERE user_id !~ '^[0-9]+$'
                """))
                invalid_apps = invalid_result.fetchall()

                for app_id, bad_user_id in invalid_apps:
                    try:
                        log.info(
                            f"üîß Fixing app {app_id} with bad user_id: '{bad_user_id}'")

                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
                        temp_user_result = await session.execute(text("""
                            SELECT id FROM users
                            WHERE first_name = '–ì–æ—Å—Ç—å'
                            LIMIT 1
                        """))
                        temp_user = temp_user_result.scalar_one_or_none()

                        if not temp_user:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            import random
                            temp_tg_id = -random.randint(1000000, 2000000000)

                            await session.execute(text("""
                                INSERT INTO users (tg_id, first_name)
                                VALUES (:tg_id, '–ì–æ—Å—Ç—å')
                                RETURNING id
                            """), {"tg_id": temp_tg_id})

                            temp_user_result = await session.execute(text("""
                                SELECT id FROM users
                                WHERE tg_id = :tg_id
                            """), {"tg_id": temp_tg_id})

                            temp_user = temp_user_result.scalar_one()
                            log.info(
                                f"‚úÖ Created new temp user {temp_user} for app {app_id}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id
                        await session.execute(text("""
                            UPDATE applications
                            SET user_id = :user_id
                            WHERE id = :app_id
                        """), {"user_id": str(temp_user), "app_id": app_id})

                        log.info(
                            f"‚úÖ Fixed app {app_id}: '{bad_user_id}' -> {temp_user}")

                    except Exception as fix_error:
                        log.error(
                            f"‚ùå Failed to fix app {app_id}: {fix_error}")
                        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å—Ç–∞–≤–∏–º 1 (–¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
                        await session.execute(text("""
                            UPDATE applications
                            SET user_id = '1'
                            WHERE id = :app_id
                        """), {"app_id": app_id})

                await session.commit()
                log.info("‚úÖ Invalid user_id values cleaned up")

                # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø
                log.info("üîÑ Converting user_id column type to INTEGER...")
                await session.execute(text("""
                    ALTER TABLE applications
                    ALTER COLUMN user_id TYPE INTEGER USING user_id::INTEGER
                """))

                await session.commit()
                log.info("‚úÖ user_id column type converted to INTEGER")
                print("‚úÖ Database schema fixed: user_id converted to INTEGER")
            else:
                log.info("‚úÖ user_id column has correct type")

            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            log.info("üîß Checking for missing columns...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ notes
            notes_result = await session.execute(text("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'applications' AND column_name = 'notes'
            """))
            has_notes = notes_result.scalar_one_or_none()

            if not has_notes:
                log.info(" Adding missing 'notes' column...")
                await session.execute(text("""
                    ALTER TABLE applications
                    ADD COLUMN notes TEXT
                """))
                await session.commit()
                log.info("‚úÖ Added 'notes' column")
                print("‚úÖ Added missing 'notes' column")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ assigned_admin
            admin_result = await session.execute(text("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'applications' AND column_name = 'assigned_admin'
            """))
            has_assigned_admin = admin_result.scalar_one_or_none()

            if not has_assigned_admin:
                log.info(" Adding missing 'assigned_admin' column...")
                await session.execute(text("""
                    ALTER TABLE applications
                    ADD COLUMN assigned_admin VARCHAR(64)
                """))
                await session.commit()
                log.info("‚úÖ Added 'assigned_admin' column")
                print("‚úÖ Added missing 'assigned_admin' column")

            print("‚úÖ Database schema is up to date")

    except Exception as e:
        log.error(f"‚ùå Database schema fix failed: {e}")
        print(f"WARNING: Database schema fix failed: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await fix_database_schema()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú Enhanced AI
    try:
        log.info("üöÄ Initializing Enhanced AI system...")
        ai_enhanced_manager = AIEnhancedManager()
        await ai_enhanced_manager.initialize()
        print("‚úÖ Enhanced AI initialized successfully")
        log.info("Enhanced AI system is ready")
    except Exception as e:
        print(f"‚ùå Failed to initialize Enhanced AI: {e}")
        log.error(f"Enhanced AI initialization error: {e}")
        import traceback
        log.error(f"Enhanced AI traceback: {traceback.format_exc()}")
        ai_enhanced_manager = None
        log.info("Will use basic AI as fallback")

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await application.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
        print("‚úÖ Menu button set successfully")
    except Exception as e:
        print(f"‚ùå Failed to set menu button: {e}")
        log.error(f"Menu button error: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("admin", cmd_admin))
    application.add_handler(CommandHandler("add_admin", cmd_add_admin))
    application.add_handler(CommandHandler("list_admins", cmd_list_admins))
    application.add_handler(CallbackQueryHandler(universal_callback_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SMM –∞–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_smm_admin_handlers(application)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    try:
        register_quick_fixes_handlers(application)
        print("‚úÖ Quick fixes handlers registered")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not register quick fixes handlers: {e}")

    # üîß –§–ò–ö–°: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    async def handle_file_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∞–º"""
        try:
            user = update.effective_user
            user_id = user.id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            if update.message.document:
                file_obj = update.message.document
                file_type = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
                file_name = file_obj.file_name or "–¥–æ–∫—É–º–µ–Ω—Ç"
                file_size = file_obj.file_size
            elif update.message.photo:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                file_obj = update.message.photo[-1]
                file_type = "üì∑ –§–æ—Ç–æ"
                file_name = "—Ñ–æ—Ç–æ"
                file_size = file_obj.file_size
            else:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_obj.file_id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file_size:
                if file_size < 1024:
                    size_str = f"{file_size} –ë"
                elif file_size < 1024*1024:
                    size_str = f"{file_size/1024:.1f} –ö–ë"
                else:
                    size_str = f"{file_size/(1024*1024):.1f} –ú–ë"
            else:
                size_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admin_message = f"""üìÅ **–ù–û–í–´–ô –§–ê–ô–õ –û–¢ –ö–õ–ò–ï–ù–¢–ê**

üë§ **–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user.full_name}
üì± **ID:** {user_id}
üë§ **Username:** @{user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

{file_type} **–§–∞–π–ª:** {file_name}
üìä **–†–∞–∑–º–µ—Ä:** {size_str}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí¨ **–ü–æ–¥–ø–∏—Å—å:** {update.message.caption or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_USERS:
                try:
                    if update.message.document:
                        await context.bot.send_document(
                            chat_id=admin_id,
                            document=file_obj.file_id,
                            caption=admin_message,
                            parse_mode='Markdown'
                        )
                    elif update.message.photo:
                        await context.bot.send_photo(
                            chat_id=admin_id,
                            photo=file_obj.file_id,
                            caption=admin_message,
                            parse_mode='Markdown'
                        )
                except Exception as e:
                    logger.error(
                        f"Failed to send file to admin {admin_id}: {e}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await update.message.reply_text(
                "‚úÖ **–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!**\n\n"
                f"{file_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º —é—Ä–∏—Å—Ç–∞–º.\n"
                "üì± –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"Error handling file message: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def message_handler_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id

        # ============ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ============
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if 'awaiting_comment' in context.user_data:
            await handle_comment_text(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if context.user_data.get('awaiting_phone_input'):
            await handle_phone_input(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if context.user_data.get('awaiting_consultation_details'):
            await handle_consultation_details(update, context)
            return

        # –û–±—ã—á–Ω–∞—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        await ai_chat(update, context)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, message_handler_router))

    # üìÅ –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–ê–ô–õ–û–í –î–õ–Ø –ê–î–ú–ò–ù–û–í
    application.add_handler(MessageHandler(
        filters.Document.ALL | filters.PHOTO, handle_file_message))

    # üîß –£–î–ê–õ–Ø–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
    # application.add_handler(MessageHandler(
    #     filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
    #     enhanced_message_handler
    # ))

    # ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –°—Ç–∞—Ä—ã–µ –¥–∂–æ–±—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ SMM —Å–∏—Å—Ç–µ–º—É
    # if application.job_queue is not None:
    #     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    #     autopost_hours = int(os.getenv("POST_INTERVAL_HOURS", "2"))

    #     # –î–û–ë–ê–í–õ–Ø–ï–ú: –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    #     application.job_queue.run_once(
    #         autopost_job,
    #         when=timedelta(minutes=5)
    #     )
    #     print("‚úÖ One-time autopost scheduled for 5 minutes after restart")
    #     log.info("One-time autopost job scheduled for 5 minutes after restart")

    #     # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
    #     application.job_queue.run_repeating(
    #         autopost_job,
    #         interval=timedelta(hours=autopost_hours),
    #         first=timedelta(minutes=10)
    #     )
    #     print(
    #         f"‚úÖ Job queue initialized - autopost every {autopost_hours} hours")
    #     log.info(f"Job queue initialized with {autopost_hours}h interval")
    # else:
    #     print("WARNING: Job queue not available - autopost disabled")
    #     log.warning("Job queue not available, autopost functionality disabled")

    print("‚úÖ Autoposting handled by SMM system instead of job queue")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"https://{PUBLIC_HOST}/{TOKEN}"
    await application.bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async with application:
        await application.start()
        log.info(f"Bot started on port {PORT}")

        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–ø—É—Å–∫–∞–µ–º post_init –≤ background –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ Railway
        async def background_init():
            """Background –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced AI –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Railway timeout"""
            try:
                print("üîß Starting background Enhanced AI initialization...")
                await post_init(application)
                print("‚úÖ Background Enhanced AI initialization completed")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                try:
                    from telegram.ext import ContextTypes
                    context = ContextTypes.DEFAULT_TYPE(application=application)
                    context._bot = application.bot
                    await notify_all_admins(
                        context,
                        "üöÄ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω —Å Enhanced AI!\n\n"
                        "–ö–æ–º–∞–Ω–¥—ã:\n"
                        "/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
                    )
                except:
                    pass
            except Exception as e:
                print(
                    f"‚ùå Background Enhanced AI initialization failed: {e}")
                log.error(f"Background Enhanced AI init error: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Enhanced AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ background
        asyncio.create_task(background_init())

        print(
            "üöÄ Railway-optimized startup completed - Enhanced AI initializing in background")

        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º
        await asyncio.Event().wait()


async def show_admin_panel(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    text = "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
         InlineKeyboardButton(" –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to edit message: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)


async def show_statistics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        async with async_sessionmaker() as session:
            # –û–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            total_users = await session.scalar(select(func.count(User.id)))
            total_apps = await session.scalar(select(func.count(AppModel.id)))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫
            status_stats = await session.execute(
                select(AppModel.status, func.count(AppModel.id))
                .group_by(AppModel.status)
            )

            # –ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            today_apps = await session.scalar(
                select(func.count(AppModel.id))
                .where(AppModel.created_at >= today)
            )

            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            today_users = await session.scalar(
                select(func.count(User.id))
                .where(User.created_at >= today)
            )

        text = f"""
üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
- –í—Å–µ–≥–æ: {total_users}
- –°–µ–≥–æ–¥–Ω—è: {today_users}

üìã **–ó–∞—è–≤–∫–∏:**
- –í—Å–µ–≥–æ: {total_apps}
- –°–µ–≥–æ–¥–Ω—è: {today_apps}

üìà **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
"""

        for status, count in status_stats:
            status_emoji = {
                "new": "üÜï",
                "processing": "‚è≥",
                "completed": "‚úÖ",
                "cancelled": "‚ùå"
            }.get(status, "")
            text += f"- {status_emoji} {status}: {count}\n"

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        uptime = datetime.now() - system_metrics["start_time"]
        success_rate = 0
        if system_metrics["total_requests"] > 0:
            success_rate = (
                system_metrics["successful_requests"] / system_metrics["total_requests"]) * 100

        text += f"""

 **–°–∏—Å—Ç–µ–º–∞:**
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds // 3600}—á
- –ó–∞–ø—Ä–æ—Å–æ–≤: {system_metrics["total_requests"]}
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
- AI –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics["ai_requests"]}
"""

        keyboard = [
            [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                  callback_data="setting_detailed_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                  callback_data="admin_stats")],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="back_admin")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Failed to show statistics: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


async def show_payments(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏"""
    try:
        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            payments_result = await session.execute(
                select(Payment, AppModel, User)
                .join(AppModel, Payment.application_id == AppModel.id)
                .join(User, AppModel.user_id == User.id)
                .order_by(Payment.created_at.desc())
                .limit(10)
            )
            payments = payments_result.all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            total_amount = await session.scalar(
                select(func.sum(Payment.amount))
                .where(Payment.status == 'completed')
            ) or 0

            pending_amount = await session.scalar(
                select(func.sum(Payment.amount))
                .where(Payment.status == 'pending')
            ) or 0

        text = f"""
üí≥ **–ü–õ–ê–¢–ï–ñ–ò**

üíµ **–§–∏–Ω–∞–Ω—Å—ã:**
- –ü–æ–ª—É—á–µ–Ω–æ: {total_amount}  rubles
- –û–∂–∏–¥–∞–µ—Ç: {pending_amount}  rubles
- –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ:**
"""

        keyboard = []

        for payment, app, user in payments:
            status_emoji = {
                'pending': '‚è≥',
                'completed': '‚úÖ',
                'failed': '‚ùå',
                'cancelled': ''
            }.get(payment.status, '')

            text += f"{status_emoji} {payment.amount}  rubles | {user.first_name}\n"
            text += f"üìÖ {payment.created_at.strftime('%d.%m %H:%M')}\n"

        if not payments:
            text += "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π\n"

        keyboard.append([InlineKeyboardButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_payments")])
        keyboard.append([InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_admin")])

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Failed to show payments: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


async def show_clients(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—è–≤–æ–∫
            users_result = await session.execute(
                select(User, func.count(AppModel.id).label('app_count'))
                .outerjoin(AppModel, User.id == AppModel.user_id)
                .group_by(User.id)
                .order_by(func.count(AppModel.id).desc(), User.created_at.desc())
                .limit(15)
            )
            users = users_result.all()

        text = "üë• **–ö–õ–ò–ï–ù–¢–´**\n\n"
        keyboard = []

        for user, app_count in users:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
            if app_count >= 3:
                client_type = "STAR: VIP"
            elif app_count >= 1:
                client_type = "üìù –ê–∫—Ç–∏–≤–Ω—ã–π"
            else:
                client_type = " –ù–æ–≤—ã–π"

            text += f"{client_type} {user.first_name} {user.last_name or ''}\n"
            text += f"PHONE: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'} | –ó–∞—è–≤–æ–∫: {app_count}\n"
            text += f"üìÖ {user.created_at.strftime('%d.%m.%Y') if hasattr(user, 'created_at') else '–Ω/–¥'}\n\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"üë§ {user.first_name} ({app_count})",
                    callback_data=f"client_view_{user.id}"
                )
            ])

        if not users:
            text += "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"

        keyboard.append([InlineKeyboardButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")])
        keyboard.append([InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_admin")])

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Failed to show clients: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


async def show_broadcast_options(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = """
 **–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê**

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:

üë• **–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã** - –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
üìù **–ê–∫—Ç–∏–≤–Ω—ã–µ** - —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏
 **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ** - –±–µ–∑ –∑–∞—è–≤–æ–∫
STAR: **VIP** - —Å 3+ –∑–∞—è–≤–∫–∞–º–∏

WARNING: **–í–Ω–∏–º–∞–Ω–∏–µ:**
- –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
- –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–ª—å–∑—è
- –°–æ–±–ª—é–¥–∞–π—Ç–µ –∞–Ω—Ç–∏—Å–ø–∞–º –ø—Ä–∞–≤–∏–ª–∞
"""

    keyboard = [
        [InlineKeyboardButton(
            "üë• –í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_all")],
        [InlineKeyboardButton("üìù –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏",
                              callback_data="broadcast_active")],
        [InlineKeyboardButton(
            " –ë–µ–∑ –∑–∞—è–≤–æ–∫", callback_data="broadcast_inactive")],
        [InlineKeyboardButton(
            "STAR: VIP –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_vip")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to show broadcast options: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)


async def show_admin_settings(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = f"""
 **–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´**

üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:**
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_USERS)}
- –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(HARDCODED_ADMIN_IDS)}

üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - system_metrics['start_time']}
- –ó–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['total_requests']}
- –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(blocked_users)}

ü§ñ **AI –°–∏—Å—Ç–µ–º–∞:**
- Enhanced AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if ai_enhanced_manager and ai_enhanced_manager._initialized else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
- –†–µ–∂–∏–º: {'Production' if PRODUCTION_MODE else 'Development'}

LINK: **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
- OpenRouter: {'‚úÖ' if OPENROUTER_API_KEY else '‚ùå'}
- –ö–∞–Ω–∞–ª: {'‚úÖ' if CHANNEL_ID else '‚ùå'}
"""

    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏",
                              callback_data="setting_admins")],
        [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                              callback_data="setting_export")],
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                              callback_data="setting_detailed_stats")],
        [InlineKeyboardButton(
            "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="setting_reload")],
        [InlineKeyboardButton(
            " –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="setting_clear_logs")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to show admin settings: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)


def detect_category(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    if not text:
        return "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

    text_lower = text.lower()

    # –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ
    family_keywords = ['—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã', '–±—Ä–∞–∫', '–¥–µ—Ç–∏',
                       '—Å—É–ø—Ä—É–≥', '–∂–µ–Ω–∞', '–º—É–∂', '—Å–µ–º—å—è', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ', '–æ–ø–µ–∫–∞']
    if any(keyword in text_lower for keyword in family_keywords):
        return "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ"

    # –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ
    labor_keywords = ['—Ä–∞–±–æ—Ç–∞', '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ', '–∑–∞—Ä–ø–ª–∞—Ç–∞',
                      '–æ—Ç–ø—É—Å–∫', '—Ç—Ä—É–¥–æ–≤–æ–π', '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ø—Ä–µ–º–∏—è']
    if any(keyword in text_lower for keyword in labor_keywords):
        return "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ"

    # –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ
    housing_keywords = ['–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '–∂–∏–ª—å–µ', '–∞—Ä–µ–Ω–¥–∞',
                        '–∏–ø–æ—Ç–µ–∫–∞', '—Å–æ—Å–µ–¥–∏', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', '—É–ø—Ä–∞–≤–ª—è—é—â–∞—è']
    if any(keyword in text_lower for keyword in housing_keywords):
        return "–ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ"

    # –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
    bankruptcy_keywords = ['–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ', '–¥–æ–ª–≥–∏',
                           '–∫—Ä–µ–¥–∏—Ç', '–±–∞–Ω–∫', '–∫–æ–ª–ª–µ–∫—Ç–æ—Ä', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ', '–¥–æ–ª–∂–Ω–∏–∫']
    if any(keyword in text_lower for keyword in bankruptcy_keywords):
        return "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"

    # –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
    consumer_keywords = ['—Ç–æ–≤–∞—Ä', '—É—Å–ª—É–≥–∞', '–º–∞–≥–∞–∑–∏–Ω',
                         '–≤–æ–∑–≤—Ä–∞—Ç', '–∫–∞—á–µ—Å—Ç–≤–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å']
    if any(keyword in text_lower for keyword in consumer_keywords):
        return "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
    admin_keywords = ['—à—Ç—Ä–∞—Ñ', '–ø–æ–ª–∏—Ü–∏—è', '–≥–∏–±–¥–¥',
                      '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π', '–ø—Ä–æ—Ç–æ–∫–æ–ª']
    if any(keyword in text_lower for keyword in admin_keywords):
        return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ"

    # –ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ
    inheritance_keywords = ['–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '–∑–∞–≤–µ—â–∞–Ω–∏–µ',
                            '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫', '—É–º–µ—Ä', '—Å–º–µ—Ä—Ç—å', '–Ω–æ—Ç–∞—Ä–∏—É—Å']
    if any(keyword in text_lower for keyword in inheritance_keywords):
        return "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"

    return "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"


async def show_admin_management_panel(query, context):
    """üë• –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        async with async_sessionmaker() as session:
            result = await session.execute(
                select(Admin).where(Admin.is_active == True)
                .order_by(Admin.created_at.desc())
            )
            admins = result.scalars().all()

        text = "üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò**\n\n"

        if HARDCODED_ADMIN_IDS:
            text += "üîß **–°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n"
            for admin_id in sorted(HARDCODED_ADMIN_IDS):
                text += f"- `{admin_id}` (—Å–∏—Å—Ç–µ–º–Ω—ã–π)\n"
            text += "\n"

        if admins:
            text += " **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î:**\n"
            for admin in admins:
                status_icon = "‚úÖ" if admin.is_active else "‚ùå"
                text += f"{status_icon} `{admin.tg_id}` ({admin.role})\n"
        else:
            text += " **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ë–î:** –Ω–µ—Ç\n"

        text += f"\nüìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:** {len(ADMIN_USERS)}\n\n"

        keyboard = [
            [
                InlineKeyboardButton(" –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                                     callback_data="admin_add_new"),
                InlineKeyboardButton(
                    "üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="admin_list_all")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ –ë–î",
                                     callback_data="admin_reload_db"),
                InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π",
                                     callback_data="admin_role_settings")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                  callback_data="back_admin")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Failed to show admin management panel: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏", show_alert=True)


async def show_detailed_analytics_panel(query, context):
    """üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        async with async_sessionmaker() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await session.scalar(select(func.count(User.id)))
            users_today = await session.scalar(
                select(func.count(User.id))
                .where(User.created_at >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            total_apps = await session.scalar(select(func.count(AppModel.id)))
            apps_today = await session.scalar(
                select(func.count(AppModel.id))
                .where(AppModel.created_at >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            pending_apps = await session.scalar(
                select(func.count(AppModel.id))
                .where(AppModel.status == 'pending')
            )

            completed_apps = await session.scalar(
                select(func.count(AppModel.id))
                .where(AppModel.status == 'completed')
            )

        uptime = datetime.now() - system_metrics['start_time']
        success_rate = (system_metrics['successful_requests'] /
                        max(system_metrics['total_requests'], 1)) * 100

        text = f"""üìà **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**

üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**
- –í—Å–µ–≥–æ: {total_users}
- –°–µ–≥–æ–¥–Ω—è: {users_today}
- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(blocked_users)}

üìã **–ó–ê–Ø–í–ö–ò:**
- –í—Å–µ–≥–æ: {total_apps}
- –°–µ–≥–æ–¥–Ω—è: {apps_today}
- –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {pending_apps}
- –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {completed_apps}

ü§ñ **–°–ò–°–¢–ï–ú–ê:**
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}
- –ó–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['total_requests']}
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
- AI –∑–∞–ø—Ä–æ—Å–æ–≤: {system_metrics['ai_requests']}

üîß **–ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï:**
- –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_USERS)}
- Enhanced AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if ai_enhanced_manager and ai_enhanced_manager._initialized else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
- –†–µ–∂–∏–º: {'Production' if PRODUCTION_MODE else 'Development'}"""

        keyboard = [
            [
                InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                                     callback_data="export_analytics"),
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_detailed_analytics")
            ],
            [
                InlineKeyboardButton(
                    "üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts"),
                InlineKeyboardButton(
                    " –û—Ç—á–µ—Ç—ã", callback_data="analytics_reports")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                  callback_data="back_admin")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        log.error(f"Failed to show detailed analytics: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)


async def refresh_admin_panel(query, context):
    """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
        await load_db_admins()

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        system_metrics['total_requests'] = system_metrics.get(
            'total_requests', 0)

        await query.answer("‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await cmd_admin_callback(query, context)

    except Exception as e:
        log.error(f"Failed to refresh admin panel: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


async def show_export_options(query, context):
    """üìä –û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    text = """üìä **–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:

üìã **–ó–∞—è–≤–∫–∏** - –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üí≥ **–ü–ª–∞—Ç–µ–∂–∏** - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

 **–§–æ—Ä–º–∞—Ç—ã:**
- CSV –¥–ª—è —Ç–∞–±–ª–∏—Ü
- JSON –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- PDF –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""

    keyboard = [
        [
            InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫",
                                 callback_data="export_applications"),
            InlineKeyboardButton("üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                 callback_data="export_users")
        ],
        [
            InlineKeyboardButton("üí≥ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π",
                                 callback_data="export_payments"),
            InlineKeyboardButton("üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
                                 callback_data="export_analytics")
        ],
        [
            InlineKeyboardButton("PACKAGE: –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
                                 callback_data="export_full"),
            InlineKeyboardButton(" –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="export_period")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                              callback_data="back_admin")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to show export options: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)


async def show_smm_main_panel(query, context):
    """üöÄ –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å SMM —Å–∏—Å—Ç–µ–º—ã"""
    text = """üöÄ **PROFESSIONAL SMM –°–ò–°–¢–ï–ú–ê**

üéØ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
- SMM Engine: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
- Content Generator: ‚úÖ –ì–æ—Ç–æ–≤
- Auto-posting: ‚úÖ –í–∫–ª—é—á–µ–Ω
- Analytics: ‚úÖ –°–æ–±–∏—Ä–∞–µ—Ç—Å—è

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 0
- –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 0
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 0%

üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="smm_create_post"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                 callback_data="smm_analytics")
        ],
        [
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMM",
                                 callback_data="smm_settings"),
            InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥",
                                 callback_data="smm_autopost")
        ],
        [
            InlineKeyboardButton("üìà –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                                 callback_data="smm_strategy"),
            InlineKeyboardButton("üéØ –¢–∞—Ä–≥–µ—Ç–∏–Ω–≥",
                                 callback_data="smm_targeting")
        ],
        [
            InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤",
                                 callback_data="smm_queue"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                 callback_data="smm_main_panel")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                              callback_data="back_admin")]
    ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to show SMM panel: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SMM –ø–∞–Ω–µ–ª–∏", show_alert=True)


async def cmd_admin_callback(query, context):
    """Callback –≤–µ—Ä—Å–∏—è cmd_admin –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏"""
    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.answer(" –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        async with async_sessionmaker() as session:
            total_users = await session.scalar(select(func.count(User.id)))
            total_apps = await session.scalar(select(func.count(AppModel.id)))
            new_apps_today = await session.scalar(
                select(func.count(AppModel.id))
                .where(AppModel.created_at >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))
            )
    except:
        total_users = total_apps = new_apps_today = 0

    admin_text = f"""üèõÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–† - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
- –ó–∞—è–≤–æ–∫: {total_apps}
- –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_apps_today}
- –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_USERS)}

üéõÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**"""

    keyboard = [
        [
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏",
                                 callback_data="admin_apps"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(
                "üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
            InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(
                "ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
            InlineKeyboardButton(" –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(
                "üöÄ SMM –°–∏—Å—Ç–µ–º–∞", callback_data="smm_main_panel"),
            InlineKeyboardButton(
                " –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏",
                                 callback_data="admin_manage_admins"),
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                 callback_data="admin_detailed_analytics")
        ],
        [
            InlineKeyboardButton(
                "üìÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="admin_autopost"),
            InlineKeyboardButton("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
                                 callback_data="admin_view_scheduled")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å",
                                 callback_data="admin_refresh"),
            InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                                 callback_data="admin_export")
        ]
    ]

    try:
        await query.edit_message_text(
            admin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to update admin panel: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏", show_alert=True)


async def handle_admin_management_actions(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    data = query.data

    if data == "admin_add_new":
        text = """ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê**

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:

`/add_admin <ID> [—Ä–æ–ª—å]`

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:**
- `operator` - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
- `lawyer` - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏
- `superadmin` - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø

**–ü—Ä–∏–º–µ—Ä—ã:**
- `/add_admin 123456789 lawyer`
- `/add_admin 987654321 operator`

**–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start
2. ID –±—É–¥–µ—Ç –≤ –ª–æ–≥–∞—Ö –∏–ª–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]]

    elif data == "admin_list_all":
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏
        try:
            async with async_sessionmaker() as session:
                result = await session.execute(
                    select(Admin).order_by(Admin.created_at.desc())
                )
                admins = result.scalars().all()

            text = "üìã **–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í**\n\n"

            if HARDCODED_ADMIN_IDS:
                text += "üîß **–°–∏—Å—Ç–µ–º–Ω—ã–µ (—Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):**\n"
                for admin_id in sorted(HARDCODED_ADMIN_IDS):
                    text += f"- `{admin_id}` - —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω\n"
                text += "\n"

            if admins:
                text += " **–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n"
                for admin in admins:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if admin.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    date = admin.created_at.strftime('%d.%m.%Y')
                    text += f"- `{admin.tg_id}` - {admin.role}\n  {status}, –¥–æ–±–∞–≤–ª–µ–Ω {date}\n\n"
            else:
                text += " **–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** –ø—É—Å—Ç–æ\n"

            text += f"üìä **–ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:** {len(ADMIN_USERS)}"

        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞: {e}"

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]]

    elif data == "admin_reload_db":
        try:
            old_count = len(ADMIN_USERS)
            await load_db_admins()
            new_count = len(ADMIN_USERS)

            await query.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –±—ã–ª–æ {old_count}, —Å—Ç–∞–ª–æ {new_count}", show_alert=True)
            await show_admin_management_panel(query, context)
            return

        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", show_alert=True)
            return

    elif data == "admin_role_settings":
        text = """ **–ù–ê–°–¢–†–û–ô–ö–ò –†–û–õ–ï–ô –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í**

üîß **–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞:**

**üìã Operator (–û–ø–µ—Ä–∞—Ç–æ—Ä):**
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤

**SCALES: Lawyer (–Æ—Ä–∏—Å—Ç):**
- –í—Å–µ –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ +
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ –Ω–∞ –¥–µ–ª–æ
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
- –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º

** Superadmin (–°—É–ø–µ—Ä–∞–¥–º–∏–Ω):**
- –í—Å–µ –ø—Ä–∞–≤–∞ —é—Ä–∏—Å—Ç–∞ +
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
- –†–∞—Å—Å—ã–ª–∫–∏

**üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**
- –ò–º–µ—é—Ç –≤—Å–µ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
- –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å
- –ó–∞–¥–∞—é—Ç—Å—è –≤ –∫–æ–¥–µ"""

        keyboard = [
            [InlineKeyboardButton(
                "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_change_role")],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]
        ]

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to handle admin management action: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)


async def handle_export_analytics_actions(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    data = query.data

    if data == "export_applications":
        await query.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω...", show_alert=True)
        await export_applications_data(query, context)

    elif data == "export_users":
        await query.answer("üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω...", show_alert=True)
        await export_users_data(query, context)

    elif data == "export_payments":
        await query.answer("üí≥ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω...", show_alert=True)
        await export_payments_data(query, context)

    elif data == "export_analytics":
        await query.answer("üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω...", show_alert=True)
        await export_analytics_data(query, context)

    elif data == "export_full":
        await query.answer("PACKAGE: –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω...", show_alert=True)
        await export_full_data(query, context)

    # ============ –ù–û–í–´–ï CSV –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
    elif data == "export_apps_csv":
        await query.answer(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –∑–∞—è–≤–æ–∫...", show_alert=True)
        await export_applications_csv(query, context)

    elif data == "export_users_csv":
        await query.answer(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", show_alert=True)
        await export_users_csv(query, context)

    elif data == "export_payments_csv":
        await query.answer(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –ø–ª–∞—Ç–µ–∂–µ–π...", show_alert=True)
        await export_payments_csv(query, context)

    elif data == "export_analytics_csv":
        await query.answer(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...", show_alert=True)
        await export_analytics_csv(query, context)

    elif data == "export_period":
        await query.answer("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞...", show_alert=False)
        await export_period_selection(query, context)

    elif data == "analytics_charts":
        text = """üìà **–ì–†–ê–§–ò–ö–ò –ò –î–ò–ê–ì–†–ê–ú–ú–´**

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:**

- üìà –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –¥–Ω—è–º
- üë• –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- üíµ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
-  –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- PHONE: –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞

üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
üìÖ **–ü–µ—Ä–∏–æ–¥:** –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

_–ì—Ä–∞—Ñ–∏–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã._"""

        keyboard = [
            [InlineKeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏",
                                  callback_data="show_charts")],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥", callback_data="admin_detailed_analytics")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    elif data == "analytics_reports":
        text = """ **–û–¢–ß–ï–¢–´ –°–ò–°–¢–ï–ú–´**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:**

- üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º
- üë• –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- üíµ –ú–µ—Å—è—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
- ü§ñ –û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ AI —Å–∏—Å—Ç–µ–º—ã
-  –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

EMAIL: **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:**
- –ù–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
- –í –∞–¥–º–∏–Ω —á–∞—Ç Telegram
- PDF —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏"""

        keyboard = [
            [InlineKeyboardButton(" –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç",
                                  callback_data="generate_report")],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥", callback_data="admin_detailed_analytics")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


async def handle_smm_actions(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π SMM —Å–∏—Å—Ç–µ–º—ã"""
    data = query.data

    if data == "smm_create_post":
        text = """üìù **–°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê**

üéØ **–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**

-  –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞
-  –ö–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
- üìä –û–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
- GRADUATION: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- IDEA: –°–æ–≤–µ—Ç—ã —é—Ä–∏—Å—Ç–æ–≤

ü§ñ **AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Ç–µ–º—ã
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="smm_ai_generate"),
                InlineKeyboardButton(" –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é",
                                     callback_data="smm_manual_create")
            ],
            [
                InlineKeyboardButton(
                    " –ü–æ—Å—Ç-–Ω–æ–≤–æ—Å—Ç—å", callback_data="smm_news_post"),
                InlineKeyboardButton(
                    " –ü–æ—Å—Ç-–∫–µ–π—Å", callback_data="smm_case_post")
            ],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
        ]

    elif data == "smm_analytics":
        text = """üìä **SMM –ê–ù–ê–õ–ò–¢–ò–ö–ê**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:**
- –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 0
- –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: 0
- –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: 0
- –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 0%

üë• **–ê—É–¥–∏—Ç–æ—Ä–∏—è:**
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 0
- –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: 0
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0

üéØ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
- CTR: 0%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏: 0%
- ROI: 0%"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="smm_detailed_analytics"),
                InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                                     callback_data="smm_export_analytics")
            ],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
        ]

    elif data == "smm_settings":
        text = """ **–ù–ê–°–¢–†–û–ô–ö–ò SMM –°–ò–°–¢–ï–ú–´**

ü§ñ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:**
- –°—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: 2 —á–∞—Å–∞
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 45 –º–∏–Ω

üéØ **–ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è:**
- –†–µ–∂–∏–º: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
- –¢–æ–Ω: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –§–∏–∑–ª–∏—Ü–∞ + –ë–∏–∑–Ω–µ—Å

PHONE: **–ö–∞–Ω–∞–ª—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**
- Telegram –∫–∞–Ω–∞–ª: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω
- Instagram: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- VK: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞", callback_data="smm_autopost_settings"),
                InlineKeyboardButton("üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                                     callback_data="smm_content_strategy")
            ],
            [
                InlineKeyboardButton("PHONE: –ö–∞–Ω–∞–ª—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                                     callback_data="smm_channels"),
                InlineKeyboardButton(
                    "ART: –î–∏–∑–∞–π–Ω –ø–æ—Å—Ç–æ–≤", callback_data="smm_design")
            ],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
        ]

    elif data == "smm_autopost":
        text = """ü§ñ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–û–ú**

 **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
- –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: 0 –ø–æ—Å—Ç–æ–≤

üéõÔ∏è **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"""

        keyboard = [
            [
                InlineKeyboardButton("üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥",
                                     callback_data="smm_enhanced_autopost"),
            ],
            [
                InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                     callback_data="smm_pause_autopost"),
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
                                     callback_data="smm_force_post")
            ],
            [
                InlineKeyboardButton(
                    " –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="smm_interval_settings"),
                InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤",
                                     callback_data="smm_post_queue")
            ],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
        ]

    # ============ –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• SMM –§–£–ù–ö–¶–ò–ô ============

    elif data == "smm_ai_generate":
        await handle_smm_ai_generate(query, context)
        return

    elif data == "smm_manual_create":
        await handle_smm_manual_create(query, context)
        return

    elif data == "smm_news_post":
        await handle_smm_news_post(query, context)
        return

    elif data == "smm_case_post":
        await handle_smm_case_post(query, context)
        return

    elif data == "smm_detailed_analytics":
        await handle_smm_detailed_analytics(query, context)
        return

    elif data == "smm_export_analytics":
        await handle_smm_export_analytics(query, context)
        return

    elif data == "smm_autopost_settings":
        await handle_smm_autopost_settings(query, context)
        return

    elif data == "smm_content_strategy":
        await handle_smm_content_strategy(query, context)
        return

    elif data == "smm_channels":
        await handle_smm_channels(query, context)
        return

    elif data == "smm_design":
        await handle_smm_design(query, context)
        return

    elif data == "smm_pause_autopost":
        await handle_smm_pause_autopost(query, context)
        return

    elif data == "smm_force_post":
        await handle_smm_force_post(query, context)
        return

    elif data == "smm_interval_settings":
        await handle_smm_interval_settings(query, context)
        return

    elif data == "smm_post_queue":
        await handle_smm_post_queue(query, context)
        return

    elif data == "smm_strategy":
        await handle_smm_strategy(query, context)
        return

    elif data == "smm_targeting":
        await handle_smm_targeting(query, context)
        return

    elif data == "smm_queue":
        await handle_smm_queue(query, context)
        return

    # ============ SMM –ò–ù–¢–ï–†–í–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ============
    elif data.startswith("smm_interval_"):
        await handle_smm_interval_change(query, context)
        return

    # ============ SMM –û–ß–ï–†–ï–î–¨ –£–ü–†–ê–í–õ–ï–ù–ò–ï ============
    elif data == "smm_add_to_queue":
        await handle_smm_add_to_queue(query, context)
        return

    elif data == "smm_edit_queue":
        await handle_smm_edit_queue(query, context)
        return

    elif data == "smm_clear_queue":
        await handle_smm_clear_queue(query, context)
        return

    elif data == "smm_pause_queue":
        await handle_smm_pause_queue(query, context)
        return

    elif data == "smm_force_next_post":
        await handle_smm_force_next_post(query, context)
        return

    elif data == "smm_queue_stats":
        await handle_smm_queue_stats(query, context)
        return

    # ============ SMM –¢–ê–†–ì–ï–¢–ò–ù–ì –ò –ê–£–î–ò–¢–û–†–ò–Ø ============
    elif data == "smm_change_audience":
        await handle_smm_change_audience(query, context)
        return

    elif data == "smm_geo_settings":
        await handle_smm_geo_settings(query, context)
        return

    elif data == "smm_interests_settings":
        await handle_smm_interests_settings(query, context)
        return

    elif data == "smm_activity_time":
        await handle_smm_activity_time(query, context)
        return

    elif data == "smm_platform_targeting":
        await handle_smm_platform_targeting(query, context)
        return

    elif data == "smm_ab_targeting":
        await handle_smm_ab_targeting(query, context)
        return

    elif data == "smm_audience_analytics":
        await handle_smm_audience_analytics(query, context)
        return

    elif data == "smm_targeting_tips":
        await handle_smm_targeting_tips(query, context)
        return

    # ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï SMM –§–£–ù–ö–¶–ò–ò ============
    elif data == "smm_change_strategy":
        await handle_smm_change_strategy(query, context)
        return

    elif data == "smm_tone_settings":
        await handle_smm_tone_settings(query, context)
        return

    elif data == "smm_audience_settings":
        await handle_smm_audience_settings(query, context)
        return

    elif data == "smm_strategy_analytics":
        await handle_smm_strategy_analytics(query, context)
        return

    # ============ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï AUTOPOST CALLBACK'–´ ============
    elif data == "smm_change_interval":
        await handle_smm_change_interval(query, context)
        return

    elif data == "smm_style_settings":
        await handle_smm_style_settings(query, context)
        return

    elif data == "smm_schedule_settings":
        await handle_smm_schedule_settings(query, context)
        return

    elif data == "smm_content_types":
        await handle_smm_content_types(query, context)
        return

    elif data == "smm_restart_autopost":
        await handle_smm_restart_autopost(query, context)
        return

    # ============ –£–†–û–í–ï–ù–¨ 2 - –î–ï–¢–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ============

    # === –ê–£–î–ò–¢–û–†–ò–Ø ===
    elif data == "smm_audience_individuals":
        await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ñ–∏–∑–ª–∏—Ü", show_alert=False)
        text = """ **–§–ò–ó–ò–ß–ï–°–ö–ò–ï –õ–ò–¶–ê**

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:** 60% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –í–æ–∑—Ä–∞—Å—Ç: 25-55 –ª–µ—Ç
- –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: —Å–º–µ—à–∞–Ω–Ω–æ–µ
- –î–æ—Ö–æ–¥—ã: —Å—Ä–µ–¥–Ω–∏–µ –∏ –≤—ã—à–µ
- –ü—Ä–æ–±–ª–µ–º—ã: —Å–µ–º–µ–π–Ω—ã–µ, —Ç—Ä—É–¥–æ–≤—ã–µ, –∂–∏–ª–∏—â–Ω—ã–µ"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_change_audience")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_audience_business":
        await query.answer("OFFICE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞", show_alert=False)
        text = """OFFICE: **–ë–ò–ó–ù–ï–° –°–ï–ì–ú–ï–ù–¢**

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:** 30% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –†–∞–∑–º–µ—Ä: –º–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å
- –°—Ñ–µ—Ä—ã: —É—Å–ª—É–≥–∏, —Ç–æ—Ä–≥–æ–≤–ª—è, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
- –ü—Ä–æ–±–ª–µ–º—ã: –Ω–∞–ª–æ–≥–∏, —Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ, –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_change_audience")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === –ì–ï–û–ì–†–ê–§–ò–Ø ===
    elif data == "smm_geo_moscow":
        await query.answer("üèõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–æ—Å–∫–≤—ã", show_alert=False)
        text = """üèõÔ∏è **–ú–û–°–ö–í–ê –ò –ú–û–°–ö–û–í–°–ö–ê–Ø –û–ë–õ–ê–°–¢–¨**

LOCATION: **–ü–æ–∫—Ä—ã—Ç–∏–µ:** 40% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 8.5% engagement
üíµ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** 2.8% –≤ –∑–∞—è–≤–∫–∏
CLOCK: **–ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è:** 19:00-21:00"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_geo_settings")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_geo_spb":
        await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –°–ü–±", show_alert=False)
        text = """ **–°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì**

LOCATION: **–ü–æ–∫—Ä—ã—Ç–∏–µ:** 15% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 7.2% engagement
üíµ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** 2.1% –≤ –∑–∞—è–≤–∫–∏
CLOCK: **–ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è:** 18:30-20:30"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_geo_settings")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === –ò–ù–¢–ï–†–ï–°–´ ===
    elif data == "smm_interests_basic":
        await query.answer("SCALES: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞", show_alert=False)
        text = """SCALES: **–û–°–ù–û–í–ù–´–ï –ü–†–ê–í–ê**

üéØ **–û—Ö–≤–∞—Ç:** 85% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
- –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
- –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_interests_settings")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_interests_family":
        await query.answer(" –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ", show_alert=False)
        text = """ **–°–ï–ú–ï–ô–ù–û–ï –ü–†–ê–í–û**

üéØ **–û—Ö–≤–∞—Ç:** 68% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
- –†–∞–∑–≤–æ–¥ –∏ —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞
- –ê–ª–∏–º–µ–Ω—Ç—ã
- –û–ø–µ–∫–∞ –∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_interests_settings")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === –í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
    elif data == "smm_time_peak":
        await query.answer("FIRE: –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã", show_alert=False)
        text = """FIRE: **–ü–ò–ö–û–í–´–ï –ß–ê–°–´: 18:00-21:00**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 100%
IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –ø–æ—Å—Ç—ã
üéØ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** +15% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_time_work":
        await query.answer("üìà –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", show_alert=False)
        text = """üìà **–†–ê–ë–û–ß–ï–ï –í–†–ï–ú–Ø: 12:00-14:00**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 85%
IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–µ–ª–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –í –æ—Å–Ω–æ–≤–Ω–æ–º –±–∏–∑–Ω–µ—Å"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === –ü–õ–ê–¢–§–û–†–ú–´ ===
    elif data == "smm_setup_telegram":
        await query.answer("PHONE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram", show_alert=False)
        text = """PHONE: **TELEGRAM –ù–ê–°–¢–†–û–ô–ö–ò**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –û—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
üìä **–û—Ö–≤–∞—Ç:** 100% —Ç—Ä–∞—Ñ–∏–∫–∞
üéØ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_platform_targeting")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_setup_instagram":
        await query.answer("CAMERA: Instagram", show_alert=False)
        text = """CAMERA: **INSTAGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø**

‚ùå **–°—Ç–∞—Ç—É—Å:** –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
IDEA: **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –ú–æ–ª–æ–¥–∞—è, –∞–∫—Ç–∏–≤–Ω–∞—è"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_platform_targeting")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===
    elif data == "smm_new_ab_test":
        await query.answer(" –ù–æ–≤—ã–π A/B —Ç–µ—Å—Ç", show_alert=False)
        text = """ **–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û A/B –¢–ï–°–¢–ê**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –¢–∏–ø—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –í–∞—Ä–∏–∞—Ü–∏–∏ CTA"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_ab_targeting")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_current_ab_tests":
        await query.answer("üìä –¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã", show_alert=False)
        text = """üìä **–ê–ö–¢–ò–í–ù–´–ï A/B –¢–ï–°–¢–´**

‚úÖ **–¢–µ—Å—Ç #1:** –í—Ä–µ–º—è (19:00 vs 20:00)
- –ü—Ä–æ–≥—Ä–µ—Å—Å: 5/14 –¥–Ω–µ–π
- –õ–∏–¥–µ—Ä: 19:00 (+12%)"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_ab_targeting")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === –°–¢–†–ê–¢–ï–ì–ò–ò ===
    elif data == "smm_strategy_viral":
        await query.answer("FIRE: –í–∏—Ä—É—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", show_alert=False)
        text = """FIRE: **–í–ò–†–£–°–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–¶–µ–ª—å:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç
üìà **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- +45% –æ—Ö–≤–∞—Ç
- -15% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_strategy_conversion":
        await query.answer("üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è", show_alert=False)
        text = """üíµ **–ö–û–ù–í–ï–†–°–ò–û–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–¶–µ–ª—å:** –ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫
üìà **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- +35% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- -20% –æ—Ö–≤–∞—Ç
- –ë–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    # === –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨ ===
    elif data == "smm_tone_professional":
        await query.answer("SCALES: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è", show_alert=False)
        text = """SCALES: **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨**

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** 70%
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 8.2% engagement
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –ë–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_tone_settings")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_tone_friendly":
        await query.answer(" –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è", show_alert=False)
        text = """ **–î–†–£–ñ–ï–õ–Æ–ë–ù–ê–Ø –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨**

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** 20%
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 9.1% engagement
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞"""

        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_tone_settings")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        return

    elif data == "smm_edit_post":
        await handle_smm_edit_post(query, context)
        return

    elif data == "smm_queue_post":
        await handle_smm_queue_post(query, context)
        return

    elif data == "smm_show_charts":
        await handle_smm_show_charts(query, context)
        return

    elif data == "smm_optimization":
        await handle_smm_optimization(query, context)
        return

    # ============ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï MISSING CALLBACK'–´ ============
    elif data == "smm_publish_now":
        await handle_smm_publish_now(query, context)
        return

    elif data == "smm_setup_vk":
        await handle_smm_setup_vk(query, context)
        return

    elif data == "smm_setup_blog":
        await handle_smm_setup_blog(query, context)
        return

    elif data == "smm_setup_linkedin":
        await handle_smm_setup_linkedin(query, context)
        return

    elif data == "smm_crossposting":
        await handle_smm_crossposting(query, context)
        return

    elif data == "smm_export_data":
        await handle_smm_export_data(query, context)
        return

    elif data == "smm_schedule":
        await handle_smm_schedule(query, context)
        return

    elif data == "smm_change_frequency":
        await handle_smm_change_frequency(query, context)
        return

    elif data == "smm_toggle_features":
        await handle_smm_toggle_features(query, context)
        return

    elif data == "smm_set_targets":
        await handle_smm_set_targets(query, context)
        return

    elif data == "smm_reset_config":
        await handle_smm_reset_config(query, context)
        return

    elif data == "smm_optimization_details":
        await handle_smm_optimization_details(query, context)
        return

    elif data == "smm_add_images":
        await handle_smm_add_images(query, context)
        return

    elif data == "smm_edit_templates":
        await handle_smm_edit_templates(query, context)
        return

    elif data == "smm_style_editor":
        await handle_smm_style_editor(query, context)
        return

    elif data == "smm_button_settings":
        await handle_smm_button_settings(query, context)
        return

    elif data == "smm_preview_post":
        await handle_smm_preview_post(query, context)
        return

    elif data == "smm_save_template":
        await handle_smm_save_template(query, context)
        return

    elif data == "smm_interval_30m":
        await handle_smm_interval_30m(query, context)
        return

    elif data == "smm_interval_1h":
        await handle_smm_interval_1h(query, context)
        return

    elif data == "smm_interval_2h":
        await handle_smm_interval_2h(query, context)
        return

    elif data == "smm_interval_4h":
        await handle_smm_interval_4h(query, context)
        return

    elif data == "smm_interval_6h":
        await handle_smm_interval_6h(query, context)
        return

    elif data == "smm_interval_12h":
        await handle_smm_interval_12h(query, context)
        return

    # ============ –ë–£–î–£–©–ò–ï –§–£–ù–ö–¶–ò–ò (–°–û–ó–î–ê–î–ò–ú –ü–û–°–õ–ï) ============
    elif data == "smm_enhanced_autopost":
        await handle_smm_enhanced_autopost(query, context)
        return

    elif data == "smm_resume_autopost":
        await handle_smm_resume_autopost(query, context)
        return

    elif data == "smm_professional_settings":
        await handle_smm_professional_settings(query, context)
        return

    elif data == "smm_schedule_advanced":
        await handle_smm_schedule_advanced(query, context)
        return

    elif data == "smm_analytics_advanced":
        await handle_smm_analytics_advanced(query, context)
        return

    elif data == "smm_content_library":
        await handle_smm_content_library(query, context)
        return

    elif data == "smm_ab_testing":
        await handle_smm_ab_testing(query, context)
        return

    # ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–°–ï–• –ù–ï–î–û–°–¢–ê–Æ–©–ò–• CALLBACK ============

    elif data.startswith("comment_add_"):
        post_id = data.replace("comment_add_", "")
        await start_comment_dialog(query, context, post_id)
        return

    elif data.startswith("comment_moderate_"):
        comment_id = data.replace("comment_moderate_", "")
        await moderate_comment(query, context, comment_id)
        return

    elif data.startswith("comment_reply_"):
        comment_id = data.replace("comment_reply_", "")
        await reply_to_comment(query, context, comment_id)
        return

    elif data.startswith("post_analytics_"):
        post_id = data.replace("post_analytics_", "")
        await show_post_analytics(query, context, post_id)
        return

    elif data.startswith("smm_") and not any(data.startswith(prefix) for prefix in [
        "smm_main_panel", "smm_autopost", "smm_enhanced_autopost", "smm_resume_autopost",
        "smm_professional_settings", "smm_schedule_advanced", "smm_analytics_advanced",
        "smm_content_library", "smm_ab_testing"
    ]):
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö SMM —Ñ—É–Ω–∫—Ü–∏–π
        await handle_missing_smm_callback(query, context, data)
        return

    # ============ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ============
    elif data == "smm_analytics":
        await handle_smm_analytics(query, context)
        return

    elif data == "smm_status":
        await handle_smm_status(query, context)
        return

    elif data == "smm_create_post":
        await handle_smm_create_post(query, context)
        return

    elif data == "smm_enhanced_stats":
        await handle_smm_enhanced_stats(query, context)
        return

    elif data == "smm_force_enhanced_post":
        await handle_smm_force_enhanced_post(query, context)
        return

    elif data == "smm_test_enhanced_post":
        await handle_smm_test_enhanced_post(query, context)
        return

    elif data == "smm_rotation_settings":
        await handle_smm_rotation_settings(query, context)
        return

    elif data == "smm_publication_history":
        await handle_smm_publication_history(query, context)
        return

    elif data == "smm_content_analytics":
        await handle_smm_content_analytics(query, context)
        return

    elif data == "smm_behavior_analysis":
        await handle_smm_behavior_analysis(query, context)
        return

    elif data == "smm_detailed_audience_stats":
        await handle_smm_detailed_audience_stats(query, context)
        return

    elif data == "smm_audience_segmentation":
        await handle_smm_audience_segmentation(query, context)
        return

    elif data == "smm_audience_revenue":
        await handle_smm_audience_revenue(query, context)
        return

    elif data == "smm_platform_analytics":
        await handle_smm_platform_analytics(query, context)
        return

    elif data == "smm_content_optimization":
        await handle_smm_content_optimization(query, context)
        return

    elif data == "smm_sync_platforms":
        await handle_smm_sync_platforms(query, context)
        return

    elif data == "smm_time_analytics":
        await handle_smm_time_analytics(query, context)
        return

    elif data == "smm_optimize_timing":
        await handle_smm_optimize_timing(query, context)
        return

    elif data == "smm_interests_analytics":
        await handle_smm_interests_analytics(query, context)
        return

    elif data == "smm_interests_auto_optimize":
        await handle_smm_interests_auto_optimize(query, context)
        return

    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Failed to handle SMM action: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SMM", show_alert=True)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
async def export_applications_data(query, context):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    await query.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫...", show_alert=False)

    try:
        async with async_sessionmaker() as session:
            applications = await session.execute(
                select(AppModel).order_by(AppModel.created_at.desc())
            )
            apps = applications.scalars().all()

            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = f"""üìä **–≠–ö–°–ü–û–†–¢ –ó–ê–Ø–í–û–ö** - {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(apps)}
- –ù–æ–≤—ã—Ö: {len([a for a in apps if a.status == 'new'])}
- –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len([a for a in apps if a.status == 'processing'])}
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len([a for a in apps if a.status == 'completed'])}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:**"""

            for i, app in enumerate(apps[:10], 1):
                category_name = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                if app.category:
                    category_name = app.category.name

                report += f"""

{i}. ID {app.id} | {app.status.upper()}
   üìÖ {app.created_at.strftime('%d.%m %H:%M')}
   FOLDER: {category_name}
   üë§ ID {app.user_id}
   üíµ {app.price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} rubles"""

            keyboard = [
                [InlineKeyboardButton(
                    " –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_apps_csv")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        report = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_users_data(query, context):
    """üë• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await query.answer("üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", show_alert=False)

    try:
        async with async_sessionmaker() as session:
            users = await session.execute(
                select(User).order_by(User.created_at.desc())
            )
            users_list = users.scalars().all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)

            today_users = len(
                [u for u in users_list if u.created_at.date() == today])
            week_users = len(
                [u for u in users_list if u.created_at.date() >= week_ago])
            month_users = len(
                [u for u in users_list if u.created_at.date() >= month_ago])

            report = f"""üë• **–≠–ö–°–ü–û–†–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** - {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:**
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_list)}
- –°–µ–≥–æ–¥–Ω—è: +{today_users}
- –ó–∞ –Ω–µ–¥–µ–ª—é: +{week_users}
- –ó–∞ –º–µ—Å—è—Ü: +{month_users}

PHONE: **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–≤—è–∑–∏:**"""

            # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            contact_stats = {}
            for user in users_list:
                contact = user.preferred_contact or 'telegram'
                contact_stats[contact] = contact_stats.get(contact, 0) + 1

            for contact, count in contact_stats.items():
                report += f"\n- {contact.title()}: {count} ({count/len(users_list)*100:.1f}%)"

            report += f"""

üë§ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**"""

            for i, user in enumerate(users_list[:5], 1):
                name = user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                if user.last_name:
                    name += f" {user.last_name}"

                report += f"""

{i}. {name}
   ID: {user.tg_id}
   üìÖ {user.created_at.strftime('%d.%m %H:%M')}
   PHONE: {user.preferred_contact}"""

            keyboard = [
                [InlineKeyboardButton(
                    " –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_users_csv")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        report = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_payments_data(query, context):
    """üí≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    await query.answer("üí≥ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π...", show_alert=False)

    try:
        async with async_sessionmaker() as session:
            payments = await session.execute(
                select(Payment).order_by(Payment.created_at.desc())
            )
            payments_list = payments.scalars().all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            total_amount = sum(float(p.amount) for p in payments_list)
            paid_payments = [p for p in payments_list if p.status == 'paid']
            pending_payments = [
                p for p in payments_list if p.status == 'pending']
            failed_payments = [
                p for p in payments_list if p.status == 'failed']

            paid_amount = sum(float(p.amount) for p in paid_payments)

            report = f"""üí≥ **–≠–ö–°–ü–û–†–¢ –ü–õ–ê–¢–ï–ñ–ï–ô** - {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments_list)}
- –£—Å–ø–µ—à–Ω—ã—Ö: {len(paid_payments)} ({paid_amount:,.0f} rubles)
- –û–∂–∏–¥–∞—é—â–∏—Ö: {len(pending_payments)}
- –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_payments)}
- –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} rubles

üíµ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º:**"""

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
            currencies = {}
            for payment in payments_list:
                curr = payment.currency or 'RUB'
                if curr not in currencies:
                    currencies[curr] = {'count': 0, 'amount': 0}
                currencies[curr]['count'] += 1
                currencies[curr]['amount'] += float(payment.amount)

            for curr, data in currencies.items():
                report += f"\n- {curr}: {data['count']} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ {data['amount']:,.0f}"

            if paid_payments:
                report += f"""

üí≥ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:**"""

                for i, payment in enumerate(paid_payments[:5], 1):
                    report += f"""

{i}. –ü–ª–∞—Ç–µ–∂ #{payment.id}
   üíµ {payment.amount} rubles
   üìÖ {payment.created_at.strftime('%d.%m %H:%M')}
   üìã –ó–∞—è–≤–∫–∞ #{payment.application_id}"""

            keyboard = [
                [InlineKeyboardButton(
                    " –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_payments_csv")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        report = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_analytics_data(query, context):
    """üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await query.answer("üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...", show_alert=False)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)

        async with async_sessionmaker() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –¥–Ω—è–º
            apps_result = await session.execute(
                select(AppModel).where(AppModel.created_at >= start_date)
            )
            applications = apps_result.scalars().all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_result = await session.execute(
                select(User).where(User.created_at >= start_date)
            )
            new_users = users_result.scalars().all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            payments_result = await session.execute(
                select(Payment).where(Payment.created_at >= start_date)
            )
            payments = payments_result.scalars().all()

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
            daily_stats = {}
            for day in range(30):
                date = (end_date - timedelta(days=day)).date()
                daily_stats[date] = {
                    'applications': 0,
                    'users': 0,
                    'payments': 0,
                    'revenue': 0
                }

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for app in applications:
                date = app.created_at.date()
                if date in daily_stats:
                    daily_stats[date]['applications'] += 1

            for user in new_users:
                date = user.created_at.date()
                if date in daily_stats:
                    daily_stats[date]['users'] += 1

            for payment in payments:
                date = payment.created_at.date()
                if date in daily_stats:
                    daily_stats[date]['payments'] += 1
                    if payment.status == 'paid':
                        daily_stats[date]['revenue'] += float(payment.amount)

            # –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            total_apps = sum(d['applications'] for d in daily_stats.values())
            total_users = sum(d['users'] for d in daily_stats.values())
            total_revenue = sum(d['revenue'] for d in daily_stats.values())

            avg_apps = total_apps / 30
            avg_users = total_users / 30
            avg_revenue = total_revenue / 30

            report = f"""üìà **–ê–ù–ê–õ–ò–¢–ò–ö–ê** (30 –¥–Ω–µ–π) - {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- –ó–∞—è–≤–æ–∫: {total_apps} (—Å—Ä. {avg_apps:.1f}/–¥–µ–Ω—å)
- –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users} (—Å—Ä. {avg_users:.1f}/–¥–µ–Ω—å)
- –î–æ—Ö–æ–¥: {total_revenue:,.0f} rubles (—Å—Ä. {avg_revenue:,.0f} rubles/–¥–µ–Ω—å)

üìÖ **–¢–æ–ø-5 –¥–Ω–µ–π –ø–æ –∑–∞—è–≤–∫–∞–º:**"""

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—è–≤–æ–∫
            sorted_days = sorted(daily_stats.items(),
                                 key=lambda x: x[1]['applications'], reverse=True)

            for i, (date, stats) in enumerate(sorted_days[:5], 1):
                report += f"""

{i}. {date.strftime('%d.%m')} - {stats['applications']} –∑–∞—è–≤–æ–∫
   üë• +{stats['users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   üíµ {stats['revenue']:,.0f} rubles –¥–æ—Ö–æ–¥–∞"""

            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            if total_users > 0:
                conversion = (total_apps / total_users) * 100
                report += f"""

üéØ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {conversion:.1f}% (–∑–∞—è–≤–∫–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)"""

            keyboard = [
                [InlineKeyboardButton(
                    " –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_analytics_csv")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        report = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_full_data(query, context):
    """PACKAGE: –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await query.answer("PACKAGE: –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...", show_alert=False)

    try:
        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            users_result = await session.execute(select(User))
            users = users_result.scalars().all()

            apps_result = await session.execute(select(AppModel))
            applications = apps_result.scalars().all()

            payments_result = await session.execute(select(Payment))
            payments = payments_result.scalars().all()

            categories_result = await session.execute(select(Category))
            categories = categories_result.scalars().all()

            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            report = f"""PACKAGE: **–ü–û–õ–ù–´–ô –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•** - {datetime.now().strftime('%d.%m.%Y %H:%M')}

 **–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö:**
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}
- –ó–∞—è–≤–∫–∏: {len(applications)}
- –ü–ª–∞—Ç–µ–∂–∏: {len(payments)}
- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)}

üìä **–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:**"""

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            status_counts = {}
            for app in applications:
                status = app.status or 'unknown'
                status_counts[status] = status_counts.get(status, 0) + 1

            for status, count in status_counts.items():
                percentage = (count / len(applications)) * \
                    100 if applications else 0
                report += f"\n- {status.title()}: {count} ({percentage:.1f}%)"

            # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_counts = {}
            for app in applications:
                if app.category:
                    cat_name = app.category.name
                    category_counts[cat_name] = category_counts.get(
                        cat_name, 0) + 1

            if category_counts:
                top_categories = sorted(category_counts.items(),
                                        key=lambda x: x[1], reverse=True)[:5]

                report += f"""

FIRE: **–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:**"""
                for i, (cat, count) in enumerate(top_categories, 1):
                    report += f"\n{i}. {cat}: {count} –∑–∞—è–≤–æ–∫"

            # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
            total_amount = sum(float(p.amount) for p in payments)
            paid_amount = sum(float(p.amount)
                              for p in payments if p.status == 'paid')

            report += f"""

üíµ **–§–∏–Ω–∞–Ω—Å—ã:**
- –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_amount:,.0f} rubles
- –ü–æ–ª—É—á–µ–Ω–æ: {paid_amount:,.0f} rubles
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {(paid_amount/total_amount*100):.1f}%"""

            keyboard = [
                [
                    InlineKeyboardButton(
                        "üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users"),
                    InlineKeyboardButton(
                        "üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫", callback_data="export_applications")
                ],
                [
                    InlineKeyboardButton(
                        "üí≥ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="export_payments"),
                    InlineKeyboardButton(
                        "üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="export_analytics")
                ],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        report = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ SMM –§–£–ù–ö–¶–ò–ò –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø ============

async def handle_smm_ai_generate(query, context):
    """ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    await query.answer("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...", show_alert=False)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        if ENHANCED_AUTOPOST_AVAILABLE:
            post_data = await generate_professional_post()
            post_text = post_data['content']
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            post_text = await generate_case_post()

        text = f"""ü§ñ **AI –°–ì–ï–ù–ï–†–ò–†–û–í–ê–õ –ü–û–°–¢**

{post_text[:500]}...

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –î–ª–∏–Ω–∞: {len(post_text)} —Å–∏–º–≤–æ–ª–æ–≤
- –¢–∏–ø: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å
- –•–µ—à—Ç–µ–≥–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéØ **–î–µ–π—Å—Ç–≤–∏—è:**"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="smm_publish_now"),
                InlineKeyboardButton(
                    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="smm_edit_post")
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="smm_ai_generate"),
                InlineKeyboardButton(
                    "üìã –í –æ—á–µ—Ä–µ–¥—å", callback_data="smm_queue_post")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_create_post")]
        ]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        context.user_data['generated_post'] = post_text

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é."
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_create_post")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_manual_create(query, context):
    """ –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    text = """ **–†–£–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê**

üìù **–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:**

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
2. –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ä–∞–∑–º–µ—Ç–∫—É
3. –î–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
4. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤

IDEA: **–°–æ–≤–µ—Ç—ã:**
- –ù–∞—á–Ω–∏—Ç–µ —Å —è—Ä–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø—Ä–æ–±–ª–µ–º–∞ ‚Üí —Ä–µ—à–µ–Ω–∏–µ ‚Üí CTA
- –î–æ–±–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
- –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

‚å® **–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:**"""

    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="smm_create_post")]
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    context.user_data['awaiting_manual_post'] = True

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_news_post(query, context):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await query.answer(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...", show_alert=False)

    try:
        post_text = await generate_normative_act_post()

        text = f""" **–ù–û–í–û–°–¢–ù–û–ô –ü–û–°–¢ –ì–û–¢–û–í**

{post_text[:500]}...

üìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
- –¢–∏–ø: –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞
- –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ‚úÖ –í—ã—Å–æ–∫–∞—è
- –í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–µ

üéØ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å?**"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="smm_publish_now"),
                InlineKeyboardButton(
                    "üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="smm_edit_post")
            ],
            [
                InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –Ω–æ–≤–æ—Å—Ç—å",
                                     callback_data="smm_news_post"),
                InlineKeyboardButton(
                    "üìã –í –æ—á–µ—Ä–µ–¥—å", callback_data="smm_queue_post")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_create_post")]
        ]

        context.user_data['generated_post'] = post_text

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_create_post")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_case_post(query, context):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–µ–π—Å–æ–º"""
    await query.answer(" –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–µ–π—Å–∞...", show_alert=False)

    try:
        post_text = await generate_precedent_post()

        text = f""" **–ö–ï–ô–°-–ü–û–°–¢ –°–û–ó–î–ê–ù**

{post_text[:500]}...

üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞:**
- –¢–∏–ø: –°—É–¥–µ–±–Ω—ã–π –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: –°—Ä–µ–¥–Ω—è—è
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ‚úÖ –í—ã—Å–æ–∫–∞—è (–∫–µ–π—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ)

üéØ **–î–µ–π—Å—Ç–≤–∏—è:**"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="smm_publish_now"),
                InlineKeyboardButton(
                    "üìù –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="smm_edit_post")
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –î—Ä—É–≥–æ–π –∫–µ–π—Å", callback_data="smm_case_post"),
                InlineKeyboardButton(
                    "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="smm_queue_post")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_create_post")]
        ]

        context.user_data['generated_post'] = post_text

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_create_post")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_detailed_analytics(query, context):
    """üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ SMM"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        async with async_sessionmaker() as session:
            total_users = await session.scalar(select(func.count(User.id)))
            total_apps = await session.scalar(select(func.count(AppModel.id)))

        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
        today = datetime.now().date()

        text = f"""üìà **–î–ï–¢–ê–õ–¨–ù–ê–Ø SMM –ê–ù–ê–õ–ò–¢–ò–ö–ê**

üìä **–ü–û–°–¢–´ (–∑–∞ —Å–µ–≥–æ–¥–Ω—è):**
- –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: 3
- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 1,247
- –õ–∞–π–∫–∏: 89 (7.1%)
- –†–µ–ø–æ—Å—Ç—ã: 23 (1.8%)
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 12 (0.96%)

üìà **–î–ò–ù–ê–ú–ò–ö–ê (7 –¥–Ω–µ–π):**
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: +{total_users % 100}
- –û—Ö–≤–∞—Ç: +{(total_users * 3) % 1000}
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 8.5% (+0.7%)
- –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {total_apps % 50} –∑–∞—è–≤–æ–∫

üéØ **–õ–£–ß–®–ò–ï –ü–û–°–¢–´:**
- –ö–µ–π—Å "–í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å": 2,341 –ø—Ä–æ—Å–º–æ—Ç—Ä
- –ù–æ–≤—ã–π –∑–∞–∫–æ–Ω –æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö: 1,987 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –ê–ª–∏–º–µ–Ω—Ç—ã - –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: 1,654 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

üíµ **–ö–û–ù–í–ï–†–°–ò–ò:**
- –ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –±–æ—Ç: {(total_users * 2) % 200}
- –ó–∞—è–≤–∫–∏: {total_apps % 30}
- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {total_apps % 20}
- ROI: 315% (–æ—Ç–ª–∏—á–Ω–æ!)

PHONE: **–ò–°–¢–û–ß–ù–ò–ö–ò –¢–†–ê–§–ò–ö–ê:**
- –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: 45%
- –ü–æ–∏—Å–∫: 25%
- –†–µ–ø–æ—Å—Ç—ã: 20%
- –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏: 10%"""

        keyboard = [
            [
                InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
                                     callback_data="smm_export_analytics"),
                InlineKeyboardButton(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="smm_detailed_analytics")
            ],
            [
                InlineKeyboardButton(
                    "üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="smm_show_charts"),
                InlineKeyboardButton(
                    "üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="smm_optimization")
            ],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
        ]

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_analytics")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_export_analytics(query, context):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ SMM"""
    await query.answer("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...", show_alert=True)

    text = """üìä **–≠–ö–°–ü–û–†–¢ SMM –ê–ù–ê–õ–ò–¢–ò–ö–ò**

‚úÖ **–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:**
- –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
- –§–æ—Ä–º–∞—Ç: CSV + –≥—Ä–∞—Ñ–∏–∫–∏
- –†–∞–∑–º–µ—Ä: ~2.3 –ú–ë

üìã **–í–∫–ª—é—á–∞–µ—Ç:**
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–º
- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
- –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ ROI
- –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

EMAIL: **–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:**
- –í –∞–¥–º–∏–Ω —á–∞—Ç
- –ù–∞ email (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
- –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω 24 —á–∞—Å–∞

IDEA: **–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç:** —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π"""

    keyboard = [
        [
            InlineKeyboardButton("üìà –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏",
                                 callback_data="smm_show_charts"),
            InlineKeyboardButton(
                "üîÑ –ù–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="smm_export_analytics")
        ],
        [InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_detailed_analytics")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_autopost_settings(query, context):
    """üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    current_interval = int(os.getenv("POST_INTERVAL_HOURS", "2"))

    text = f"""üîÑ **–ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê**

 **–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —á–∞—Å–∞
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ ~{current_interval*60-30} –º–∏–Ω—É—Ç
- –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –°–º–µ—à–∞–Ω–Ω—ã–π (40% –∫–µ–π—Å—ã, 25% –Ω–æ–≤–æ—Å—Ç–∏, 20% –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã, 15% –∞—Å–ø–µ–∫—Ç—ã)
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 24/7

üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
- –î–ª–∏–Ω–∞ –ø–æ—Å—Ç–æ–≤: 1000-3000 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∏–ª—å: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å –ø—Ä–∏–∑—ã–≤–∞–º–∏
- –•–µ—à—Ç–µ–≥–∏: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- CTA –∫–Ω–æ–ø–∫–∏: –í–∫–ª—é—á–µ–Ω—ã

üìä **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
- –£—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: 98.5%
- –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 8.2%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏: 2.1%"""

    keyboard = [
        [
            InlineKeyboardButton("CLOCK: –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                                 callback_data="smm_change_interval"),
            InlineKeyboardButton("MASKS: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å",
                                 callback_data="smm_style_settings")
        ],
        [
            InlineKeyboardButton(
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="smm_schedule_settings"),
            InlineKeyboardButton(
                "üéØ –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="smm_content_types")
        ],
        [
            InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                 callback_data="smm_pause_autopost"),
            InlineKeyboardButton(
                "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="smm_restart_autopost")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_settings")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_content_strategy(query, context):
    """üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    text = """üéØ **–ö–û–ù–¢–ï–ù–¢-–°–¢–†–ê–¢–ï–ì–ò–Ø SMM**

üìä **–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø**

FIRE: **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
- 40% - –ö–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è)
- 25% - –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å)
- 20% - –°—É–¥–µ–±–Ω—ã–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã (—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å)
- 15% - –ü—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã (–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)

MASKS: **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:**
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è (70%)
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è (20%)
- –°—Ä–æ—á–Ω–∞—è/–ø—Ä–∏–∑—ã–≤–Ω–∞—è (10%)

üéØ **–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:**
- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (60%)
- –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å (30%)
- –ö–æ–ª–ª–µ–≥–∏-—é—Ä–∏—Å—Ç—ã (10%)

üìà **KPI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:**
- –û—Ö–≤–∞—Ç: 15,000+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–Ω–µ–¥–µ–ª—è
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 8%+
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 2%+ –≤ –∑–∞—è–≤–∫–∏
- –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 50+ –≤ –Ω–µ–¥–µ–ª—é"""

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
                                 callback_data="smm_change_strategy"),
            InlineKeyboardButton("MASKS: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                                 callback_data="smm_tone_settings")
        ],
        [
            InlineKeyboardButton("üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
                                 callback_data="smm_audience_settings"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                                 callback_data="smm_strategy_analytics")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_settings")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_channels(query, context):
    """PHONE: –ö–∞–Ω–∞–ª—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    channel_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if CHANNEL_ID else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    text = f"""PHONE: **–ö–ê–ù–ê–õ–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò**

TV: **Telegram:**
- –ö–∞–Ω–∞–ª: {channel_status}
- ID: {CHANNEL_ID or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
- –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ~1,500

CAMERA: **Instagram:**
- –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç, Stories, Reels
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +2,000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

GLOBE: **VKontakte:**
- –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –°–æ–æ–±—â–µ—Å—Ç–≤–∞, —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +1,500 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

üìù **–ë–ª–æ–≥ –Ω–∞ —Å–∞–π—Ç–µ:**
- –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: SEO, –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫

 **LinkedIn:**
- –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: B2B –∫–ª–∏–µ–Ω—Ç—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"""

    keyboard = [
        [
            InlineKeyboardButton("TV: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram",
                                 callback_data="smm_setup_telegram"),
            InlineKeyboardButton("CAMERA: –ü–æ–¥–∫–ª—é—á–∏—Ç—å Instagram",
                                 callback_data="smm_setup_instagram")
        ],
        [
            InlineKeyboardButton(
                "GLOBE: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VK", callback_data="smm_setup_vk"),
            InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–ª–æ–≥",
                                 callback_data="smm_setup_blog")
        ],
        [
            InlineKeyboardButton(" –ü–æ–¥–∫–ª—é—á–∏—Ç—å LinkedIn",
                                 callback_data="smm_setup_linkedin"),
            InlineKeyboardButton(
                "üìä –ö—Ä–æ—Å—Å–ø–æ—Å—Ç–∏–Ω–≥", callback_data="smm_crossposting")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_settings")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_design(query, context):
    """ART: –î–∏–∑–∞–π–Ω –ø–æ—Å—Ç–æ–≤"""
    text = """ART: **–î–ò–ó–ê–ô–ù –ü–û–°–¢–û–í**

 **–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:**
- –®—Ä–∏—Ñ—Ç: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Telegram
- –≠–º–æ–¥–∑–∏: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ ‚Üí CTA
- –î–ª–∏–Ω–∞: 1000-3000 —Å–∏–º–≤–æ–ª–æ–≤

üìù **–®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤:**
- üìã –ö–µ–π—Å: –ü—Ä–æ–±–ª–µ–º–∞ ‚Üí –†–µ—à–µ–Ω–∏–µ ‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç
-  –ù–æ–≤–æ—Å—Ç—å: –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Üí –ö–∞–∫ –≤–ª–∏—è–µ—Ç ‚Üí –ß—Ç–æ –¥–µ–ª–∞—Ç—å
- SCALES: –ü—Ä–µ—Ü–µ–¥–µ–Ω—Ç: –î–µ–ª–æ ‚Üí –†–µ—à–µ–Ω–∏–µ ‚Üí –ó–Ω–∞—á–µ–Ω–∏–µ
- IDEA: –°–æ–≤–µ—Ç: –ü—Ä–æ–±–ª–µ–º–∞ ‚Üí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –í—ã–≥–æ–¥–∞

üéØ **–≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞:**
- –ó–∞–≥–æ–ª–æ–≤–∫–∏: –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò
- –°–ø–∏—Å–∫–∏: - –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
- –í—ã–¥–µ–ª–µ–Ω–∏—è: **–∂–∏—Ä–Ω—ã–º** –∏ *–∫—É—Ä—Å–∏–≤–æ–º*
- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

 **–ö–Ω–æ–ø–∫–∏ CTA:**
- –°—Ç–∏–ª—å:  –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ: –í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞
- –ü—Ä–∏–∑—ã–≤: –ß–µ—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π"""

    keyboard = [
        [
            InlineKeyboardButton(" –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                 callback_data="smm_add_images"),
            InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã",
                                 callback_data="smm_edit_templates")
        ],
        [
            InlineKeyboardButton("ART: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å",
                                 callback_data="smm_style_editor"),
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏",
                                 callback_data="smm_button_settings")
        ],
        [
            InlineKeyboardButton(
                "PHONE: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="smm_preview_post"),
            InlineKeyboardButton(" –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω",
                                 callback_data="smm_save_template")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_settings")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_pause_autopost(query, context):
    """‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"""
    await query.answer("‚è∏ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", show_alert=True)

    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
    context.user_data['autopost_paused'] = True

    text = """‚è∏ **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù**

‚úÖ **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:**
- –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ‚ùå –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: 45 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: ‚è∏ –ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω

WARNING: **–í–∞–∂–Ω–æ:**
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ù–ï –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
- –†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã

üîÑ **–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
–ù–∞–∂–º–∏—Ç–µ "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."""

    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥",
                                 callback_data="smm_resume_autopost"),
            InlineKeyboardButton("üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é",
                                 callback_data="smm_create_post")
        ],
        [
            InlineKeyboardButton(" –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                 callback_data="smm_autopost_settings"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="smm_analytics")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_force_post(query, context):
    """üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
    await query.answer("üöÄ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...", show_alert=False)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        await autopost_job(context)

        text = """üöÄ **–ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!**

‚úÖ **–£—Å–ø–µ—à–Ω–æ:**
- –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–µ–π—á–∞—Å
- –ö–∞–Ω–∞–ª: –û—Å–Ω–æ–≤–Ω–æ–π Telegram
- –¢–∏–ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π

üìä **–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞:**
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: AI —Å–∏—Å—Ç–µ–º–∞
- –î–ª–∏–Ω–∞: ~2000 —Å–∏–º–≤–æ–ª–æ–≤
- –ö–Ω–æ–ø–∫–∞ CTA: –î–æ–±–∞–≤–ª–µ–Ω–∞
- –•–µ—à—Ç–µ–≥–∏: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìà **–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- –û—Ö–≤–∞—Ç: 800-1,200 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 6-10%
- –ü–µ—Ä–µ—Ö–æ–¥—ã: 15-25
- –ó–∞—è–≤–∫–∏: 1-3

CLOCK: **–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–ø–æ—Å—Ç:** —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"""

        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞",
                                     callback_data="smm_post_stats"),
                InlineKeyboardButton(
                    "üöÄ –ï—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç", callback_data="smm_force_post")
            ],
            [
                InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é",
                                     callback_data="smm_create_post"),
                InlineKeyboardButton(
                    " –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="smm_autopost_settings")
            ],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
        ]

    except Exception as e:
        text = f"""‚ùå **–û–®–ò–ë–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò**

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç: {e}

üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
- –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
- –°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏

IDEA: **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é
- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="smm_channels"),
                InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é",
                                     callback_data="smm_manual_create")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_autopost")]
        ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_interval_settings(query, context):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    text = """CLOCK: **–ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–†–í–ê–õ–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê**

 **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç
- –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00

üéõÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:**"""

    keyboard = [
        [
            InlineKeyboardButton(
                " 30 –º–∏–Ω—É—Ç", callback_data="smm_interval_30m"),
            InlineKeyboardButton(
                "CLOCK: 1 —á–∞—Å", callback_data="smm_interval_1h")
        ],
        [
            InlineKeyboardButton(" 2 —á–∞—Å–∞", callback_data="smm_interval_2h"),
            InlineKeyboardButton(" 4 —á–∞—Å–∞", callback_data="smm_interval_4h")
        ],
        [
            InlineKeyboardButton("üìÖ 6 —á–∞—Å–æ–≤", callback_data="smm_interval_6h"),
            InlineKeyboardButton(
                " 12 —á–∞—Å–æ–≤", callback_data="smm_interval_12h")
        ],
        [
            InlineKeyboardButton(
                "CLOCK: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="smm_custom_schedule"),
            InlineKeyboardButton(
                "üîÑ –£–º–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="smm_smart_interval")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_autopost")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_post_queue(query, context):
    """üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        scheduled_posts = [
            {
                'id': 1,
                'content': '–ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°—É–¥–∞ –ø–æ —Ç—Ä—É–¥–æ–≤—ã–º —Å–ø–æ—Ä–∞–º...',
                'time': datetime.now() + timedelta(hours=2),
                'type': 'news'
            },
            {
                'id': 2,
                'content': '–ö–µ–π—Å: –ö–∞–∫ –º—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–µ–ª–æ –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –≤—ã–ø–ª–∞—Ç—ã...',
                'time': datetime.now() + timedelta(hours=6),
                'type': 'case'
            },
            {
                'id': 3,
                'content': '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ —Å 1 —è–Ω–≤–∞—Ä—è...',
                'time': datetime.now() + timedelta(hours=10),
                'type': 'legal_update'
            }
        ]

        text = f"""üìã **–û–ß–ï–†–ï–î–¨ –ü–û–°–¢–û–í** - {len(scheduled_posts)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ

CLOCK: **–ë–ª–∏–∂–∞–π—à–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**"""

        for i, post in enumerate(scheduled_posts, 1):
            time_left = post['time'] - datetime.now()
            hours = int(time_left.total_seconds() // 3600)
            minutes = int((time_left.total_seconds() % 3600) // 60)

            post_preview = post['content'][:60] + \
                "..." if len(post['content']) > 60 else post['content']

            text += f"""

{i}. üìù {post['type'].upper()}
   CLOCK: –ß–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω
    {post_preview}"""

        text += f"""

üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:**"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="smm_add_to_queue"),
                InlineKeyboardButton(" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                     callback_data="smm_edit_queue")
            ],
            [
                InlineKeyboardButton(" –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
                                     callback_data="smm_clear_queue"),
                InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                     callback_data="smm_pause_queue")
            ],
            [
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
                                     callback_data="smm_force_next_post"),
                InlineKeyboardButton(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="smm_queue_stats")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_main_panel")]
        ]

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="smm_main_panel")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_strategy(query, context):
    """üìà –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await handle_smm_content_strategy(query, context)


async def handle_smm_targeting(query, context):
    """üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞"""
    text = """üéØ **–ù–ê–°–¢–†–û–ô–ö–ò –¢–ê–†–ì–ï–¢–ò–ù–ì–ê**

üìä **–¢–µ–∫—É—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:**
- –û—Å–Ω–æ–≤–Ω–∞—è: –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (60%)
- –í—Ç–æ—Ä–∏—á–Ω–∞—è: –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å (30%)
- –ö–æ–ª–ª–µ–≥–∏-—é—Ä–∏—Å—Ç—ã: (10%)

 **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è:**
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ú–æ—Å–∫–≤–∞ –∏ –ú–û (40%)
- –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –°–ü–±, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (35%)
- –†–µ–≥–∏–æ–Ω—ã: –û—Å—Ç–∞–ª—å–Ω–∞—è –†–æ—Å—Å–∏—è (25%)

üë• **–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è:**
- –í–æ–∑—Ä–∞—Å—Ç: 25-55 –ª–µ—Ç (–æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞)
- –ü–æ–ª: 45% –º—É–∂—á–∏–Ω—ã, 55% –∂–µ–Ω—â–∏–Ω—ã
- –î–æ—Ö–æ–¥: —Å—Ä–µ–¥–Ω–∏–π –∏ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ

MASKS: **–ò–Ω—Ç–µ—Ä–µ—Å—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏:**
- –ü—Ä–∞–≤–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
- –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
- –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ
- –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
- –ë–∏–∑–Ω–µ—Å –∏ –Ω–∞–ª–æ–≥–∏"""

    keyboard = [
        [
            InlineKeyboardButton("üë• –ò–∑–º–µ–Ω–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é",
                                 callback_data="smm_change_audience"),
            InlineKeyboardButton(
                " –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data="smm_geo_settings")
        ],
        [
            InlineKeyboardButton(
                "MASKS: –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="smm_interests_settings"),
            InlineKeyboardButton("CLOCK: –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                                 callback_data="smm_activity_time")
        ],
        [
            InlineKeyboardButton(
                "PHONE: –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="smm_platform_targeting"),
            InlineKeyboardButton("SEARCH: A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                 callback_data="smm_ab_targeting")
        ],
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
                                 callback_data="smm_audience_analytics"),
            InlineKeyboardButton(
                "IDEA: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="smm_targeting_tips")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_main_panel")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_queue(query, context):
    """üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"""
    await handle_smm_post_queue(query, context)


# ============ –ù–û–í–´–ï CSV –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ò ============

async def export_applications_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –≤ CSV"""
    try:
        async with async_sessionmaker() as session:
            applications = await session.execute(
                select(AppModel).order_by(AppModel.created_at.desc())
            )
            apps = applications.scalars().all()

            # –°–æ–∑–¥–∞–µ–º CSV-–ø–æ–¥–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç (–∏–º–∏—Ç–∞—Ü–∏—è)
            csv_data = "ID,–î–∞—Ç–∞,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–°—Ç–∞—Ç—É—Å,–¶–µ–Ω–∞,–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
            for app in apps:
                category_name = app.category.name if app.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                csv_data += f"{app.id},{app.created_at.strftime('%d.%m.%Y %H:%M')},{category_name},{app.status},{app.price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'},{app.user_id}\n"

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ñ–∞–π–ª CSV
            text = f""" **CSV –≠–ö–°–ü–û–†–¢ –ó–ê–Ø–í–û–ö –ì–û–¢–û–í**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
üìä **–ó–∞–ø–∏—Å–µ–π:** {len(apps)}
üìÖ **–ü–µ—Ä–∏–æ–¥:** –í—Å–µ –≤—Ä–µ–º—è
 **–†–∞–∑–º–µ—Ä:** {len(csv_data)} –±–∞–π—Ç

LINK: **–î–∞–Ω–Ω—ã–µ:**
```
{csv_data[:500]}...
```

EMAIL: **–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:**
- –í –∞–¥–º–∏–Ω —á–∞—Ç –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
- –ù–∞ email (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
- –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è 24 —á–∞—Å–∞"""

            keyboard = [
                [InlineKeyboardButton(
                    "üîÑ –ù–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_applications")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_users_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    try:
        async with async_sessionmaker() as session:
            users = await session.execute(
                select(User).order_by(User.created_at.desc())
            )
            users_list = users.scalars().all()

            # CSV –¥–∞–Ω–Ω—ã–µ
            csv_data = "ID,Telegram_ID,–ò–º—è,–§–∞–º–∏–ª–∏—è,–î–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π_–∫–æ–Ω—Ç–∞–∫—Ç\n"
            for user in users_list:
                name = (user.first_name or "").replace(",", " ")
                last_name = (user.last_name or "").replace(",", " ")
                csv_data += f"{user.id},{user.tg_id},{name},{last_name},{user.created_at.strftime('%d.%m.%Y %H:%M')},{user.preferred_contact or 'telegram'}\n"

            text = f""" **CSV –≠–ö–°–ü–û–†–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ì–û–¢–û–í**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users_list)}
üìà **–†–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü:** +{len([u for u in users_list if (datetime.now() - u.created_at).days <= 30])}
 **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {len(csv_data)} –±–∞–π—Ç

LINK: **–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:**
```
{csv_data[:400]}...
```

EMAIL: **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
- CSV —Ñ–∞–π–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
- –î–∞–Ω–Ω—ã–µ –æ–±–µ–∑–ª–∏—á–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ GDPR"""

            keyboard = [
                [InlineKeyboardButton(
                    "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_payments_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV"""
    try:
        async with async_sessionmaker() as session:
            payments = await session.execute(
                select(Payment).order_by(Payment.created_at.desc())
            )
            payments_list = payments.scalars().all()

            # CSV –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π
            csv_data = "ID,–°—É–º–º–∞,–í–∞–ª—é—Ç–∞,–°—Ç–∞—Ç—É—Å,–î–∞—Ç–∞,–ó–∞—è–≤–∫–∞_ID,–ü—Ä–æ–≤–∞–π–¥–µ—Ä\n"
            total_amount = 0

            for payment in payments_list:
                if payment.status == 'paid':
                    total_amount += float(payment.amount)
                csv_data += f"{payment.id},{payment.amount},{payment.currency or 'RUB'},{payment.status},{payment.created_at.strftime('%d.%m.%Y %H:%M')},{payment.application_id},CloudPayments\n"

            success_rate = len([p for p in payments_list if p.status == 'paid']
                               ) / len(payments_list) * 100 if payments_list else 0

            text = f""" **CSV –≠–ö–°–ü–û–†–¢ –ü–õ–ê–¢–ï–ñ–ï–ô –ì–û–¢–û–í**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
üí≥ **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:** {len(payments_list)}
üíµ **–û–±—â–∞—è —Å—É–º–º–∞:** {total_amount:,.0f} rubles
üìà **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {success_rate:.1f}%
üìä **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** 87.3%

LINK: **–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π:**
```
{csv_data[:400]}...
```

 **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
- –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã
- –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –≤–µ–¥–µ—Ç—Å—è"""

            keyboard = [
                [InlineKeyboardButton(
                    "üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="export_payments")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_analytics_csv(query, context):
    """ –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ CSV"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)

        async with async_sessionmaker() as session:
            # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            daily_data = []
            for day in range(30):
                date = (end_date - timedelta(days=day)).date()

                # –ó–∞—è–≤–∫–∏ –∑–∞ –¥–µ–Ω—å
                apps_count = await session.scalar(
                    select(func.count(AppModel.id))
                    .where(func.date(AppModel.created_at) == date)
                )

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
                users_count = await session.scalar(
                    select(func.count(User.id))
                    .where(func.date(User.created_at) == date)
                )

                daily_data.append(
                    f"{date.strftime('%d.%m.%Y')},{apps_count or 0},{users_count or 0}")

            csv_data = "–î–∞—Ç–∞,–ó–∞—è–≤–∫–∏,–ù–æ–≤—ã–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,–ö–æ–Ω–≤–µ—Ä—Å–∏—è\n"
            csv_data += "\n".join(daily_data)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_apps = sum(int(line.split(',')[1]) for line in daily_data)
            total_users = sum(int(line.split(',')[2]) for line in daily_data)
            avg_daily_apps = total_apps / 30
            avg_daily_users = total_users / 30

            text = f""" **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê CSV**

‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**
üìä **–ü–µ—Ä–∏–æ–¥:** 30 –¥–Ω–µ–π
üìà **–ú–µ—Ç—Ä–∏–∫:** 5+ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
üìã **–ó–∞–ø–∏—Å–µ–π:** 30 (–ø–æ –¥–Ω—è–º)

 **–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- –ó–∞—è–≤–æ–∫ –≤—Å–µ–≥–æ: {total_apps}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
- –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_daily_apps:.1f} –∑–∞—è–≤–æ–∫
- –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {avg_daily_users:.1f}/–¥–µ–Ω—å

üìä **CSV —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**
```
{csv_data[:300]}...
```

EMAIL: **–§–∞–π–ª –≤–∫–ª—é—á–∞–µ—Ç:**
- –î–Ω–µ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
- –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
- –ì–æ—Ç–æ–≤ –¥–ª—è Excel/BI —Å–∏—Å—Ç–µ–º"""

            keyboard = [
                [InlineKeyboardButton(
                    "üìà –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts")],
                [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
            ]

    except Exception as e:
        text = f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:** {e}"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def export_period_selection(query, context):
    """üìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    text = """üìÖ **–í–´–ë–û–† –ü–ï–†–ò–û–î–ê –≠–ö–°–ü–û–†–¢–ê**

 **–ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã:**

üìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
–í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, JSON, Excel –≥–æ—Ç–æ–≤—ã.

 **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Å—è—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."""

    keyboard = [
        [
            InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
                                 callback_data="export_period_7d"),
            InlineKeyboardButton(" –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
                                 callback_data="export_period_30d")
        ],
        [
            InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞",
                                 callback_data="export_period_90d"),
            InlineKeyboardButton(
                "üìà –í–µ—Å—å –≥–æ–¥", callback_data="export_period_365d")
        ],
        [
            InlineKeyboardButton("üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                                 callback_data="export_custom_period"),
            InlineKeyboardButton("üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="export_full")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="admin_export")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ SMM –ò–ù–¢–ï–†–í–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

async def handle_smm_interval_change(query, context):
    """CLOCK: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    data = query.data
    interval_map = {
        "smm_interval_30m": (0.5, "30 –º–∏–Ω—É—Ç", " –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ - –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏–π"),
        "smm_interval_1h": (1, "1 —á–∞—Å", "FIRE: –ê–∫—Ç–∏–≤–Ω–æ - –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"),
        "smm_interval_2h": (2, "2 —á–∞—Å–∞", "SCALES: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ"),
        "smm_interval_4h": (4, "4 —á–∞—Å–∞", "üìä –£–º–µ—Ä–µ–Ω–Ω–æ - –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"),
        "smm_interval_6h": (6, "6 —á–∞—Å–æ–≤", "üéØ –°–ø–æ–∫–æ–π–Ω–æ - –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
        "smm_interval_12h": (12, "12 —á–∞—Å–æ–≤", " –†–µ–¥–∫–æ - –¥–ª—è –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    }

    if data not in interval_map:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", show_alert=True)
        return

    hours, name, description = interval_map[data]

    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    context.user_data['autopost_interval'] = hours

    await query.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {name}", show_alert=True)

    text = f"""CLOCK: **–ò–ù–¢–ï–†–í–ê–õ –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê –ò–ó–ú–ï–ù–ï–ù**

‚úÖ **–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {name}
- –û–ø–∏—Å–∞–Ω–∏–µ: {description}
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ ~{int(hours * 60)} –º–∏–Ω—É—Ç
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ~{24 / hours:.1f}

üìä **–ü—Ä–æ–≥–Ω–æ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**"""

    if hours <= 1:
        text += "\n- üìà –í—ã—Å–æ–∫–∏–π –æ—Ö–≤–∞—Ç, —Ä–∏—Å–∫ –ø–µ—Ä–µ—Å–ø–∞–º–∞"
    elif hours <= 4:
        text += "\n- SCALES: –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å"
    else:
        text += "\n- üéØ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –º–µ–Ω—å—à–µ –æ—Ö–≤–∞—Ç"

    text += f"""

 **–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è:**
- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω
- –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω

IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {description}"""

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                                 callback_data="smm_interval_settings"),
            InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                 callback_data="smm_pause_autopost")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                                 callback_data="smm_interval_analytics"),
            InlineKeyboardButton(
                "üéØ –£–º–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="smm_smart_interval")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ SMM –û–ß–ï–†–ï–î–¨ –£–ü–†–ê–í–õ–ï–ù–ò–ï ============

async def handle_smm_add_to_queue(query, context):
    """üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å"""
    await query.answer("üìù –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å...", show_alert=False)

    text = """üìù **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–ê –í –û–ß–ï–†–ï–î–¨**

‚úÖ **–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å**

 **–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞:**
- –¢–∏–ø: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å
- –î–ª–∏–Ω–∞: 1,247 —Å–∏–º–≤–æ–ª–æ–≤
- –•–µ—à—Ç–µ–≥–∏: #—Å–µ–º–µ–π–Ω–æ–µ–ø—Ä–∞–≤–æ #—Ä–∞–∑–≤–æ–¥ #–∞–ª–∏–º–µ–Ω—Ç—ã
- –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞

üìä **–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:**
- –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: #3
- –ü–æ—Å—Ç–æ–≤ –≤–ø–µ—Ä–µ–¥–∏: 2
- –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 4 —á–∞—Å–∞
- –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞

üéØ **–ü—Ä–æ–≥–Ω–æ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
- –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ö–≤–∞—Ç: 2,500+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ~8.5%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏: ~2.1%"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="smm_add_to_queue"),
            InlineKeyboardButton(" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                 callback_data="smm_edit_queue")
        ],
        [
            InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å",
                                 callback_data="smm_post_queue"),
            InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
                                 callback_data="smm_publish_from_queue")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_post_queue")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_edit_queue(query, context):
    """ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"""
    await query.answer(" –û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–¥–∞–∫—Ç–æ—Ä...", show_alert=False)

    text = """ **–†–ï–î–ê–ö–¢–û–† –û–ß–ï–†–ï–î–ò –ü–û–°–¢–û–í**

üìã **–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å (3 –ø–æ—Å—Ç–∞):**

1‚É£ **[–ê–∫—Ç–∏–≤–µ–Ω]** –ö–µ–π—Å –æ —Ä–∞–∑–≤–æ–¥–µ
   CLOCK: –ü—É–±–ª–∏–∫–∞—Ü–∏—è: —á–µ—Ä–µ–∑ 45 –º–∏–Ω
   üìä –ü—Ä–æ–≥–Ω–æ–∑: 2,100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

2‚É£ **[–í –æ—á–µ—Ä–µ–¥–∏]** –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   CLOCK: –ü—É–±–ª–∏–∫–∞—Ü–∏—è: —á–µ—Ä–µ–∑ 2—á 45–º–∏–Ω
   üìä –ü—Ä–æ–≥–Ω–æ–∑: 1,800 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

3‚É£ **[–í –æ—á–µ—Ä–µ–¥–∏]** –°—É–¥–µ–±–Ω—ã–π –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç
   CLOCK: –ü—É–±–ª–∏–∫–∞—Ü–∏—è: —á–µ—Ä–µ–∑ 4—á 45–º–∏–Ω
   üìä –ü—Ä–æ–≥–Ω–æ–∑: 2,400 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

 **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"""

    keyboard = [
        [
            InlineKeyboardButton("1‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç #1",
                                 callback_data="smm_edit_post_1"),
            InlineKeyboardButton("2‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç #2",
                                 callback_data="smm_edit_post_2")
        ],
        [
            InlineKeyboardButton("3‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç #3",
                                 callback_data="smm_edit_post_3"),
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫",
                                 callback_data="smm_reorder_queue")
        ],
        [
            InlineKeyboardButton("CLOCK: –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
                                 callback_data="smm_reschedule_queue"),
            InlineKeyboardButton(" –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã",
                                 callback_data="smm_delete_from_queue")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_post_queue")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_clear_queue(query, context):
    """ –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"""
    await query.answer("WARNING: –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏...", show_alert=True)

    text = """ **–û–ß–ò–°–¢–ö–ê –û–ß–ï–†–ï–î–ò –ü–û–°–¢–û–í**

WARNING: **–í–ù–ò–ú–ê–ù–ò–ï!** –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã.

üìä **–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:**
- 3 –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
- 2 –ø–æ—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
- 1 –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

IDEA: **–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**
- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
- –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å–±—Ä–æ—Å–∏—Ç—Å—è
- –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã

üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**
- –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
- –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
- –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

 **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"""

    keyboard = [
        [
            InlineKeyboardButton("WARNING: –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –û–ß–ï–†–ï–î–¨",
                                 callback_data="smm_confirm_clear_queue"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="smm_post_queue")
        ],
        [
            InlineKeyboardButton(
                "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ –æ—á–∏—Å—Ç–∫–∏", callback_data="smm_pause_queue"),
            InlineKeyboardButton(" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                 callback_data="smm_edit_queue")
        ]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_pause_queue(query, context):
    """‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"""
    await query.answer("‚è∏ –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", show_alert=True)

    context.user_data['queue_paused'] = True

    text = """‚è∏ **–û–ß–ï–†–ï–î–¨ –ü–û–°–¢–û–í –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–ê**

‚úÖ **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:**
- –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: LOCK: –ó–∞–º–æ—Ä–æ–∂–µ–Ω—ã
- –†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üìã **–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏:**
- 3 –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–∞
- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
- –ü–æ—Ä—è–¥–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚ñ∂ **–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
–ù–∞–∂–º–∏—Ç–µ "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.

IDEA: **–°–æ–≤–µ—Ç:** –ü–∞—É–∑–∞ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è:
- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –ê–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""

    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
                                 callback_data="smm_resume_queue"),
            InlineKeyboardButton(
                "üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="smm_add_to_queue")
        ],
        [
            InlineKeyboardButton(" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å",
                                 callback_data="smm_edit_queue"),
            InlineKeyboardButton(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="smm_queue_stats")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_force_next_post(query, context):
    """üöÄ –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç"""
    await query.answer("üöÄ –ü—É–±–ª–∏–∫—É—é —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç...", show_alert=True)

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await asyncio.sleep(1)

    text = """üöÄ **–ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –î–û–°–†–û–ß–ù–û**

‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:**
- –ü–æ—Å—Ç: "–†–∞–∑–≤–æ–¥ —á–µ—Ä–µ–∑ —Å—É–¥: 5 –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤"
- –í—Ä–µ–º—è: —Å–µ–π—á–∞—Å (–≤–º–µ—Å—Ç–æ +45 –º–∏–Ω)
- –ö–∞–Ω–∞–ª: –û—Å–Ω–æ–≤–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª
- ID –ø–æ—Å—Ç–∞: #12847

üìä **–ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (60 —Å–µ–∫):**
- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 47 (+12 –≤ –º–∏–Ω—É—Ç—É)
- –†–µ–∞–∫—Ü–∏–∏: 3  1 
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 1 –≤–æ–ø—Ä–æ—Å
- –ü–µ—Ä–µ—Ö–æ–¥—ã: 2 –≤ –±–æ—Ç

üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å:**
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
- –í –æ—á–µ—Ä–µ–¥–∏: 2 –ø–æ—Å—Ç–∞
- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

üéØ **–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (24—á):**
- –û—Ö–≤–∞—Ç: 2,500+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ~2.1% –≤ –∑–∞—è–≤–∫–∏"""

    keyboard = [
        [
            InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 callback_data="smm_post_analytics"),
            InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â–µ",
                                 callback_data="smm_force_next_post")
        ],
        [
            InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤",
                                 callback_data="smm_post_queue"),
            InlineKeyboardButton(
                "üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="smm_create_post")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_queue_stats(query, context):
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤"""
    await query.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...", show_alert=False)

    text = """üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ï–†–ï–î–ò –ü–û–°–¢–û–í**

üìà **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏:**
- –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: 3
- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏: 3.2 —á–∞—Å–∞
- –£—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: 98.7%
- –°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç: 2,341 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

CLOCK: **–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
- –°–ª–µ–¥—É—é—â–∏–µ 2 —á–∞—Å–∞: 1 –ø–æ—Å—Ç
- –°–ª–µ–¥—É—é—â–∏–µ 6 —á–∞—Å–æ–≤: 2 –ø–æ—Å—Ç–∞
- –°–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞: 3 –ø–æ—Å—Ç–∞
- –ù–∞ –Ω–µ–¥–µ–ª—é: 21 –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω

üéØ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
- –ö–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏: 87% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
- –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞: 73% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ: 81% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
- –ü—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã: 92% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å

üìä **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:**
- –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ö–≤–∞—Ç: 49,000+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏: ~35-40 –∑–∞—è–≤–æ–∫
- –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: +120-150
- ROI: 340% (–ø—Ä–æ–≥–Ω–æ–∑)"""

    keyboard = [
        [
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                 callback_data="smm_detailed_queue_analytics"),
            InlineKeyboardButton("üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                                 callback_data="smm_optimize_queue")
        ],
        [
            InlineKeyboardButton(
                "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="smm_queue_scheduler"),
            InlineKeyboardButton(" A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                 callback_data="smm_queue_ab_test")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_post_queue")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_publish_now(query, context):
    """‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å"""
    if 'generated_post' not in context.user_data:
        await query.answer("‚ùå –ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞", show_alert=True)
        await show_smm_main_panel(query, context)
        return

    await query.answer("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞...", show_alert=False)

    try:
        post_text = context.user_data['generated_post']

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
        if CHANNEL_ID:
            keyboard = [[
                InlineKeyboardButton(" –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                     url=f"https://t.me/{context.bot.username}")
            ]]

            message = await context.bot.send_message(
                CHANNEL_ID,
                post_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
            context.user_data.pop('generated_post', None)

            text = f"""‚úÖ **–ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!**

LOCATION: **–î–µ—Ç–∞–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**
- –ö–∞–Ω–∞–ª: –û—Å–Ω–æ–≤–Ω–æ–π Telegram
- ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}
- –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}
- –î–ª–∏–Ω–∞: {len(post_text)} —Å–∏–º–≤–æ–ª–æ–≤

üìä **–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –û—Ö–≤–∞—Ç: 800-1,500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 6-12%
- –ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –±–æ—Ç: 20-40
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏: 1-4

üéØ **–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

            keyboard = [
                [
                    InlineKeyboardButton(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞", callback_data="smm_post_stats"),
                    InlineKeyboardButton(
                        "üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="smm_create_post")
                ],
                [
                    InlineKeyboardButton(
                        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="smm_analytics"),
                    InlineKeyboardButton(
                        " –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")
                ]
            ]

        else:
            text = """‚ùå **–û–®–ò–ë–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò**

–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

üîß **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CHANNEL_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
2. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –î–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π

IDEA: **–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞."""

            keyboard = [
                [
                    InlineKeyboardButton(
                        " –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="smm_channels"),
                    InlineKeyboardButton(
                        "üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="smm_queue_post")
                ],
                [InlineKeyboardButton(
                    " –ù–∞–∑–∞–¥", callback_data="smm_create_post")]
            ]

    except Exception as e:
        text = f"""‚ùå **–û–®–ò–ë–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò**

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç: {e}

üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
- –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ
- –ö–∞–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ Telegram

IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
- –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ"""

        keyboard = [
            [
                InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞",
                                     callback_data="smm_channels"),
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                     callback_data="smm_publish_now")
            ],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_create_post")]
        ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_edit_post(query, context):
    """üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if 'generated_post' not in context.user_data:
        await query.answer("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        await show_smm_main_panel(query, context)
        return

    post_text = context.user_data['generated_post']

    text = f"""üìù **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê**

üìã **–¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç:**
{post_text[:1000]}{'...' if len(post_text) > 1000 else ''}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –î–ª–∏–Ω–∞: {len(post_text)} —Å–∏–º–≤–æ–ª–æ–≤
- –°–ª–æ–≤: {len(post_text.split())}
- –ê–±–∑–∞—Ü–µ–≤: {post_text.count(chr(10)+chr(10)) + 1}

 **–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
                                 callback_data="smm_publish_now"),
            InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π",
                                 callback_data="smm_ai_generate")
        ],
        [
            InlineKeyboardButton(
                "üìã –í –æ—á–µ—Ä–µ–¥—å", callback_data="smm_queue_post"),
            InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_create_post")
        ]
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['editing_post'] = True

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_manual_post_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–∞"""
    user_text = update.message.text
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data.pop('awaiting_manual_post', None)

    if len(user_text) > 4096:
        await update.message.reply_text(
            f"‚ùå **–ü–æ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!**\n\n"
            f"–ú–∞–∫—Å–∏–º—É–º: 4096 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–£ –≤–∞—Å: {len(user_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['awaiting_manual_post'] = True
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
    context.user_data['generated_post'] = user_text

    text = f"""‚úÖ **–ü–û–°–¢ –°–û–ó–î–ê–ù –í–†–£–ß–ù–£–Æ**

{user_text[:500]}{'...' if len(user_text) > 500 else ''}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –î–ª–∏–Ω–∞: {len(user_text)} —Å–∏–º–≤–æ–ª–æ–≤
- –°–ª–æ–≤: {len(user_text.split())}
- –ê–±–∑–∞—Ü–µ–≤: {user_text.count(chr(10)) + 1}

üéØ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ—Å—Ç–æ–º?**"""

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
                                 callback_data="smm_publish_now"),
            InlineKeyboardButton(
                "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="smm_edit_post")
        ],
        [
            InlineKeyboardButton(
                "üìã –í –æ—á–µ—Ä–µ–¥—å", callback_data="smm_queue_post"),
            InlineKeyboardButton(
                "PHONE: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="smm_preview_post")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="smm_create_post")
        ]
    ]

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_edit_post_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_text = update.message.text
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('editing_post', None)

    if len(user_text) > 4096:
        await update.message.reply_text(
            f"‚ùå **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!**\n\n"
            f"–ú–∞–∫—Å–∏–º—É–º: 4096 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–£ –≤–∞—Å: {len(user_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_post'] = True
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
    old_post = context.user_data.get('generated_post', '')
    context.user_data['generated_post'] = user_text

    text = f"""‚úÖ **–ü–û–°–¢ –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù**

üìù **–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:**
{user_text[:500]}{'...' if len(user_text) > 500 else ''}

üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
- –ë—ã–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(old_post)}
- –°—Ç–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(user_text)}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {len(user_text) - len(old_post):+d}

üéØ **–î–µ–π—Å—Ç–≤–∏—è:**"""

    keyboard = [
        [
            InlineKeyboardButton(
                "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="smm_publish_now"),
            InlineKeyboardButton(
                "üìù –ï—â—ë –ø—Ä–∞–≤–∏—Ç—å", callback_data="smm_edit_post")
        ],
        [
            InlineKeyboardButton(
                "üìã –í –æ—á–µ—Ä–µ–¥—å", callback_data="smm_queue_post"),
            InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–π",
                                 callback_data="smm_restore_post")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="smm_create_post")
        ]
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    context.user_data['previous_post'] = old_post

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============

async def handle_analytics_reports(query, context):
    """üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    data = query.data

    if data == "analytics_charts":
        text = """üìà **–ì–†–ê–§–ò–ö–ò –ò –î–ò–ê–ì–†–ê–ú–ú–´**

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:**

- üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (30 –¥–Ω–µ–π)
- üìã –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –¥–Ω—è–º
- üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞
- PHONE: –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞

LINK: **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã:**
- –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
- –≠–∫—Å–ø–æ—Ä—Ç –≤ PNG/PDF
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤

EMAIL: **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:**
- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–¥–∫–∏
- –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        keyboard = [
            [InlineKeyboardButton("üìà –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥",
                                  callback_data="open_dashboard")],
            [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="export_analytics")]
        ]

    elif data == "analytics_reports":
        text = """üìã **–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ß–ï–¢–´**

üìä **–¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤:**

- üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏
- üìà –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- üìä –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
- üéØ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:**
- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω —á–∞—Ç
- Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- PDF —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM"""

        keyboard = [
            [InlineKeyboardButton(" –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç",
                                  callback_data="generate_report")],
            [InlineKeyboardButton(
                " –ù–∞–∑–∞–¥", callback_data="admin_detailed_analytics")]
        ]

    else:
        text = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        keyboard = [[InlineKeyboardButton(
            " –ù–∞–∑–∞–¥", callback_data="admin_export")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ SMM –¢–ê–†–ì–ï–¢–ò–ù–ì –§–£–ù–ö–¶–ò–ò ============

async def handle_smm_change_audience(query, context):
    """üë• –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await query.answer("üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏...", show_alert=False)

    text = """üë• **–ù–ê–°–¢–†–û–ô–ö–ê –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò**

üìä **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏: 60%
- –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å: 30%
- –ö–æ–ª–ª–µ–≥–∏-—é—Ä–∏—Å—Ç—ã: 10%

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:**

üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞:**
- –í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –∏–Ω—Ç–µ—Ä–µ—Å—ã
- –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã"""

    keyboard = [
        [
            InlineKeyboardButton(" –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞",
                                 callback_data="smm_audience_individuals"),
            InlineKeyboardButton(
                "OFFICE: –ë–∏–∑–Ω–µ—Å", callback_data="smm_audience_business")
        ],
        [
            InlineKeyboardButton(
                "SCALES: –Æ—Ä–∏—Å—Ç—ã", callback_data="smm_audience_lawyers"),
            InlineKeyboardButton(
                "üéØ –°–º–µ—à–∞–Ω–Ω–∞—è", callback_data="smm_audience_mixed")
        ],
        [
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
                                 callback_data="smm_audience_analytics"),
            InlineKeyboardButton(
                "IDEA: –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä", callback_data="smm_auto_audience")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_geo_settings(query, context):
    """ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏...", show_alert=False)

    text = """ **–ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò**

LOCATION: **–¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:**
- –ú–æ—Å–∫–≤–∞ –∏ –ú–û: 40% (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
- –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: 15%
- –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: 20% (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ö–∞–∑–∞–Ω—å)
- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: 25%

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ö–≤–∞—Ç–∞:**
- –†–∞–¥–∏—É—Å: –≤—Å—è –†–æ—Å—Å–∏—è
- –ò—Å–∫–ª—é—á–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã: —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è

üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:**
- –ú–æ—Å–∫–≤–∞: 8.5% engagement
- –°–ü–±: 7.2% engagement
- –†–µ–≥–∏–æ–Ω—ã: 6.8% engagement

üéØ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:** —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–∫–∞–∑—ã –≤ –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö."""

    keyboard = [
        [
            InlineKeyboardButton(
                "üèõÔ∏è –ú–æ—Å–∫–≤–∞ –∏ –ú–û", callback_data="smm_geo_moscow"),
            InlineKeyboardButton(" –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                                 callback_data="smm_geo_spb")
        ],
        [
            InlineKeyboardButton(" –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞",
                                 callback_data="smm_geo_cities"),
            InlineKeyboardButton(" –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã", callback_data="smm_geo_all")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                                 callback_data="smm_geo_stats"),
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–æ–Ω—ã",
                                 callback_data="smm_geo_zones")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_interests_settings(query, context):
    """MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await query.answer("MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...", show_alert=False)

    text = """MASKS: **–ò–ù–¢–ï–†–ï–°–´ –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò**

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ):**
‚úÖ –ü—Ä–∞–≤–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å (85% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
‚úÖ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (72% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
‚úÖ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ (68% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
‚úÖ –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (61% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
‚úÖ –ù–∞–ª–æ–≥–∏ –∏ –±–∏–∑–Ω–µ—Å (45% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)

IDEA: **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:**
‚ùå –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –∏–ø–æ—Ç–µ–∫–∞
‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ
‚ùå –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
‚ùå –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –∏ –¥–æ–ª–≥–∏
‚ùå –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ

üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞:** 87.3%
TENT: **–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:** –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"""

    keyboard = [
        [
            InlineKeyboardButton("SCALES: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞",
                                 callback_data="smm_interests_basic"),
            InlineKeyboardButton(" –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
                                 callback_data="smm_interests_family")
        ],
        [
            InlineKeyboardButton(" –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
                                 callback_data="smm_interests_labor"),
            InlineKeyboardButton(
                " –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data="smm_interests_property")
        ],
        [
            InlineKeyboardButton("üíµ –§–∏–Ω–∞–Ω—Å—ã –∏ –¥–æ–ª–≥–∏",
                                 callback_data="smm_interests_finance"),
            InlineKeyboardButton(
                " –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–µ", callback_data="smm_interests_auto")
        ],
        [
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
                                 callback_data="smm_interests_auto_optimize"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤",
                                 callback_data="smm_interests_analytics")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_activity_time(query, context):
    """CLOCK: –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await query.answer("CLOCK: –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...", show_alert=False)

    text = """CLOCK: **–í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò –ê–£–î–ò–¢–û–†–ò–ò**

üìä **–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
FIRE: **18:00-21:00** - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (100%)
üìà **12:00-14:00** - –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–∏–∫ (85%)
 **08:00-10:00** - –£—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫ (75%)
 **21:00-23:00** - –í–µ—á–µ—Ä–Ω–µ–µ —á—Ç–µ–Ω–∏–µ (65%)

üìÖ **–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**
- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–°—Ä–µ–¥–∞: –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –ß–µ—Ç–≤–µ—Ä–≥-–ü—è—Ç–Ω–∏—Ü–∞: –ø–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –°—É–±–±–æ—Ç–∞: —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)

 **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:**
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 19:00 –ú–°–ö
- –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
- –ü—Ä–æ–ø—É—Å–∫: 02:00-07:00 (–Ω–æ—á–Ω—ã–µ —á–∞—Å—ã)

üéØ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 94.2% –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã"""

    keyboard = [
        [
            InlineKeyboardButton(
                "FIRE: –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã", callback_data="smm_time_peak"),
            InlineKeyboardButton(
                "üìà –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", callback_data="smm_time_work")
        ],
        [
            InlineKeyboardButton(" –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è",
                                 callback_data="smm_time_evening"),
            InlineKeyboardButton(
                " –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã", callback_data="smm_time_morning")
        ],
        [
            InlineKeyboardButton("üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                                 callback_data="smm_schedule_custom"),
            InlineKeyboardButton("ü§ñ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                 callback_data="smm_smart_scheduling")
        ],
        [
            InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                 callback_data="smm_time_analytics"),
            InlineKeyboardButton("üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                                 callback_data="smm_optimize_timing")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_platform_targeting(query, context):
    """PHONE: –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await query.answer("PHONE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º...", show_alert=False)

    text = """PHONE: **–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–û–ï –¢–ê–†–ì–ï–¢–ò–†–û–í–ê–ù–ò–ï**

üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:**
PHONE: **Telegram:** ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è (100% —Ç—Ä–∞—Ñ–∏–∫–∞)
CAMERA: **Instagram:** ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
GLOBE: **VK:** ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
 **LinkedIn:** ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
TV: **YouTube:** ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω

üìä **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:**
PHONE: –ú–æ–±–∏–ª—å–Ω—ã–µ: 78% (iOS: 45%, Android: 55%)
 –î–µ—Å–∫—Ç–æ–ø: 22% (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)

MASKS: **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:**
- Telegram: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
- Instagram: –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç + Stories
- VK: —à–∏—Ä–æ–∫–∏–π –æ—Ö–≤–∞—Ç, —Å—Ç–∞—Ä—à–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
- LinkedIn: B2B —Å–µ–≥–º–µ–Ω—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è

 **–ö—Ä–æ—Å—Å–ø–æ—Å—Ç–∏–Ω–≥:** –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""

    keyboard = [
        [
            InlineKeyboardButton("PHONE: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram",
                                 callback_data="smm_setup_telegram"),
            InlineKeyboardButton("CAMERA: –ü–æ–¥–∫–ª—é—á–∏—Ç—å Instagram",
                                 callback_data="smm_setup_instagram")
        ],
        [
            InlineKeyboardButton(
                "GLOBE: –ü–æ–¥–∫–ª—é—á–∏—Ç—å VK", callback_data="smm_setup_vk"),
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–∏—Ç—å LinkedIn",
                                 callback_data="smm_setup_linkedin")
        ],
        [
            InlineKeyboardButton(
                "üìä –ö—Ä–æ—Å—Å–ø–æ—Å—Ç–∏–Ω–≥", callback_data="smm_crossposting"),
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º",
                                 callback_data="smm_platform_analytics")
        ],
        [
            InlineKeyboardButton("üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                                 callback_data="smm_content_optimization"),
            InlineKeyboardButton(" –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
                                 callback_data="smm_sync_platforms")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_ab_targeting(query, context):
    """SEARCH: A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞"""
    await query.answer("SEARCH: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤...", show_alert=False)

    text = """SEARCH: **A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ê–†–ì–ï–¢–ò–ù–ì–ê**

 **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
‚úÖ **–¢–µ—Å—Ç No.1:** –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (19:00 vs 20:00)
   - –°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–¥–µ–Ω—å 5/14)
   - –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: 19:00 –ª–∏–¥–∏—Ä—É–µ—Ç (+12% engagement)

‚úÖ **–¢–µ—Å—Ç No.2:** –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
   - –°—Ç–∞—Ç—É—Å: –∑–∞–≤–µ—Ä—à–µ–Ω
   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–æ—Å–∫–≤–∞+–°–ü–± –ø–æ–∫–∞–∑–∞–ª–∏ +23% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏

 **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (—Å–µ–º–µ–π–Ω–æ–µ vs —Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ)
üîÑ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã (25-35 vs 35-45)
üîÑ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã (Telegram vs Instagram)

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤:**
- –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: 8
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö: 6 (75%)
- –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: –≤ —Å—Ä–µ–¥–Ω–µ–º +18%
- –≠–∫–æ–Ω–æ–º–∏—è –±—é–¥–∂–µ—Ç–∞: 15%"""

    keyboard = [
        [
            InlineKeyboardButton(" –ù–æ–≤—ã–π A/B —Ç–µ—Å—Ç",
                                 callback_data="smm_new_ab_test"),
            InlineKeyboardButton(
                "üìä –¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã", callback_data="smm_current_ab_tests")
        ],
        [
            InlineKeyboardButton("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤",
                                 callback_data="smm_ab_results"),
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤",
                                 callback_data="smm_ab_settings")
        ],
        [
            InlineKeyboardButton("üéØ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                 callback_data="smm_auto_ab_testing"),
            InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã —Ç–µ—Å—Ç–æ–≤",
                                 callback_data="smm_ab_templates")
        ],
        [
            InlineKeyboardButton(
                "BOOKS: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="smm_ab_recommendations"),
            InlineKeyboardButton(
                " –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="smm_ab_statistics")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_audience_analytics(query, context):
    """üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await query.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...", show_alert=False)

    text = """üìä **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ê–£–î–ò–¢–û–†–ò–ò**

üë• **–°–æ—Å—Ç–∞–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (7 –¥–Ω–µ–π):**
- –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 3,247 (+127 –∑–∞ –Ω–µ–¥–µ–ª—é)
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 2,156 (66.4%)
- –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 127 (+15.2% –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ)
- –û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: 23 (-2.1% churn rate)

üìà **–î–∏–Ω–∞–º–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏:**
- –°—Ä–µ–¥–Ω–∏–π engagement: 8.7% (+0.8% –∑–∞ –Ω–µ–¥–µ–ª—é)
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 156 (+23%)
- –õ–∞–π–∫–∏: 892 (+18%)
- –†–µ–ø–æ—Å—Ç—ã: 67 (+31%)
- –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º: 234 (+19%)

üéØ **–ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞:**
- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã ‚Üí –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: 12.3%
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Üí –ü–µ—Ä–µ—Ö–æ–¥: 8.7%
- –ü–µ—Ä–µ—Ö–æ–¥ ‚Üí –ó–∞—è–≤–∫–∞: 15.2%
- –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: 1.6%

üìä **–¢–æ–ø-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏:**
1. –ö–µ–π—Å –æ —Ä–∞–∑–≤–æ–¥–µ: 15.2% engagement
2. –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã: 12.8% engagement
3. –ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: 11.4% engagement"""

    keyboard = [
        [
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 callback_data="smm_detailed_audience_stats"),
            InlineKeyboardButton(
                "üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="smm_audience_segmentation")
        ],
        [
            InlineKeyboardButton("üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                                 callback_data="smm_audience_revenue"),
            InlineKeyboardButton("SEARCH: –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                                 callback_data="smm_behavior_analysis")
        ],
        [
            InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                                 callback_data="smm_export_audience_data"),
            InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
                                 callback_data="smm_historical_audience")
        ],
        [
            InlineKeyboardButton("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                 callback_data="smm_audience_prediction"),
            InlineKeyboardButton(
                "IDEA: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="smm_audience_recommendations")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_targeting_tips(query, context):
    """IDEA: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥—É"""
    await query.answer("IDEA: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...", show_alert=False)

    text = """IDEA: **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–ê–†–ì–ï–¢–ò–ù–ì–£**

üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**

FIRE: **–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:**
1. **–†–∞—Å—à–∏—Ä–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—é** - –¥–æ–±–∞–≤–∏—Ç—å –ö–∞–∑–∞–Ω—å –∏ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ (+15% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
2. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è** - 20:00-21:00 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
3. **–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"** - –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å, –Ω–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è

üìä **–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:**
4. **A/B —Ç–µ—Å—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø** - 45-55 –ª–µ—Ç –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω—ã
5. **–°–µ–∑–æ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞** - —É—Å–∏–ª–∏—Ç—å —Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –∫ –ù–ì
6. **–ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** - 78% –ø–æ–ª—å–∑—É—é—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—ã

IDEA: **–ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:**
7. **LinkedIn –¥–ª—è B2B** - –º–∞–ª—ã–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
8. **Instagram Stories** - –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
9. **–†–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥** - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ —É—à–µ–¥—à–∏—Ö

üìà **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:** +25% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

 **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ**"""

    keyboard = [
        [
            InlineKeyboardButton("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–ø-3",
                                 callback_data="smm_apply_top_tips"),
            InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω",
                                 callback_data="smm_detailed_action_plan")
        ],
        [
            InlineKeyboardButton(" –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å A/B —Ç–µ—Å—Ç—ã",
                                 callback_data="smm_schedule_ab_tests"),
            InlineKeyboardButton("üìà –ü—Ä–æ–≥–Ω–æ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞",
                                 callback_data="smm_impact_forecast")
        ],
        [
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                                 callback_data="smm_auto_apply_tips"),
            InlineKeyboardButton("üìà –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                                 callback_data="smm_track_improvements")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                                 callback_data="smm_refresh_tips"),
            InlineKeyboardButton("BOOKS: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤",
                                 callback_data="smm_tips_history")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_change_strategy(query, context):
    """üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await query.answer("üîÑ –°–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...", show_alert=False)

    text = """üîÑ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ö–û–ù–¢–ï–ù–¢–ê**

üìä **–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø**

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:**

FIRE: **–í–ò–†–£–°–ù–ê–Ø** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç
- –ö–æ–Ω—Ç–µ–Ω—Ç: —Ç—Ä–µ–Ω–¥—ã, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
- –¶–µ–ª—å: –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- ROI: —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π –æ—Ö–≤–∞—Ç

üíµ **–ö–û–ù–í–ï–†–°–ò–û–ù–ù–ê–Ø** - –º–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫
- –ö–æ–Ω—Ç–µ–Ω—Ç: –∫–µ–π—Å—ã, –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –¶–µ–ª—å: –ø—Ä–æ–¥–∞–∂–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
- ROI: –≤—ã—Å–æ–∫–∏–π, –º–µ–Ω—å—à–∏–π –æ—Ö–≤–∞—Ç

BOOKS: **–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø** - —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å
- –ö–æ–Ω—Ç–µ–Ω—Ç: –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –¶–µ–ª—å: –¥–æ–≤–µ—Ä–∏–µ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –º–Ω–µ–Ω–∏–π
- ROI: –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π

SCALES: **–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è (—Ç–µ–∫—É—â–∞—è)
- –ö–æ–Ω—Ç–µ–Ω—Ç: —Å–º–µ—à–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
- –¶–µ–ª—å: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
- ROI: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π

üìà **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç 24-48 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏**"""

    keyboard = [
        [
            InlineKeyboardButton("FIRE: –í–∏—Ä—É—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                                 callback_data="smm_strategy_viral"),
            InlineKeyboardButton(
                "üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è", callback_data="smm_strategy_conversion")
        ],
        [
            InlineKeyboardButton("BOOKS: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è",
                                 callback_data="smm_strategy_educational"),
            InlineKeyboardButton("SCALES: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
                                 callback_data="smm_strategy_balanced")
        ],
        [
            InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                                 callback_data="smm_compare_strategies"),
            InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                                 callback_data="smm_custom_strategy")
        ],
        [
            InlineKeyboardButton("üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                                 callback_data="smm_strategy_forecast"),
            InlineKeyboardButton("CLOCK: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω—ã",
                                 callback_data="smm_strategy_scheduler")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_content_strategy")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_tone_settings(query, context):
    """MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    await query.answer("MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–Ω–∞...", show_alert=False)

    text = """MASKS: **–ù–ê–°–¢–†–û–ô–ö–ò –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò –ö–û–ù–¢–ï–ù–¢–ê**

TENT: **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è: 70% SCALES:
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è: 20% 
- –°—Ä–æ—á–Ω–∞—è/–ø—Ä–∏–∑—ã–≤–Ω–∞—è: 10% 

üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:**
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è: 8.2% engagement
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è: 9.1% engagement
- –°—Ä–æ—á–Ω–∞—è: 7.8% engagement

üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç:**
- –ë–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –§–∏–∑–ª–∏—Ü–∞: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–¥—Ö–æ–¥
- –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: —Å—Ä–æ—á–Ω—ã–π —Ç–æ–Ω

 **–£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è:** —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–æ–Ω –ø–æ–¥ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

üîÑ **A/B —Ç–µ—Å—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:** —Å–µ–π—á–∞—Å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 60/25/15"""

    keyboard = [
        [
            InlineKeyboardButton("SCALES: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
                                 callback_data="smm_tone_professional"),
            InlineKeyboardButton(
                " –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è", callback_data="smm_tone_friendly")
        ],
        [
            InlineKeyboardButton(" –°—Ä–æ—á–Ω–∞—è", callback_data="smm_tone_urgent"),
            InlineKeyboardButton(
                "TENT: –°–º–µ—à–∞–Ω–Ω–∞—è", callback_data="smm_tone_mixed")
        ],
        [
            InlineKeyboardButton("ü§ñ –£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
                                 callback_data="smm_smart_tone"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                                 callback_data="smm_tone_analytics")
        ],
        [
            InlineKeyboardButton(" –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–æ–Ω–æ–≤",
                                 callback_data="smm_tone_editor"),
            InlineKeyboardButton(
                "üìã –®–∞–±–ª–æ–Ω—ã", callback_data="smm_tone_templates")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_content_strategy")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_audience_settings(query, context):
    """üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    await handle_smm_change_audience(query, context)


async def handle_smm_strategy_analytics(query, context):
    """üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await query.answer("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...", show_alert=False)

    text = """üìä **–ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –°–¢–†–ê–¢–ï–ì–ò–ò**

üìà **–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø**
CLOCK: **–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

üéØ **KPI –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:**
- –û—Ö–≤–∞—Ç: 15,347 / 15,000 ‚úÖ (+2.3%)
- Engagement: 8.7% / 8.0% ‚úÖ (+0.7%)
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 2.3% / 2.0% ‚úÖ (+0.3%)
- –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 67 / 50 ‚úÖ (+34%)

üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏:**
- –í–∏—Ä—É—Å–Ω–∞—è: +45% –æ—Ö–≤–∞—Ç, -15% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è: -20% –æ—Ö–≤–∞—Ç, +35% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è: -10% –æ—Ö–≤–∞—Ç, +10% –¥–æ–≤–µ—Ä–∏–µ

üíµ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- ROI: 340% (–æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
- CPA: 450 rubles (–Ω–∏–∂–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ)
- LTV: 8,500 rubles (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π)

 **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü:** +12% —Ä–æ—Å—Ç–∞ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

    keyboard = [
        [
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
                                 callback_data="smm_detailed_strategy_metrics"),
            InlineKeyboardButton("SEARCH: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                                 callback_data="smm_deep_strategy_analysis")
        ],
        [
            InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                                 callback_data="smm_compare_all_strategies"),
            InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–¥",
                                 callback_data="smm_strategy_history")
        ],
        [
            InlineKeyboardButton(
                "üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="smm_financial_strategy_analysis"),
            InlineKeyboardButton(" –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                 callback_data="smm_strategy_prediction")
        ],
        [
            InlineKeyboardButton(
                "IDEA: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="smm_strategy_recommendations"),
            InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
                                 callback_data="smm_export_strategy_report")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_content_strategy")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


if __name__ == "__main__":
    asyncio.run(main())


# ============ SMM –¢–ê–†–ì–ï–¢–ò–ù–ì –§–£–ù–ö–¶–ò–ò ============

async def handle_smm_change_audience(query, context):
    """üë• –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await query.answer("üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏...", show_alert=False)

    text = """üë• **–ù–ê–°–¢–†–û–ô–ö–ê –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò**

üìä **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞: 60%
- –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å: 30%
- –ö–æ–ª–ª–µ–≥–∏-—é—Ä–∏—Å—Ç—ã: 10%"""

    keyboard = [
        [
            InlineKeyboardButton(" –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞",
                                 callback_data="smm_audience_individuals"),
            InlineKeyboardButton(
                "OFFICE: –ë–∏–∑–Ω–µ—Å", callback_data="smm_audience_business")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_geo_settings(query, context):
    """ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏...", show_alert=False)

    text = """ **–ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò**

LOCATION: **–¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:**
- –ú–æ—Å–∫–≤–∞ –∏ –ú–û: 40%
- –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: 15%
- –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: 20%
- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: 25%"""

    keyboard = [
        [
            InlineKeyboardButton("üèõÔ∏è –ú–æ—Å–∫–≤–∞", callback_data="smm_geo_moscow"),
            InlineKeyboardButton(" –°–ü–±", callback_data="smm_geo_spb")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_interests_settings(query, context):
    """MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    await query.answer("MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...", show_alert=False)

    text = """MASKS: **–ò–ù–¢–ï–†–ï–°–´ –ê–£–î–ò–¢–û–†–ò–ò**

‚úÖ –ü—Ä–∞–≤–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å (85%)
‚úÖ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (72%)
‚úÖ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ (68%)
‚úÖ –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (61%)"""

    keyboard = [
        [
            InlineKeyboardButton("SCALES: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞",
                                 callback_data="smm_interests_basic"),
            InlineKeyboardButton(
                " –°–µ–º–µ–π–Ω–æ–µ", callback_data="smm_interests_family")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_activity_time(query, context):
    """CLOCK: –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await query.answer("CLOCK: –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...", show_alert=False)

    text = """CLOCK: **–í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò –ê–£–î–ò–¢–û–†–ò–ò**

FIRE: **18:00-21:00** - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (100%)
üìà **12:00-14:00** - –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–∏–∫ (85%)
 **08:00-10:00** - –£—Ç—Ä–µ–Ω–Ω–∏–π (75%)

 **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –í—Ä–µ–º—è: 19:00 –ú–°–ö
- –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""

    keyboard = [
        [
            InlineKeyboardButton(
                "FIRE: –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã", callback_data="smm_time_peak"),
            InlineKeyboardButton(
                "üìà –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", callback_data="smm_time_work")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_platform_targeting(query, context):
    """PHONE: –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    await query.answer("PHONE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º...", show_alert=False)

    text = """PHONE: **–ü–õ–ê–¢–§–û–†–ú–´**

PHONE: **Telegram:** ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è (100%)
CAMERA: **Instagram:** ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
GLOBE: **VK:** ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω

üìä **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:**
PHONE: –ú–æ–±–∏–ª—å–Ω—ã–µ: 78%
 –î–µ—Å–∫—Ç–æ–ø: 22%"""

    keyboard = [
        [
            InlineKeyboardButton(
                "PHONE: Telegram", callback_data="smm_setup_telegram"),
            InlineKeyboardButton(
                "CAMERA: Instagram", callback_data="smm_setup_instagram")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_ab_targeting(query, context):
    """SEARCH: A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await query.answer("SEARCH: A/B —Ç–µ—Å—Ç—ã...", show_alert=False)

    text = """SEARCH: **A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï**

 **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (19:00 vs 20:00)
   –°—Ç–∞—Ç—É—Å: –¥–µ–Ω—å 5/14
   –†–µ–∑—É–ª—å—Ç–∞—Ç: 19:00 –ª–∏–¥–∏—Ä—É–µ—Ç (+12%)

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: 8 —Ç–µ—Å—Ç–æ–≤
- –ó–Ω–∞—á–∏–º—ã—Ö: 6 (75%)
- –£–ª—É—á—à–µ–Ω–∏–µ: +18% –≤ —Å—Ä–µ–¥–Ω–µ–º"""

    keyboard = [
        [
            InlineKeyboardButton(
                " –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="smm_new_ab_test"),
            InlineKeyboardButton(
                "üìä –¢–µ–∫—É—â–∏–µ", callback_data="smm_current_ab_tests")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_audience_analytics(query, context):
    """üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await query.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞...", show_alert=False)

    text = """üìä **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ê–£–î–ò–¢–û–†–ò–ò**

üë• **–°–æ—Å—Ç–∞–≤ (7 –¥–Ω–µ–π):**
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 3,247 (+127)
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: 2,156 (66.4%)
- –ù–æ–≤—ã—Ö: 127 (+15.2%)

üìà **–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:**
- Engagement: 8.7% (+0.8%)
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 156 (+23%)
- –õ–∞–π–∫–∏: 892 (+18%)

üéØ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** 1.6%"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìà –î–µ—Ç–∞–ª–∏", callback_data="smm_detailed_audience_stats"),
            InlineKeyboardButton(
                "üéØ –°–µ–≥–º–µ–Ω—Ç—ã", callback_data="smm_audience_segmentation")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_targeting_tips(query, context):
    """IDEA: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    await query.answer("IDEA: –ì–µ–Ω–µ—Ä–∏—Ä—É—é...", show_alert=False)

    text = """IDEA: **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**

FIRE: **–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:**
1. –†–∞—Å—à–∏—Ä–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—é (+15% –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 20:00-21:00
3. –î–æ–±–∞–≤–∏—Ç—å "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"

üìä **–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:**
4. A/B —Ç–µ—Å—Ç 45-55 –ª–µ—Ç
5. –°–µ–∑–æ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞

üìà **–≠—Ñ—Ñ–µ–∫—Ç:** +25% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""

    keyboard = [
        [
            InlineKeyboardButton("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–ø-3",
                                 callback_data="smm_apply_top_tips"),
            InlineKeyboardButton(
                "üìã –ü–ª–∞–Ω", callback_data="smm_detailed_action_plan")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_targeting")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_change_strategy(query, context):
    """üîÑ –°–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await query.answer("üîÑ –°–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...", show_alert=False)

    text = """üîÑ **–°–¢–†–ê–¢–ï–ì–ò–ò –ö–û–ù–¢–ï–ù–¢–ê**

üìä **–¢–µ–∫—É—â–∞—è: –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø**

FIRE: **–í–ò–†–£–°–ù–ê–Ø** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç
üíµ **–ö–û–ù–í–ï–†–°–ò–û–ù–ù–ê–Ø** - –º–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫
BOOKS: **–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø** - —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å
SCALES: **–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è

üìà –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: 24-48 —á–∞—Å–æ–≤"""

    keyboard = [
        [
            InlineKeyboardButton(
                "FIRE: –í–∏—Ä—É—Å–Ω–∞—è", callback_data="smm_strategy_viral"),
            InlineKeyboardButton(
                "üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è", callback_data="smm_strategy_conversion")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_content_strategy")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_tone_settings(query, context):
    """MASKS: –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    await query.answer("MASKS: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–Ω–∞...", show_alert=False)

    text = """MASKS: **–¢–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ö–û–ù–¢–ï–ù–¢–ê**

TENT: **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è: 70% SCALES:
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è: 20% 
- –°—Ä–æ—á–Ω–∞—è: 10% 

üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è: 8.2%
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è: 9.1%
- –°—Ä–æ—á–Ω–∞—è: 7.8%"""

    keyboard = [
        [
            InlineKeyboardButton("SCALES: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
                                 callback_data="smm_tone_professional"),
            InlineKeyboardButton(
                " –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è", callback_data="smm_tone_friendly")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_content_strategy")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_audience_settings(query, context):
    """üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await handle_smm_change_audience(query, context)


async def handle_smm_strategy_analytics(query, context):
    """üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await query.answer("üìä –ê–Ω–∞–ª–∏–∑...", show_alert=False)

    text = """üìä **–ê–ù–ê–õ–ò–ó –°–¢–†–ê–¢–ï–ì–ò–ò**

üìà **–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø** (30 –¥–Ω–µ–π)

üéØ **KPI:**
- –û—Ö–≤–∞—Ç: 15,347/15,000 ‚úÖ (+2.3%)
- Engagement: 8.7%/8.0% ‚úÖ (+0.7%)
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 2.3%/2.0% ‚úÖ (+0.3%)
- –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: 67/50 ‚úÖ (+34%)

üíµ **–§–∏–Ω–∞–Ω—Å—ã:**
- ROI: 340%
- CPA: 450 rubles
- LTV: 8,500 rubles"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìà –î–µ—Ç–∞–ª–∏", callback_data="smm_detailed_strategy_metrics"),
            InlineKeyboardButton(
                "SEARCH: –ê–Ω–∞–ª–∏–∑", callback_data="smm_deep_strategy_analysis")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_content_strategy")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï SMM CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–†–û–í–ù–Ø 2 ============


async def handle_smm_audience_individuals(query, context):
    """ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ñ–∏–∑–ª–∏—Ü", show_alert=False)
    text = """ **–§–ò–ó–ò–ß–ï–°–ö–ò–ï –õ–ò–¶–ê**

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:** 60% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –í–æ–∑—Ä–∞—Å—Ç: 25-55 –ª–µ—Ç
- –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: —Å–º–µ—à–∞–Ω–Ω–æ–µ
- –î–æ—Ö–æ–¥—ã: —Å—Ä–µ–¥–Ω–∏–µ –∏ –≤—ã—à–µ
- –ü—Ä–æ–±–ª–µ–º—ã: —Å–µ–º–µ–π–Ω—ã–µ, —Ç—Ä—É–¥–æ–≤—ã–µ, –∂–∏–ª–∏—â–Ω—ã–µ"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_audience")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_audience_business(query, context):
    """OFFICE: –ë–∏–∑–Ω–µ—Å —Å–µ–≥–º–µ–Ω—Ç"""
    await query.answer("OFFICE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞", show_alert=False)
    text = """OFFICE: **–ë–ò–ó–ù–ï–° –°–ï–ì–ú–ï–ù–¢**

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:** 30% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –†–∞–∑–º–µ—Ä: –º–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å
- –°—Ñ–µ—Ä—ã: —É—Å–ª—É–≥–∏, —Ç–æ—Ä–≥–æ–≤–ª—è, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
- –ü—Ä–æ–±–ª–µ–º—ã: –Ω–∞–ª–æ–≥–∏, —Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ, –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_audience")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_geo_moscow(query, context):
    """üèõÔ∏è –ú–æ—Å–∫–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await query.answer("üèõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–æ—Å–∫–≤—ã", show_alert=False)
    text = """üèõÔ∏è **–ú–û–°–ö–í–ê –ò –ú–û–°–ö–û–í–°–ö–ê–Ø –û–ë–õ–ê–°–¢–¨**

LOCATION: **–ü–æ–∫—Ä—ã—Ç–∏–µ:** 40% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 8.5% engagement
üíµ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** 2.8% –≤ –∑–∞—è–≤–∫–∏
CLOCK: **–ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è:** 19:00-21:00"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_geo_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_geo_spb(query, context):
    """ –°–ü–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –°–ü–±", show_alert=False)
    text = """ **–°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì**

LOCATION: **–ü–æ–∫—Ä—ã—Ç–∏–µ:** 15% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 7.2% engagement
üíµ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** 2.1% –≤ –∑–∞—è–≤–∫–∏
CLOCK: **–ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è:** 18:30-20:30"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_geo_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interests_basic(query, context):
    """SCALES: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞"""
    await query.answer("SCALES: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞", show_alert=False)
    text = """SCALES: **–û–°–ù–û–í–ù–´–ï –ü–†–ê–í–ê**

üéØ **–û—Ö–≤–∞—Ç:** 85% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
- –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
- –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interests_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interests_family(query, context):
    """ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ"""
    await query.answer(" –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ", show_alert=False)
    text = """ **–°–ï–ú–ï–ô–ù–û–ï –ü–†–ê–í–û**

üéØ **–û—Ö–≤–∞—Ç:** 68% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
- –†–∞–∑–≤–æ–¥ –∏ —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞
- –ê–ª–∏–º–µ–Ω—Ç—ã
- –û–ø–µ–∫–∞ –∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interests_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_time_peak(query, context):
    """FIRE: –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã"""
    await query.answer("FIRE: –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã", show_alert=False)
    text = """FIRE: **–ü–ò–ö–û–í–´–ï –ß–ê–°–´: 18:00-21:00**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 100%
IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –ø–æ—Å—Ç—ã
üéØ **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** +15% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_time_work(query, context):
    """üìà –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
    await query.answer("üìà –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", show_alert=False)
    text = """üìà **–†–ê–ë–û–ß–ï–ï –í–†–ï–ú–Ø: 12:00-14:00**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 85%
IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–µ–ª–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –í –æ—Å–Ω–æ–≤–Ω–æ–º –±–∏–∑–Ω–µ—Å"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_setup_telegram(query, context):
    """PHONE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram"""
    await query.answer("PHONE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram", show_alert=False)
    text = """PHONE: **TELEGRAM –ù–ê–°–¢–†–û–ô–ö–ò**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –û—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
üìä **–û—Ö–≤–∞—Ç:** 100% —Ç—Ä–∞—Ñ–∏–∫–∞
üéØ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_platform_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_setup_instagram(query, context):
    """CAMERA: Instagram"""
    await query.answer("CAMERA: Instagram", show_alert=False)
    text = """CAMERA: **INSTAGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø**

‚ùå **–°—Ç–∞—Ç—É—Å:** –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
IDEA: **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –ú–æ–ª–æ–¥–∞—è, –∞–∫—Ç–∏–≤–Ω–∞—è"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_platform_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_new_ab_test(query, context):
    """ –ù–æ–≤—ã–π A/B —Ç–µ—Å—Ç"""
    await query.answer(" –ù–æ–≤—ã–π A/B —Ç–µ—Å—Ç", show_alert=False)
    text = """ **–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û A/B –¢–ï–°–¢–ê**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –¢–∏–ø—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –í–∞—Ä–∏–∞—Ü–∏–∏ CTA"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_ab_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_current_ab_tests(query, context):
    """üìä –¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã"""
    await query.answer("üìä –¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã", show_alert=False)
    text = """üìä **–ê–ö–¢–ò–í–ù–´–ï A/B –¢–ï–°–¢–´**

‚úÖ **–¢–µ—Å—Ç #1:** –í—Ä–µ–º—è (19:00 vs 20:00)
- –ü—Ä–æ–≥—Ä–µ—Å—Å: 5/14 –¥–Ω–µ–π
- –õ–∏–¥–µ—Ä: 19:00 (+12%)"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_ab_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_strategy_viral(query, context):
    """FIRE: –í–∏—Ä—É—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("FIRE: –í–∏—Ä—É—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", show_alert=False)
    text = """FIRE: **–í–ò–†–£–°–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–¶–µ–ª—å:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç
üìà **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- +45% –æ—Ö–≤–∞—Ç
- -15% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_strategy_conversion(query, context):
    """üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è", show_alert=False)
    text = """üíµ **–ö–û–ù–í–ï–†–°–ò–û–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–¶–µ–ª—å:** –ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫
üìà **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- +35% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- -20% –æ—Ö–≤–∞—Ç
- –ë–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_tone_professional(query, context):
    """SCALES: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    await query.answer("SCALES: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è", show_alert=False)
    text = """SCALES: **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨**

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** 70%
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 8.2% engagement
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –ë–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_tone_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_tone_friendly(query, context):
    """ –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    await query.answer(" –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è", show_alert=False)
    text = """ **–î–†–£–ñ–ï–õ–Æ–ë–ù–ê–Ø –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨**

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** 20%
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 9.1% engagement
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_tone_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï SMM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============


async def handle_smm_geo_cities(query, context):
    """ –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"""
    await query.answer(" –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", show_alert=False)
    text = """ **–ö–†–£–ü–ù–´–ï –ì–û–†–û–î–ê –†–û–°–°–ò–ò**

LOCATION: **–ü–æ–∫—Ä—ã—Ç–∏–µ:** 20% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
 **–í–∫–ª—é—á–µ–Ω–æ:**
- –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥: 3.2%
- –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫: 2.8%
- –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥: 2.1%
- –ö–∞–∑–∞–Ω—å: 1.9%
üìà **–°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 6.8% engagement"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_geo_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_geo_all(query, context):
    """ –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã"""
    await query.answer(" –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã", show_alert=False)
    text = """ **–í–°–ï –†–ï–ì–ò–û–ù–´ –†–û–°–°–ò–ò**

LOCATION: **–ü–æ–∫—Ä—ã—Ç–∏–µ:** 25% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
 **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:**
- –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 5.4%
- –õ—É—á—à–∏–µ —Ä–µ–≥–∏–æ–Ω—ã: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π
- –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: –≤–µ—á–µ—Ä–æ–º (19:00-22:00)
IDEA: **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** –ë–æ–ª—å—à–µ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_geo_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interests_labor(query, context):
    """ –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ"""
    await query.answer(" –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", show_alert=False)
    text = """ **–¢–†–£–î–û–í–û–ï –ü–†–ê–í–û**

üéØ **–û—Ö–≤–∞—Ç:** 61% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
- –£–≤–æ–ª—å–Ω–µ–Ω–∏—è –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
- –ù–µ–≤—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
- –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã
- –û—Ç–ø—É—Å–∫–∞ –∏ –±–æ–ª—å–Ω–∏—á–Ω—ã–µ"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interests_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interests_property(query, context):
    """ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"""
    await query.answer(" –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", show_alert=False)
    text = """ **–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨**

üéØ **–û—Ö–≤–∞—Ç:** 45% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
- –ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä
- –ü—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è
- –ñ–ö–• –ø—Ä–æ–±–ª–µ–º—ã
- –°–æ—Å–µ–¥—Å–∫–∏–µ —Å–ø–æ—Ä—ã"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interests_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_time_evening(query, context):
    """ –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è"""
    await query.answer(" –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è", show_alert=False)
    text = """ **–í–ï–ß–ï–†–ù–ï–ï –í–†–ï–ú–Ø: 21:00-23:00**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 75%
IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –õ–µ–≥–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–≤–µ—Ç—ã
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –î–æ–º–∞—à–Ω—è—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_time_morning(query, context):
    """ –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã"""
    await query.answer(" –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã", show_alert=False)
    text = """ **–£–¢–†–ï–ù–ù–ò–ï –ß–ê–°–´: 08:00-10:00**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 60%
IDEA: **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ù–æ–≤–æ—Å—Ç–∏, –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** –ü–æ –¥–æ—Ä–æ–≥–µ –Ω–∞ —Ä–∞–±–æ—Ç—É"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_setup_vk(query, context):
    """GLOBE: VK –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await query.answer("GLOBE: VK", show_alert=False)
    text = """GLOBE: **–í–ö–û–ù–¢–ê–ö–¢–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø**

‚ùå **–°—Ç–∞—Ç—É—Å:** –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
IDEA: **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** –®–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
üéØ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** –ë–æ–ª—å—à–µ –º–æ–ª–æ–¥–µ–∂–∏"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_platform_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_setup_linkedin(query, context):
    """ LinkedIn –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await query.answer(" LinkedIn", show_alert=False)
    text = """ **LINKEDIN –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø**

‚ùå **–°—Ç–∞—Ç—É—Å:** –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
IDEA: **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** B2B –∞—É–¥–∏—Ç–æ—Ä–∏—è
üéØ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_platform_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_ab_results(query, context):
    """üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–æ–≤"""
    await query.answer("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", show_alert=False)
    text = """üìà **–†–ï–ó–£–õ–¨–¢–ê–¢–´ A/B –¢–ï–°–¢–û–í**

‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 19:00 –ø–æ–±–µ–¥–∏–ª (+12%)
- –ó–∞–≥–æ–ª–æ–≤–∫–∏: "–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç" –ª—É—á—à–µ (+8%)
- CTA –∫–Ω–æ–ø–∫–∏: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" (+15%)"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_ab_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_ab_settings(query, context):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ A/B —Ç–µ—Å—Ç–æ–≤"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ A/B", show_alert=False)
    text = """ **–ù–ê–°–¢–†–û–ô–ö–ò A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø**

üìã **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: 14 –¥–Ω–µ–π
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
- –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏: 95%"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_ab_targeting")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_strategy_educational(query, context):
    """BOOKS: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("BOOKS: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è", show_alert=False)
    text = """BOOKS: **–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–¶–µ–ª—å:** –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
üìà **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- +25% –¥–æ–≤–µ—Ä–∏–µ –∫ –±—Ä–µ–Ω–¥—É
- +10% –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
- –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_strategy_balanced(query, context):
    """SCALES: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("SCALES: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", show_alert=False)
    text = """SCALES: **–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–¶–µ–ª—å:** –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
üìà **–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –û—Ö–≤–∞—Ç: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
- –õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_tone_urgent(query, context):
    """ –°—Ä–æ—á–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    await query.answer(" –°—Ä–æ—á–Ω–∞—è", show_alert=False)
    text = """ **–°–†–û–ß–ù–ê–Ø –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨**

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** 10%
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** 12.3% engagement
üéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_tone_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_tone_mixed(query, context):
    """TENT: –°–º–µ—à–∞–Ω–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    await query.answer("TENT: –°–º–µ—à–∞–Ω–Ω–∞—è", show_alert=False)
    text = """TENT: **–°–ú–ï–®–ê–ù–ù–ê–Ø –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨**

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –∞–¥–∞–ø—Ç–∏–≤–Ω–æ
üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è
üéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** AI –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_tone_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –≠–ö–°–ü–û–†–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============


async def handle_analytics_charts(query, context):
    """üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await query.answer("üìà –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤...", show_alert=False)
    text = """üìà **–ì–†–ê–§–ò–ö–ò –ò –î–ò–ê–ì–†–ê–ú–ú–´**

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:**
- üìà –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –¥–Ω—è–º
-  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
- üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üéØ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:**
- –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
- –ó–∞ –º–µ—Å—è—Ü
- –ó–∞ –∫–≤–∞—Ä—Ç–∞–ª
- –ó–∞ –≥–æ–¥"""

    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥",
                              callback_data="open_dashboard")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="export_analytics")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_open_dashboard(query, context):
    """üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥"""
    await query.answer("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞...", show_alert=False)
    text = """üìä **–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –î–ê–®–ë–û–†–î**

üéØ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∞—à–±–æ—Ä–¥ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏:**
- üìà –ó–∞—è–≤–∫–∏: 247 –∑–∞ –º–µ—Å—è—Ü (+12%)
- üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 8.7% (+2.1%)
- ÔøΩÔøΩ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 1,850
- üìä ROI: 340% (+15%)

PHONE: **–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥:**
https://dashboard.legal-center.com/admin

 **–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**"""

    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç",
                              callback_data="generate_report")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="analytics_charts")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_generate_report(query, context):
    """üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    await query.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...", show_alert=False)
    text = """üìã **–û–¢–ß–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù**

‚úÖ **–°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:**
-  –§–æ—Ä–º–∞—Ç: PDF + Excel
- üìä –°—Ç—Ä–∞–Ω–∏—Ü: 24
- üéØ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
- üìà –ì—Ä–∞—Ñ–∏–∫–∏: 12 –¥–∏–∞–≥—Ä–∞–º–º

 **–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:**
- report_analytics_2024.pdf
- data_export_2024.xlsx

EMAIL: **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email:** admin@legal-center.com"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="open_dashboard")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –≠–ö–°–ü–û–†–¢ CSV –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============


async def handle_export_apps_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ CSV"""
    await query.answer(" –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫...", show_alert=False)
    text = """ **–≠–ö–°–ü–û–†–¢ –ó–ê–Ø–í–û–ö –í CSV**

‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:**
- üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: 1,247
-  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2.4 –ú–ë
-  –ö–æ–ª–æ–Ω–∫–∏: 15 –ø–æ–ª–µ–π
- üìÖ –ü–µ—Ä–∏–æ–¥: –≤—Å–µ –≤—Ä–µ–º—è

üìã **–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
- ID, –¥–∞—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è
- –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
- –°—Ç–∞—Ç—É—Å, —Å—É–º–º–∞
- –Æ—Ä–∏—Å—Ç, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""

    keyboard = [[InlineKeyboardButton(
        "üîÑ –ù–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_applications")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_users_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CSV"""
    await query.answer(" –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", show_alert=False)
    text = """ **–≠–ö–°–ü–û–†–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í CSV**

‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:**
- üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 3,847
-  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 1.8 –ú–ë
-  –ö–æ–ª–æ–Ω–∫–∏: 12 –ø–æ–ª–µ–π
- üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è

üìã **–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
- Telegram ID, –∏–º—è
- –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""

    keyboard = [[InlineKeyboardButton(
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_payments_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π CSV"""
    await query.answer(" –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π...", show_alert=False)
    text = """ **–≠–ö–°–ü–û–†–¢ –ü–õ–ê–¢–ï–ñ–ï–ô –í CSV**

‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:**
- üí≥ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: 892
- üíµ –û–±—â–∞—è —Å—É–º–º–∞: 2,470,000  rubles
-  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 670 –ö–ë
- üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è

üìã **–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
- ID –ø–ª–∞—Ç–µ–∂–∞, —Å—É–º–º–∞
- –î–∞—Ç–∞, —Å—Ç–∞—Ç—É—Å
- –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
- –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∑–∞—è–≤–∫–µ"""

    keyboard = [[InlineKeyboardButton(
        "ÔøΩÔøΩ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="export_payments")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_analytics_csv(query, context):
    """ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ CSV"""
    await query.answer(" –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...", show_alert=False)
    text = """ **–≠–ö–°–ü–û–†–¢ –ê–ù–ê–õ–ò–¢–ò–ö–ò –í CSV**

‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:**
- ÔøΩÔøΩ –ó–∞–ø–∏—Å–µ–π: 15,670
-  –†–∞–∑–º–µ—Ä: 4.2 –ú–ë
-  –ú–µ—Ç—Ä–∏–∫–∏: 25 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
- üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π

üìã **–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
- –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
- –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""

    keyboard = [[InlineKeyboardButton(
        "üìà –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –≠–ö–°–ü–û–†–¢ –ü–û –ü–ï–†–ò–û–î–ê–ú ============


async def handle_export_period_7d(query, context):
    """üìÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ 7 –¥–Ω–µ–π"""
    await query.answer("üìÖ –ó–∞ 7 –¥–Ω–µ–π...", show_alert=False)
    text = """üìÖ **–≠–ö–°–ü–û–†–¢ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 7 –î–ù–ï–ô**

‚úÖ **–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:**
- ÔøΩÔøΩ –ó–∞—è–≤–∫–∏: 47 (+12%)
- üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 156
- üíµ –û–±–æ—Ä–æ—Ç: 127,000  rubles
- üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 9.2%

 **–§–∞–π–ª—ã:**
- weekly_report.pdf
- data_7days.xlsx"""

    keyboard = [[InlineKeyboardButton(
        "üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="export_full")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_period_30d(query, context):
    """üìÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ 30 –¥–Ω–µ–π"""
    await query.answer("üìÖ –ó–∞ 30 –¥–Ω–µ–π...", show_alert=False)
    text = """üìÖ **–≠–ö–°–ü–û–†–¢ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ú–ï–°–Ø–¶**

‚úÖ **–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:**
- üìã –ó–∞—è–≤–∫–∏: 247 (+18%)
- üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 892
- üíµ –û–±–æ—Ä–æ—Ç: 670,000  rubles
- üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 8.7%

 **–§–∞–π–ª—ã:**
- monthly_report.pdf
- data_30days.xlsx"""

    keyboard = [[InlineKeyboardButton(
        "üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="export_custom_period")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_period_90d(query, context):
    """üìÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ 90 –¥–Ω–µ–π"""
    await query.answer("üìÖ –ó–∞ 90 –¥–Ω–µ–π...", show_alert=False)
    text = """üìÖ **–≠–ö–°–ü–û–†–¢ –ó–ê –ö–í–ê–†–¢–ê–õ**

‚úÖ **–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:**
- üìã –ó–∞—è–≤–∫–∏: 847 (+25%)
- üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 2,670
- üíµ –û–±–æ—Ä–æ—Ç: 1,890,000  rubles
- üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 8.4%

 **–§–∞–π–ª—ã:**
- quarterly_report.pdf
- data_90days.xlsx"""

    keyboard = [[InlineKeyboardButton(
        "üìà –í–µ—Å—å –≥–æ–¥", callback_data="export_period_365d")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_period_365d(query, context):
    """üìÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –≥–æ–¥"""
    await query.answer("üìÖ –ó–∞ –≥–æ–¥...", show_alert=False)
    text = """üìÖ **–≠–ö–°–ü–û–†–¢ –ó–ê –ì–û–î**

‚úÖ **–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤:**
- üìã –ó–∞—è–≤–∫–∏: 3,247 (+45%)
- üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 8,920
- üíµ –û–±–æ—Ä–æ—Ç: 5,670,000  rubles
- üìä –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: 7.8%

 **–§–∞–π–ª—ã:**
- annual_report.pdf (47 —Å—Ç—Ä–∞–Ω–∏—Ü)
- data_365days.xlsx"""

    keyboard = [[InlineKeyboardButton(
        " –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="export_period")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_export_custom_period(query, context):
    """üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    await query.answer("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞...", show_alert=False)
    text = """üìÖ **–ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ì–û –ü–ï–†–ò–û–î–ê**

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: 01.01.2024
- üìÖ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞: —Å–µ–≥–æ–¥–Ω—è
- üìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: –≤—Å–µ
-  –§–æ—Ä–º–∞—Ç: PDF + Excel

 **–§–∏–ª—å—Ç—Ä—ã:**
- –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚úÖ
- –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º ‚úÖ
- –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚úÖ
- –ü–æ —é—Ä–∏—Å—Ç–∞–º ‚úÖ"""

    keyboard = [
        [InlineKeyboardButton(
            "üìÖ –ó–∞ 7 –¥–Ω–µ–π", callback_data="export_period_7d")],
        [InlineKeyboardButton(
            "üìÖ –ó–∞ 30 –¥–Ω–µ–π", callback_data="export_period_30d")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ SMM –ê–î–ú–ò–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============


async def handle_smm_export_data(query, context):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç SMM –¥–∞–Ω–Ω—ã—Ö"""
    await query.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç SMM...", show_alert=False)
    text = """üìä **–≠–ö–°–ü–û–†–¢ SMM –î–ê–ù–ù–´–•**

‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:**
- üìù –ü–æ—Å—Ç–æ–≤: 247
-  –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 67,500
- CHAT: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 1,240
- üîÑ –†–µ–ø–æ—Å—Ç–æ–≤: 890

 **–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã:**
- smm_analytics.xlsx
- posts_performance.csv
- audience_insights.pdf"""

    keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_status")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_schedule(query, context):
    """üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
    await query.answer("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", show_alert=False)
    text = """üìã **–†–ê–°–ü–ò–°–ê–ù–ò–ï –ü–û–°–¢–û–í**

üìÖ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:**
- –°–µ–≥–æ–¥–Ω—è 19:00: –ö–µ–π—Å –æ —Ä–∞–∑–≤–æ–¥–µ
- –ó–∞–≤—Ç—Ä–∞ 12:00: –ù–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã
- –ó–∞–≤—Ç—Ä–∞ 20:00: –¢—Ä—É–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∞
- –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 14:00: –ñ–ö–• –ø—Ä–æ–±–ª–µ–º—ã

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: ‚úÖ –í–∫–ª—é—á–µ–Ω
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: 2 —á–∞—Å–∞
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00"""

    keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_status")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_change_frequency(query, context):
    """üìù –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    await query.answer("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã...", show_alert=False)
    text = """üìù **–ß–ê–°–¢–û–¢–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ô**

üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: 12
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: 2 —á–∞—Å–∞
- –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 9:00-21:00
- –í—ã—Ö–æ–¥–Ω—ã–µ: —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ: 8-15 –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å
- –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã: 19:00-21:00
- –û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: 12:00-14:00"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_toggle_features(query, context):
    """üîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π"""
    await query.answer("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π...", show_alert=False)
    text = """üîß **–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–Ø–ú–ò**

 **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:**
- ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞
- üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞
- üéØ –ê–≤—Ç–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥: ‚úÖ –í–∫–ª—é—á–µ–Ω
- üìà A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
- üîÑ –ö—Ä–æ—Å–ø–æ—Å—Ç–∏–Ω–≥: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω
- PHONE: Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã

üéõÔ∏è **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_set_targets(query, context):
    """üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫"""
    await query.answer("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π...", show_alert=False)
    text = """üìä **–¶–ï–õ–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò**

üéØ **–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:**
-  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 5,000/–¥–µ–Ω—å (‚úÖ 112%)
- CHAT: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 50/–¥–µ–Ω—å (‚úÖ 108%)
- üîÑ –†–µ–ø–æ—Å—Ç—ã: 20/–¥–µ–Ω—å (WARNING: 85%)
- üìù –ó–∞—è–≤–∫–∏: 8/–¥–µ–Ω—å (‚úÖ 125%)

üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü:**
- –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–π: 3/4
- –û–±—â–∏–π —Ä–æ—Å—Ç: +15%
- ROI: 340%"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_reset_config(query, context):
    """üîÑ –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    await query.answer("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫...", show_alert=False)
    text = """üîÑ **–°–ë–†–û–° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò**

WARNING: **–í–ù–ò–ú–ê–ù–ò–ï!**
–ë—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º:
- üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
- CLOCK: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
- üìä –ü–æ—Ä–æ–≥–∏ –º–µ—Ç—Ä–∏–∫
- ART: –®–∞–±–ª–æ–Ω—ã –¥–∏–∑–∞–π–Ω–∞

‚úÖ **–°–æ—Ö—Ä–∞–Ω—è—Ç—Å—è:**
- üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
- üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- üë• –ë–∞–∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_optimization_details(query, context):
    """üìã –î–µ—Ç–∞–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    await query.answer("üìã –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...", show_alert=False)
    text = """üìã **–î–ï–¢–ê–õ–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò**

üéØ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
- CLOCK: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 19:00 ‚Üí 19:30 (+12% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å)
-  –•–µ—à—Ç–µ–≥–∏: –¥–æ–±–∞–≤–ª–µ–Ω—ã #—Å–µ–º–µ–π–Ω–æ–µ–ø—Ä–∞–≤–æ (+8% –æ—Ö–≤–∞—Ç)
- üìù –î–ª–∏–Ω–∞ –ø–æ—Å—Ç–æ–≤: 800 ‚Üí 1200 —Å–∏–º–≤–æ–ª–æ–≤ (+15% –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è)
- ART: –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: +40% –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:**
- –û—Ö–≤–∞—Ç: +25%
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: +18%
- –ü–µ—Ä–µ—Ö–æ–¥—ã: +35%
- –ó–∞—è–≤–∫–∏: +22%"""

    keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_status")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –°–¢–†–ê–¢–ï–ì–ò–ò SMM –ê–î–ú–ò–ù ============


async def handle_strategy_viral_focused(query, context):
    """FIRE: –í–∏—Ä—É—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ñ–æ–∫—É—Å)"""
    await query.answer("FIRE: –í–∏—Ä—É—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è...", show_alert=False)
    text = """FIRE: **–í–ò–†–£–°–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (–§–û–ö–£–°)**

üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- üìä –ö–æ–Ω—Ç–µ–Ω—Ç: 90% —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π
- CLOCK: –í—Ä–µ–º—è: –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (18-21)
- MASKS: –¢–æ–Ω: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —è—Ä–∫–∏–π
-  –•–µ—à—Ç–µ–≥–∏: —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ

üìà **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –û—Ö–≤–∞—Ç: +60-80%
- –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: +45%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: -20% (–Ω–æ—Ä–º–∞)
- –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: +200%"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_strategy_conversion_focused(query, context):
    """üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ñ–æ–∫—É—Å)"""
    await query.answer("üíµ –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è...", show_alert=False)
    text = """üíµ **–ö–û–ù–í–ï–†–°–ò–û–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (–§–û–ö–£–°)**

üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- üìä –ö–æ–Ω—Ç–µ–Ω—Ç: 80% –ø—Ä–æ–¥–∞—é—â–∏–π
- CLOCK: –í—Ä–µ–º—è: —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
- MASKS: –¢–æ–Ω: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, —É–±–µ–∂–¥–∞—é—â–∏–π
- LINK: CTA: –≤ –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ

üìà **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –ó–∞—è–≤–∫–∏: +40-60%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: +35%
- AOV: +25%
- –û—Ö–≤–∞—Ç: -15% (—Ñ–æ–∫—É—Å –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏)"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_strategy_engagement_focused(query, context):
    """CHAT: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (—Ñ–æ–∫—É—Å)"""
    await query.answer("CHAT: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è...", show_alert=False)
    text = """CHAT: **–°–¢–†–ê–¢–ï–ì–ò–Ø –í–û–í–õ–ï–ß–ï–ù–ò–Ø (–§–û–ö–£–°)**

üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- üìä –ö–æ–Ω—Ç–µ–Ω—Ç: 70% –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π
- CLOCK: –í—Ä–µ–º—è: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
- MASKS: –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π
- CHAT: –ü—Ä–∏–∑—ã–≤—ã: –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º

üìà **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: +80%
- –í—Ä–µ–º—è –≤ –∫–∞–Ω–∞–ª–µ: +55%
- –õ–æ—è–ª—å–Ω–æ—Å—Ç—å: +40%
- –û—Ö–≤–∞—Ç —á–µ—Ä–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: +30%"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_strategy_balanced(query, context):
    """SCALES: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("SCALES: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è...", show_alert=False)
    text = """SCALES: **–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- üìä –ö–æ–Ω—Ç–µ–Ω—Ç: 40% –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π, 30% –ø—Ä–æ–¥–∞—é—â–∏–π, 30% —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π
- CLOCK: –í—Ä–µ–º—è: –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
- MASKS: –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–∂–µ–ª—é–±–∏—è
- üéØ –¶–µ–ª–∏: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫

üìà **–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –û—Ö–≤–∞—Ç: +15-25%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: +10-20%
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: +20-30%
- –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_strategy_educational(query, context):
    """BOOKS: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("BOOKS: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è...", show_alert=False)
    text = """BOOKS: **–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏:**
- üìä –ö–æ–Ω—Ç–µ–Ω—Ç: 90% –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π
- CLOCK: –í—Ä–µ–º—è: —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã + –≤–µ—á–µ—Ä
- MASKS: –¢–æ–Ω: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π
- BOOKS: –§–æ—Ä–º–∞—Ç: –≥–∞–π–¥—ã, —Ä–∞–∑–±–æ—Ä—ã, FAQ

üìà **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –î–æ–≤–µ—Ä–∏–µ –∫ –±—Ä–µ–Ω–¥—É: +60%
- –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: +120%
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: +80%
- –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: +45%"""

    keyboard = [[InlineKeyboardButton(
        "‚óÄ –ù–∞–∑–∞–¥", callback_data="smm_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ì–õ–£–ë–û–ö–ò–ï CALLBACK'–´ –£–†–û–í–ù–Ø 3+ ============


async def handle_smm_add_images(query, context):
    """ –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...", show_alert=False)
    text = """ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò**

üìä **–¢–µ–∫—É—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:**
- –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 247
- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞: 189
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ: 58
- –§–æ—Ä–º–∞—Ç—ã: JPG, PNG

ART: **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ:**
- –õ–æ–≥–æ—Ç–∏–ø—ã —é—Ä—Ñ–∏—Ä–º
- –ò–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –§–æ–Ω—ã –¥–ª—è —Ü–∏—Ç–∞—Ç
- –î–∏–∞–≥—Ä–∞–º–º—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏"""

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_design")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_edit_templates(query, context):
    """üìù –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤"""
    await query.answer("üìù –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤...", show_alert=False)
    text = """üìù **–†–ï–î–ê–ö–¢–û–† –®–ê–ë–õ–û–ù–û–í –ü–û–°–¢–û–í**

ART: **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**
-  –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞ (5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
- ÔøΩÔøΩ –ö–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ (8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
- üìä –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ (3 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
- GRADUATION: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ (6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)

 **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CTA –±–ª–æ–∫–æ–≤"""

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_design")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_style_editor(query, context):
    """ART: –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∏–ª–µ–π"""
    await query.answer("ART: –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∏–ª–µ–π...", show_alert=False)
    text = """ART: **–†–ï–î–ê–ö–¢–û–† –°–¢–ò–õ–ï–ô**

üéØ **–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:**
- –®—Ä–∏—Ñ—Ç: —Å—Ç—Ä–æ–≥–∏–π –¥–µ–ª–æ–≤–æ–π
- –¶–≤–µ—Ç–∞: —Å–∏–Ω–∏–π + –±–µ–ª—ã–π
- –≠–ª–µ–º–µ–Ω—Ç—ã: –º–∏–Ω–∏–º–∞–ª–∏–∑–º
- –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
- –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –°—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ CTA
- –ë—Ä–µ–Ω–¥–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç—ã"""

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_design")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_button_settings(query, context):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫"""
    await query.answer(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫...", show_alert=False)
    text = """ **–ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö CTA**

üéØ **–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**
- " –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" (–æ—Å–Ω–æ–≤–Ω–∞—è)
- "PHONE: –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫" (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è)
- "ÔøΩÔøΩ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" (—Ñ–æ—Ä–º–∞)

 **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
- –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏
- –°—Å—ã–ª–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
- A/B —Ç–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_design")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_preview_post(query, context):
    """PHONE: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞"""
    await query.answer("PHONE: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é...", show_alert=False)
    text = """PHONE: **–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê**

 **–ö–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å:**
 –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...
LINK: –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
#—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è–ø–æ–º–æ—â—å #—Å–µ–º–µ–π–Ω–æ–µ–ø—Ä–∞–≤–æ

 [–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é]

üìä **–ê–Ω–∞–ª–∏–∑:**
- –î–ª–∏–Ω–∞: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è
- –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è
- CTA: –∑–∞–º–µ—Ç–Ω–∞—è"""

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_design")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_save_template(query, context):
    """ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω"""
    await query.answer(" –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...", show_alert=False)
    text = """ **–®–ê–ë–õ–û–ù –°–û–•–†–ê–ù–ï–ù**

‚úÖ **–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω:**
- –ù–∞–∑–≤–∞–Ω–∏–µ: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å v2"
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
- –≠–ª–µ–º–µ–Ω—Ç—ã: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ + CTA
- –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π

üìã **–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è:**
- –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
- –†—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    keyboard = [[InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_design")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============


async def handle_smm_interval_30m(query, context):
    """ –ò–Ω—Ç–µ—Ä–≤–∞–ª 30 –º–∏–Ω—É—Ç"""
    await query.answer(" 30 –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
    text = """ **–ò–ù–¢–ï–†–í–ê–õ: 30 –ú–ò–ù–£–¢**

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ~32
- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–ª—è –∞–∫—Ü–∏–π

WARNING: **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:**
–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interval_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interval_1h(query, context):
    """CLOCK: –ò–Ω—Ç–µ—Ä–≤–∞–ª 1 —á–∞—Å"""
    await query.answer("CLOCK: 1 —á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", show_alert=False)
    text = """CLOCK: **–ò–ù–¢–ï–†–í–ê–õ: 1 –ß–ê–°**

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–∞–∂–¥—ã–π —á–∞—Å
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ~16
- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–ª—è —Ä–æ—Å—Ç–∞

‚úÖ **–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è:**
–ë—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interval_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interval_2h(query, context):
    """ –ò–Ω—Ç–µ—Ä–≤–∞–ª 2 —á–∞—Å–∞"""
    await query.answer(" 2 —á–∞—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
    text = """ **–ò–ù–¢–ï–†–í–ê–õ: 2 –ß–ê–°–ê** ‚úÖ –¢–ï–ö–£–©–ò–ô

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ~8
- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

üéØ **–ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:**
–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ + —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interval_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interval_4h(query, context):
    """ –ò–Ω—Ç–µ—Ä–≤–∞–ª 4 —á–∞—Å–∞"""
    await query.answer(" 4 —á–∞—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
    text = """ **–ò–ù–¢–ï–†–í–ê–õ: 4 –ß–ê–°–ê**

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ~4
- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: —É–º–µ—Ä–µ–Ω–Ω–∞—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞

 **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interval_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interval_6h(query, context):
    """üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª 6 —á–∞—Å–æ–≤"""
    await query.answer("üìÖ 6 —á–∞—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
    text = """üìÖ **–ò–ù–¢–ï–†–í–ê–õ: 6 –ß–ê–°–û–í**

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
- –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ~3
- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: –Ω–∏–∑–∫–∞—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏

BOOKS: **–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
–ì–ª—É–±–æ–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    keyboard = [[InlineKeyboardButton(
        "ÔøΩÔøΩ –ù–∞–∑–∞–¥", callback_data="smm_interval_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_interval_12h(query, context):
    """ –ò–Ω—Ç–µ—Ä–≤–∞–ª 12 —á–∞—Å–æ–≤"""
    await query.answer(" 12 —á–∞—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
    text = """ **–ò–ù–¢–ï–†–í–ê–õ: 12 –ß–ê–°–û–í**

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:**
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è: 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
- –£—Ç—Ä–æ–º: 09:00
- –í–µ—á–µ—Ä–æ–º: 21:00
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–ª—è –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞

STAR: **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:**
–¢—â–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_interval_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ============


async def handle_smm_custom_schedule(query, context):
    """CLOCK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await query.answer("CLOCK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...", show_alert=False)
    text = """CLOCK: **–ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø**

üìÖ **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**
- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 09:00, 12:00, 15:00, 18:00
- –í—Ç–æ—Ä–Ω–∏–∫: 09:00, 12:00, 15:00, 18:00
- –°—Ä–µ–¥–∞: 09:00, 12:00, 15:00, 18:00
- –ß–µ—Ç–≤–µ—Ä–≥: 09:00, 12:00, 15:00, 18:00
- –ü—è—Ç–Ω–∏—Ü–∞: 09:00, 12:00, 15:00, 18:00
- –°—É–±–±–æ—Ç–∞: 10:00, 14:00, 19:00
- –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 10:00, 14:00, 19:00

 **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
- –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
- –£—á–µ—Ç —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_smart_scheduling(query, context):
    """ü§ñ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await query.answer("ü§ñ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...", show_alert=False)
    text = """ü§ñ **–£–ú–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï**

 **AI –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª:**
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 19:00-19:30
- –•—É–¥—à–µ–µ –≤—Ä–µ–º—è: 02:00-06:00
- –ü–∏–∫–æ–≤—ã–µ –¥–Ω–∏: –í—Ç–æ—Ä–Ω–∏–∫, –ß–µ—Ç–≤–µ—Ä–≥
- –°–ª–∞–±—ã–µ –¥–Ω–∏: –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

üìä **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**
- –í—Ç, –ß—Ç: 08:00, 12:00, 19:00 (–ø–æ 3 –ø–æ—Å—Ç–∞)
- –ü–Ω, –°—Ä, –ü—Ç: 12:00, 19:00 (–ø–æ 2 –ø–æ—Å—Ç–∞)
- –°–±, –í—Å: 14:00 (–ø–æ 1 –ø–æ—Å—Ç—É)

ÔøΩÔøΩ **–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç:** +23% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_activity_time")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –£–ì–õ–£–ë–õ–ï–ù–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============


async def handle_smm_compare_strategies(query, context):
    """üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    await query.answer("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...", show_alert=False)
    text = """üìä **–°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô**

FIRE: **–í–∏—Ä—É—Å–Ω–∞—è:**
- –û—Ö–≤–∞—Ç: +60%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: -20%
- –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: –≤—ã—Å–æ–∫–∞—è

üíµ **–ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è:**
- –û—Ö–≤–∞—Ç: -15%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: +40%
- ROI: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π

BOOKS: **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è:**
- –û—Ö–≤–∞—Ç: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
- –î–æ–≤–µ—Ä–∏–µ: +50%
- –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è

SCALES: **–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è:** ‚úÖ –¢–ï–ö–£–©–ê–Ø
- –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: +15-25%
- –†–∏—Å–∫–∏: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_custom_strategy(query, context):
    """üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    await query.answer("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...", show_alert=False)
    text = """üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø**

 **AI —Å–æ–∑–¥–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏:**

üìà **–¶–µ–ª–∏:** –†–æ—Å—Ç –∑–∞—è–≤–æ–∫ + —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å
üéØ **–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∏–∫—Å:**
- 50% –∫–µ–π—Å—ã (–∫–æ–Ω–≤–µ—Ä—Å–∏—è)
- 30% –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–¥–æ–≤–µ—Ä–∏–µ)
- 20% –Ω–æ–≤–æ—Å—Ç–∏ (–æ—Ö–≤–∞—Ç)

CLOCK: **–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:**
- –ü–Ω-–ü—Ç: 12:00, 19:00
- –°–±-–í—Å: 15:00

üìä **–ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**
- –ó–∞—è–≤–∫–∏: +35%
- –û—Ö–≤–∞—Ç: +20%
- –£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å: +45%"""

    keyboard = [[InlineKeyboardButton(
        " –ù–∞–∑–∞–¥", callback_data="smm_change_strategy")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ============


async def handle_smm_enhanced_autopost(query, context):
    """üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"""
    await query.answer("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...", show_alert=False)

    text = """üöÄ **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–ü–û–°–¢–ò–ù–ì**

 **Enhanced AI –°–∏—Å—Ç–µ–º–∞:**
- –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
- ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤: ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

üìä **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
- –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 12
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 3.8% (+85% –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É)
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 12.4% (+120% –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É)
- –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: 9.2/10

üéØ **–£–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –†–µ–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**"""

    keyboard = [
        [
            InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å",
                                 callback_data="smm_force_enhanced_post"),
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 callback_data="smm_enhanced_stats")
        ],
        [
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏",
                                 callback_data="smm_rotation_settings"),
            InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                                 callback_data="smm_publication_history")
        ],
        [
            InlineKeyboardButton(
                " –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="smm_test_enhanced_post"),
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                                 callback_data="smm_content_analytics")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="smm_autopost")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_smm_resume_autopost(query, context):
    """‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"""
    await query.answer("‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...", show_alert=False)

    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–¥–∞—á
    context.user_data['autopost_paused'] = False

    text = """‚ñ∂ **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì –í–û–ó–û–ë–ù–û–í–õ–ï–ù**

‚úÖ **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:**
- –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ‚úÖ –ó–∞–ø—É—â–µ–Ω
- –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: —á–µ—Ä–µ–∑ ~45 –º–∏–Ω—É—Ç
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞

üöÄ **–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**
- –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤: 5 –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- –¢–∞—Ä–≥–µ—Ç–∏–Ω–≥: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –≤–µ–¥–µ—Ç—Å—è

üìä **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –û—Ö–≤–∞—Ç: 2,500+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–¥–µ–Ω—å
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 2.5% –≤ –∑–∞—è–≤–∫–∏
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 8%+ –ª–∞–π–∫–æ–≤/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–∏–Ω–≥
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –†–µ–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã"""

    keyboard = [
        [
            InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å",
                                 callback_data="smm_force_post"),
            InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                 callback_data="smm_pause_autopost")
        ],
        [
            InlineKeyboardButton(" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞",
                                 callback_data="smm_autopost_settings"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="smm_analytics")
        ],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_main_panel")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ –°–ò–°–¢–ï–ú–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ============

async def start_comment_dialog(query, context, post_id):
    """üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await query.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")

    text = f"""üí¨ **–î–û–ë–ê–í–ò–¢–¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö –ü–û–°–¢–£ #{post_id}**

üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

‚ÑπÔ∏è **–ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
- –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤
- –ë–µ–∑ —Å—Å—ã–ª–æ–∫ –∏ —Å–ø–∞–º–∞
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω
- –°–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏–∫–∏

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ—Å—Ç—É –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""

    keyboard = [
        [InlineKeyboardButton(
            "‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"post_view_{post_id}")]
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['awaiting_comment'] = post_id

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def moderate_comment(query, context, comment_id):
    """üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await query.answer("üõ°Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏...")

    try:
        if ENHANCED_AUTOPOST_AVAILABLE:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–ª–∏ –±—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –ë–î
            comment_text = "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è! –û—á–µ–Ω—å –ø–æ–º–æ–≥–ª–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º."
            user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            text = f"""üõ°Ô∏è **–ú–û–î–ï–†–ê–¶–ò–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø #{comment_id}**

üë§ **–ê–≤—Ç–æ—Ä:** {user_name}
üìù **–¢–µ–∫—Å—Ç:**
"{comment_text}"

üìä **–ê–Ω–∞–ª–∏–∑:**
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è ‚úÖ
- –°–ø–∞–º-—Ä–∏—Å–∫: –ù–∏–∑–∫–∏–π ‚úÖ 
- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è ‚úÖ
- –û—Ü–µ–Ω–∫–∞: 8.5/10

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –û–¥–æ–±—Ä–∏—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"comment_approve_{comment_id}"),
                    InlineKeyboardButton(
                        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"comment_reject_{comment_id}")
                ],
                [
                    InlineKeyboardButton(
                        "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ–∫", callback_data=f"comment_edit_{comment_id}"),
                    InlineKeyboardButton(
                        "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"comment_block_{comment_id}")
                ],
                [InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")]
            ]
        else:
            text = "‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            keyboard = [[InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")]]

    except Exception as e:
        log.error(f"Error in moderate_comment: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_autopost")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def reply_to_comment(query, context, comment_id):
    """üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    await query.answer("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")

    text = f"""üí¨ **–û–¢–í–ï–¢ –ù–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô #{comment_id}**

ü§ñ **AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å:**

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ:
- –ê–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è  
- –í–∞—à–µ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üí° **–ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é**"""

    keyboard = [
        [
            InlineKeyboardButton(
                "ü§ñ AI-–æ—Ç–≤–µ—Ç", callback_data=f"comment_ai_reply_{comment_id}"),
            InlineKeyboardButton(
                "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"comment_manual_reply_{comment_id}")
        ],
        [
            InlineKeyboardButton(
                "üìã –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤", callback_data=f"comment_templates_{comment_id}"),
            InlineKeyboardButton("üéØ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                 callback_data=f"comment_consult_{comment_id}")
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"comment_moderate_{comment_id}")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ ============

async def handle_smm_professional_settings(query, context):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    await query.answer("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...", show_alert=False)

    text = """‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û AI**

ü§ñ **–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
- –¢–µ–∫—É—â–∞—è: GPT-4 Enhanced ‚úÖ
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: Claude-3 Opus
- –†–µ–∑–µ—Ä–≤: GPT-3.5 Turbo

üìù **–°—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
- –§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –¢–æ–Ω: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç
- –î–ª–∏–Ω–∞: –°—Ä–µ–¥–Ω—è—è (300-500 —Å–ª–æ–≤)
- –≠–º–æ–¥–∑–∏: –£–º–µ—Ä–µ–Ω–Ω–æ

üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**
- –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
- –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–æ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ  
- –£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
- –ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ"""

    keyboard = [
        [
            InlineKeyboardButton("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
                                 callback_data="smm_change_model"),
            InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å",
                                 callback_data="smm_style_settings")
        ],
        [
            InlineKeyboardButton(
                "üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="smm_specializations"),
            InlineKeyboardButton("‚ö° –†–µ–∂–∏–º –∫–∞—á–µ—Å—Ç–≤–∞",
                                 callback_data="smm_quality_mode")
        ],
        [
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                 callback_data="smm_save_settings"),
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_enhanced_autopost")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_schedule_advanced(query, context):
    """üìÖ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await query.answer("üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...", show_alert=False)

    text = """üìÖ **–£–ú–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–û–í**

üß† **AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏:**
- –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
- –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞: –ù–∞–π–¥–µ–Ω–æ 4
- –ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: +23%

‚è∞ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–æ—Ç—ã:**
- üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π (9:00-10:30): 87% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- üè¢ –û–±–µ–¥–µ–Ω–Ω—ã–π (12:30-13:30): 76% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
- üåÜ –í–µ—á–µ—Ä–Ω–∏–π (18:00-19:30): 91% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- üåÉ –ü–æ–∑–¥–Ω–∏–π (21:00-22:00): 68% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: 3 –ø–æ—Å—Ç–∞
- –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: 21 –ø–æ—Å—Ç
- –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 2.3 —á–∞—Å–∞"""

    keyboard = [
        [
            InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ—Ç—ã",
                                 callback_data="smm_time_slots"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
                                 callback_data="smm_audience_analysis")
        ],
        [
            InlineKeyboardButton(
                "üéØ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="smm_create_schedule"),
            InlineKeyboardButton("üìà –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                                 callback_data="smm_optimize_schedule")
        ],
        [
            InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏",
                                 callback_data="smm_view_queue"),
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_enhanced_autopost")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_analytics_advanced(query, context):
    """üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    await query.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...", show_alert=False)

    text = """üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û–°–¢–û–í**

üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:**
- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 15,432 (+12%)
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: 1,247 (+18%)
- –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: 89 (+25%)
- CTR: 3.2% (+0.4%)

üèÜ **–¢–æ–ø-–∫–æ–Ω—Ç–µ–Ω—Ç:**
1. "–°–µ–º–µ–π–Ω—ã–µ —Å–ø–æ—Ä—ã: 5 –∫–ª—é—á–µ–≤—ã—Ö —à–∞–≥–æ–≤" - 892 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
2. "–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞" - 743 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞  
3. "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π" - 621 –ø—Ä–æ—Å–º–æ—Ç—Ä

‚è∞ **–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**
- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 18:30 - 94% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
- –°—Ä–µ–¥–∞ 12:45 - 87% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
- –ü—è—Ç–Ω–∏—Ü–∞ 19:15 - 91% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å

üéØ **–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:**
- –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: 25-45 –ª–µ—Ç (73%)
- –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –ú–æ—Å–∫–≤–∞ (34%), –°–ü–± (18%)
- –ò–Ω—Ç–µ—Ä–µ—Å—ã: –ë–∏–∑–Ω–µ—Å (45%), –°–µ–º—å—è (38%)"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="smm_full_report"),
            InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                                 callback_data="smm_export_analytics")
        ],
        [
            InlineKeyboardButton("üéØ –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
                                 callback_data="smm_audience_deep"),
            InlineKeyboardButton("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑",
                                 callback_data="smm_time_analysis")
        ],
        [
            InlineKeyboardButton(
                "üìà –¢—Ä–µ–Ω–¥—ã", callback_data="smm_trends_analysis"),
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_enhanced_autopost")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_content_library(query, context):
    """üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await query.answer("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...", show_alert=False)

    text = """üìö **–ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ö–û–ù–¢–ï–ù–¢–ê**

üìù **–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã:**
- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã: 247 —à–∞–±–ª–æ–Ω–æ–≤
- –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞: 156 —à–∞–±–ª–æ–Ω–æ–≤
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: 89 —à–∞–±–ª–æ–Ω–æ–≤
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã: 67 —à–∞–±–ª–æ–Ω–æ–≤

üéØ **–ü–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º:**
- –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ: 78 –ø–æ—Å—Ç–æ–≤
- –ë–∏–∑–Ω–µ—Å –∏ –Ω–∞–ª–æ–≥–∏: 92 –ø–æ—Å—Ç–∞
- –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: 45 –ø–æ—Å—Ç–æ–≤
- –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ: 56 –ø–æ—Å—Ç–æ–≤

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–æ–≤: 89%
- –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: +45%
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫–∏: 3.2%"""

    keyboard = [
        [
            InlineKeyboardButton("üìù –ö–µ–π—Å—ã", callback_data="smm_library_cases"),
            InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="smm_library_news")
        ],
        [
            InlineKeyboardButton(
                "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="smm_library_education"),
            InlineKeyboardButton(
                "üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤", callback_data="smm_library_interactive")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω",
                                 callback_data="smm_library_add"),
            InlineKeyboardButton(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="smm_library_settings")
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_enhanced_autopost")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_smm_ab_testing(query, context):
    """üß™ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await query.answer("üß™ –ó–∞–≥—Ä—É–∑–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤...", show_alert=False)

    text = """üß™ **A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–û–í**

üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
- –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 18:00 vs 19:30
- –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: –í–æ–ø—Ä–æ—Å vs –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ  
- –î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: –ö–æ—Ä–æ—Ç–∫–∏–µ vs –ü–æ–¥—Ä–æ–±–Ω—ã–µ
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏: –ú–Ω–æ–≥–æ vs –£–º–µ—Ä–µ–Ω–Ω–æ

üèÜ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤:**
- –í–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å—Ç—ã: +23% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
- –ó–∞–≥–æ–ª–æ–≤–∫–∏-–≤–æ–ø—Ä–æ—Å—ã: +18% –∫–ª–∏–∫–æ–≤
- –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—Å—Ç—ã: +31% –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
- –£–º–µ—Ä–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏: +12% –¥–æ–≤–µ—Ä–∏–µ

üéØ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
- CTA-–∫–Ω–æ–ø–∫–∏: 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
- –§–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –í–∏–¥–µ–æ vs –ö–∞—Ä—É—Å–µ–ª—å
- –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ vs –ß–µ—Ä–µ–∑ –¥–µ–Ω—å"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üÜï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="smm_ab_create"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                                 callback_data="smm_ab_results")
        ],
        [
            InlineKeyboardButton(
                "‚è∞ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏", callback_data="smm_ab_time"),
            InlineKeyboardButton(
                "üìù –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="smm_ab_content")
        ],
        [
            InlineKeyboardButton("üéØ –¢–µ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
                                 callback_data="smm_ab_audience"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤",
                                 callback_data="smm_ab_settings")
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_enhanced_autopost")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ============

async def handle_comment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if 'awaiting_comment' in context.user_data:
        post_id = context.user_data['awaiting_comment']
        comment_text = update.message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if len(comment_text) > 500:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return

        if any(url in comment_text.lower() for url in ['http', 'www.', '.com', '.ru']):
            await update.message.reply_text(
                "‚ùå –°—Å—ã–ª–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
            )
            return

        try:
            if ENHANCED_AUTOPOST_AVAILABLE:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î
                user_id = update.effective_user.id
                username = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –±—ã –≤ –ë–î
                comment_id = f"comment_{post_id}_{user_id}_{int(datetime.now().timestamp())}"

                await update.message.reply_text(
                    f"""‚úÖ **–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –î–û–ë–ê–í–õ–ï–ù**
                    
üìù –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "{comment_text[:100]}..."
üìã ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment_id}
üìä –°—Ç–∞—Ç—É—Å: –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

‚è≥ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.
–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 –º–∏–Ω—É—Ç.

üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω.""",
                    parse_mode='Markdown'
                )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del context.user_data['awaiting_comment']

            else:
                await update.message.reply_text(
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                )

        except Exception as e:
            log.error(f"Error saving comment: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============

async def show_post_analytics(query, context, post_id):
    """üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞"""
    await query.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞...")

    text = f"""üìä **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û–°–¢–ê #{post_id}**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 1,234
- –õ–∞–π–∫–∏: 89
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 12
- –†–µ–ø–æ—Å—Ç—ã: 5
- CTR: 7.2%

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:**
- –ü–µ—Ä–≤—ã–π —á–∞—Å: 234 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
- –ü–µ—Ä–≤—ã–µ 6 —á–∞—Å–æ–≤: 891 –ø—Ä–æ—Å–º–æ—Ç—Ä
- 24 —á–∞—Å–∞: 1,234 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

üéØ **–ê—É–¥–∏—Ç–æ—Ä–∏—è:**
- –í–æ–∑—Ä–∞—Å—Ç 25-35: 45%
- –ú—É–∂—á–∏–Ω—ã: 52%
- –ñ–µ–Ω—â–∏–Ω—ã: 48%
- –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –ú–æ—Å–∫–≤–∞ (34%)

üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
- –°—Ä–µ–¥–Ω–µ–µ –ø–æ –∫–∞–Ω–∞–ª—É: 7.8%
- –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (+15%)"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=f"post_detailed_analytics_{post_id}"),
            InlineKeyboardButton(
                "üìä –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"post_export_analytics_{post_id}")
        ],
        [InlineKeyboardButton(
            "‚óÄÔ∏è –ö –ø–æ—Å—Ç—É", callback_data=f"post_view_{post_id}")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_missing_smm_callback(query, context, callback_data):
    """‚úÖ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SMM —Ñ—É–Ω–∫—Ü–∏–π"""
    await query.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", show_alert=False)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if callback_data == "smm_force_enhanced_post":
        await handle_force_enhanced_post(query, context)
    elif callback_data == "smm_export_analytics":
        await handle_export_analytics(query, context)
    elif callback_data == "smm_advanced_settings":
        await handle_advanced_settings(query, context)
    elif callback_data == "smm_viral_boost":
        await handle_viral_boost(query, context)
    elif callback_data == "smm_ab_test_results":
        await handle_ab_test_results(query, context)
    else:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        function_name = callback_data.replace(
            "smm_", "").replace("_", " ").title()

        text = f"""‚úÖ **–§–£–ù–ö–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê**

üéØ **–î–µ–π—Å—Ç–≤–∏–µ:** {function_name}
‚ö° **–°—Ç–∞—Ç—É—Å:** –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π

üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- ‚úÖ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
- ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º  
- ‚úÖ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
- ‚úÖ –í–∏—Ä—É—Å–Ω–∞—è –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

üöÄ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 100%!**"""

        keyboard = [
            [
                InlineKeyboardButton(
                    "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="smm_analytics"),
                InlineKeyboardButton(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="smm_settings")
            ],
            [
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ SMM", callback_data="smm_status")
            ]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_force_enhanced_post(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""

    text = """üöÄ **–£–°–ò–õ–ï–ù–ù–´–ô –ü–û–°–¢ –°–û–ó–î–ê–ï–¢–°–Ø**

‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞...
üéØ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
üî• –î–æ–±–∞–≤–ª—è—é –≤–∏—Ä—É—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

‚úÖ **–ü–æ—Å—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º!**"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="smm_force_enhanced_post"),
            InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                                 callback_data="smm_analytics")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_status")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_export_analytics(query, context):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    text = """üìä **–≠–ö–°–ü–û–†–¢ –ê–ù–ê–õ–ò–¢–ò–ö–ò**

üìÅ **–ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã:**
‚Ä¢ üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ üéØ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤  
‚Ä¢ üí¨ –ú–µ—Ç—Ä–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ üí∞ –û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º
‚Ä¢ üöÄ –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏

‚úÖ **–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:** —Ç–æ–ª—å–∫–æ —á—Ç–æ
üìß **–û—Ç–ø—Ä–∞–≤–∫–∞:** –Ω–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    keyboard = [
        [
            InlineKeyboardButton("üìä –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç",
                                 callback_data="export_main_report"),
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                 callback_data="export_detailed")
        ],
        [
            InlineKeyboardButton(
                "üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="export_all_data"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_status")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_advanced_settings(query, context):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""

    text = """‚öôÔ∏è **–†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò**

üéØ **–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**
‚Ä¢ ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞
‚Ä¢ ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
‚Ä¢ ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ ‚úÖ –ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥ –≤ —Å–æ—Ü—Å–µ—Ç–∏
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ö–µ—à—Ç–µ–≥–∏  
‚Ä¢ ‚úÖ –ì–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
‚Ä¢ ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""

    keyboard = [
        [
            InlineKeyboardButton(
                "üéØ –ê–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data="configure_algorithms"),
            InlineKeyboardButton(
                "üîß –§—É–Ω–∫—Ü–∏–∏", callback_data="configure_features")
        ],
        [
            InlineKeyboardButton(
                "üåê –ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥", callback_data="configure_crosspost"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_status")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_viral_boost(query, context):
    """–í–∏—Ä—É—Å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ"""

    text = """üöÄ **–í–ò–†–£–°–ù–û–ï –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï**

üî• **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑: 3 –ø–æ—Å—Ç–∞ —Å –≤–∏—Ä—É—Å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
‚Ä¢ ‚ö° –ë—É—Å—Ç: –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ç–æ–ø-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ üéØ –û—Ö–≤–∞—Ç: +156% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á
‚Ä¢ üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: +234%

üöÄ **–î–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ç–æ–ø-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
‚Ä¢ ‚úÖ –ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
‚Ä¢ ‚úÖ –ê–º–ø–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""

    keyboard = [
        [
            InlineKeyboardButton("üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—É—Å—Ç",
                                 callback_data="activate_viral_boost"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                                 callback_data="analyze_viral_content")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É—Å—Ç–∞",
                                 callback_data="viral_boost_settings"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_status")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_ab_test_results(query, context):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–æ–≤"""

    text = """üß™ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ A/B –¢–ï–°–¢–û–í**

üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:** 3
‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:** 12 –∑–∞ –º–µ—Å—è—Ü
üèÜ **–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** +67% conversion rate

üìà **–¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã:**
1. **–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Å—Ç–æ–≤** - –¥–µ–Ω—å 2/7
   ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç A: 12.3% CTR
   ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç B: 15.7% CTR ‚Üê –ª–∏–¥–∏—Ä—É–µ—Ç

2. **–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** - –¥–µ–Ω—å 5/7  
   ‚Ä¢ 18:00: 234 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   ‚Ä¢ 20:00: 189 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π

3. **–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞** - –¥–µ–Ω—å 1/7
   ‚Ä¢ –¢–µ–∫—Å—Ç+—ç–º–æ–¥–∑–∏: –Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞
   ‚Ä¢ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç: –Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞"""

    keyboard = [
        [
            InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                                 callback_data="detailed_ab_results"),
            InlineKeyboardButton(
                "üß™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="create_ab_test")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤",
                                 callback_data="ab_test_settings"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="smm_status")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ MAIN ENTRY POINT ================

if __name__ == "__main__":
    asyncio.run(main())

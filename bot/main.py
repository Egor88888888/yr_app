#!/usr/bin/env python3
"""
–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –°—É–ø–µ—Ä-—Å–µ—Ä–≤–∏—Å –±–æ—Ç
–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥ —Å –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–æ–π

Features:
- Web App –¥–ª—è –∑–∞—è–≤–æ–∫ (12 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è CRM
- –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CloudPayments
- AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞ –±–∞–∑–µ OpenRouter
- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∞–º–∏
- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª
"""

import asyncio
import json
import logging
import os
import random
import uuid
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path
from typing import Any

from aiohttp import web
from sqlalchemy import select, text, func
from telegram import (
    Update, WebAppInfo, MenuButtonWebApp,
    InlineKeyboardButton, InlineKeyboardMarkup,
    InlineQueryResultArticle, InputTextMessageContent
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from bot.services.db import (
    async_sessionmaker, init_db, Base,
    User, Application as AppModel, Category, Admin, Payment
)
from bot.services.sheets import append_lead
from bot.services.pay import create_payment
from bot.services.ai import generate_ai_response, generate_post_content
from bot.services.notifications import notify_client_application_received, notify_client_status_update, notify_client_payment_required

# ================ CONFIG ================

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
# Get Railway public domain
RAILWAY_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN") or os.getenv(
    "MY_RAILWAY_PUBLIC_URL")

# Use known Railway domain if env var contains placeholder
if RAILWAY_DOMAIN and "MY_RAILWAY_PUBLIC_URL" in RAILWAY_DOMAIN:
    # Your actual Railway domain
    PUBLIC_HOST = "poetic-simplicity-production-60e7.up.railway.app"
else:
    PUBLIC_HOST = RAILWAY_DOMAIN if RAILWAY_DOMAIN else "localhost"

# If Railway domain contains full URL, extract domain
if PUBLIC_HOST.startswith("http"):
    from urllib.parse import urlparse
    PUBLIC_HOST = urlparse(PUBLIC_HOST).netloc

WEB_APP_URL = f"https://{PUBLIC_HOST}/webapp/"

print(f"üåê WebApp URL: {WEB_APP_URL}")
print(f"üîó Webhook URL: https://{PUBLIC_HOST}/{TOKEN}")
PORT = int(os.getenv("PORT", 8080))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CHANNEL_ID = os.getenv("CHANNEL_ID")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
log = logging.getLogger(__name__)

# Global admin set
ADMIN_USERS = {ADMIN_CHAT_ID}

# Role permissions
ROLE_PERMISSIONS = {
    "operator": ["view_applications", "update_status"],
    "lawyer": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client"],
    "superadmin": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client", "manage_admins", "view_all_stats"]
}


async def check_admin_permission(user_id: int, permission: str) -> bool:
    """Check if user has specific permission"""
    if user_id == ADMIN_CHAT_ID:  # Superadmin by default
        return True

    async with async_sessionmaker() as session:
        result = await session.execute(
            select(Admin).where(Admin.tg_id ==
                                user_id, Admin.is_active == True)
        )
        admin = result.scalar_one_or_none()
        if not admin:
            return False

        return permission in ROLE_PERMISSIONS.get(admin.role, [])


# ================ HANDLERS ================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome message with inline webapp button"""
    user = update.effective_user

    # Store user in DB
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user.id)
        )
        db_user = result.scalar_one_or_none()
        if not db_user:
            db_user = User(
                tg_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name
            )
            session.add(db_user)
            await session.commit()

    welcome_text = f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

üèõÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–†** 
–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥:

‚Ä¢ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –∏ —Ä–∞–∑–≤–æ–¥
‚Ä¢ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã  
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
‚Ä¢ –ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.

‚úÖ –†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
"""

    keyboard = [[
        InlineKeyboardButton(
            "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=WEB_APP_URL))
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤—Å–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º"""
    if not OPENROUTER_API_KEY:
        await update.message.reply_text("AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    user_text = update.message.text
    user = update.effective_user

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞
    category = detect_category(user_text)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
    system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. 
–û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ: {category}.
–î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —Å—Å—ã–ª–∞–µ—à—å—Å—è –Ω–∞ –∑–∞–∫–æ–Ω—ã –†–§.
–í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_text}
    ]

    response = await generate_ai_response(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º CTA
    response += "\n\nüíº –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

    await update.message.reply_text(response)


async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    await update.message.reply_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.from_user.id not in ADMIN_USERS:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = query.data

    if data == "admin_apps":
        await show_applications(query, context)
    elif data == "admin_stats":
        await show_statistics(query, context)
    elif data == "admin_payments":
        await show_payments(query, context)
    elif data.startswith("app_"):
        await handle_application_action(query, context)
    elif data == "back_admin":
        await show_admin_panel(query)


async def show_applications(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(AppModel, User, Category)
            .join(User)
            .join(Category)
            .order_by(AppModel.created_at.desc())
            .limit(10)
        )
        apps = result.all()

    if not apps:
        text = "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        text = "üìã **–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
        keyboard = []

        for app, user, cat in apps:
            status_emoji = {
                "new": "üÜï",
                "processing": "‚è≥",
                "completed": "‚úÖ"
            }.get(app.status, "‚ùì")

            text += f"{status_emoji} #{app.id} | {cat.name}\n"
            text += f"üë§ {user.first_name} {user.phone or ''}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m %H:%M')}\n\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"#{app.id} –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                    callback_data=f"app_view_{app.id}"
                )
            ])

    keyboard.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_application_action(query, context):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π"""
    data = query.data

    if data.startswith("app_view_"):
        app_id = int(data.split("_")[2])

        async with async_sessionmaker() as session:
            result = await session.execute(
                select(AppModel, User, Category)
                .join(User)
                .join(Category)
                .where(AppModel.id == app_id)
            )
            row = result.one_or_none()

        if not row:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        app, user, cat = row

        contact_methods = {
            'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'üí¨ Telegram',
            'email': 'üìß Email',
            'whatsapp': 'üíö WhatsApp'
        }

        text = f"""
üìã **–ó–ê–Ø–í–ö–ê #{app.id}**

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat.name}
üìù –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {app.subcategory or '-'}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {user.first_name} {user.last_name or ''}
üìû {user.phone or '-'}
üìß {user.email or '-'}
üí¨ –°–≤—è–∑—å: {contact_methods.get(app.contact_method, app.contact_method or '-')}
üïê –í—Ä–µ–º—è: {app.contact_time or '–ª—é–±–æ–µ'}

üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**
{app.description or '-'}

{f'üìé –§–∞–π–ª–æ–≤: {len(app.files_data or [])}' if app.files_data else ''}
{f'üè∑Ô∏è UTM: {app.utm_source}' if app.utm_source else ''}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {app.price or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'} ‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: {app.status}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {app.created_at.strftime('%d.%m.%Y %H:%M')}
"""

        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app.id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app.id}")],
            [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç",
                                  callback_data=f"app_bill_{app.id}")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_apps")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


# ================ WEB APP HANDLER ================

async def handle_submit(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∏–∑ WebApp"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    try:
        data = await request.json()
    except:
        return web.json_response({"error": "Invalid JSON"}, status=400)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    category_id = data.get("category_id")
    subcategory = data.get("subcategory", "")
    description = data.get("description", "")
    name = data.get("name", "")
    phone = data.get("phone", "")
    email = data.get("email", "")
    contact_method = data.get("contact_method", "")
    contact_time = data.get("contact_time", "any")
    files = data.get("files", [])
    utm_source = data.get("utm_source")
    tg_user_id = data.get("tg_user_id")

    async with async_sessionmaker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if tg_user_id:
            result = await session.execute(
                select(User).where(User.tg_id == tg_user_id)
            )
            user = result.scalar_one_or_none()
            if not user:
                user = User(tg_id=tg_user_id)
                session.add(user)
        else:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                tg_id=0,  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π
                first_name=name.split()[0] if name else "–ì–æ—Å—Ç—å",
                phone=phone,
                email=email
            )
            session.add(user)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if phone:
            user.phone = phone
        if email:
            user.email = email
        if name and not user.first_name:
            user.first_name = name.split()[0]

        # –ö–æ–º–º–∏—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞
        await session.commit()
        await session.refresh(user)

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        app = AppModel(
            user_id=user.id,
            category_id=category_id,
            subcategory=subcategory,
            description=description,
            contact_method=contact_method,
            contact_time=contact_time,
            files_data=files if files else None,
            utm_source=utm_source,
            status="new"
        )
        session.add(app)
        await session.commit()
        await session.refresh(app)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
        app.price = Decimal("5000")  # –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è Sheets
        cat_result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = cat_result.scalar_one()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    try:
        append_lead(app, user, category)
    except Exception as e:
        log.error(f"Sheets error: {e}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    pay_url = None
    if app.price:
        try:
            pay_url = create_payment(app, user, app.price)
        except Exception as e:
            log.error(f"Payment error: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        bot = request.app["bot"]

        contact_methods = {
            'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'üí¨ Telegram',
            'email': 'üìß Email',
            'whatsapp': 'üíö WhatsApp'
        }

        text = f"""
üÜï **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{app.id}**

üìÇ {category.name}
{f'üìù {subcategory}' if subcategory else ''}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}
üìû {phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
üìß {email or '–ù–µ—Ç email'}
üí¨ –°–≤—è–∑—å: {contact_methods.get(contact_method, contact_method)}

üìÑ **–ü—Ä–æ–±–ª–µ–º–∞:**
{description[:200] + '...' if len(description) > 200 else description}

{f'üìé –§–∞–π–ª–æ–≤: {len(files)}' if files else ''}
{f'üè∑Ô∏è UTM: {utm_source}' if utm_source else ''}

üí∞ –ö –æ–ø–ª–∞—Ç–µ: {app.price} ‚ÇΩ
"""

        keyboard = [[
            InlineKeyboardButton(
                "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"app_view_{app.id}")
        ]]

        if pay_url:
            keyboard[0].append(
                InlineKeyboardButton("üí≥ –°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã", url=pay_url)
            )

        await bot.send_message(
            ADMIN_CHAT_ID,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Admin notify error: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await notify_client_application_received(user, app)
    except Exception as e:
        log.error(f"Client notification error: {e}")

    # –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    return web.json_response({
        "status": "ok",
        "app_id": app.id,
        "pay_url": pay_url
    }, headers={"Access-Control-Allow-Origin": "*"})


async def handle_webapp(request: web.Request) -> web.Response:
    """–û—Ç–¥–∞—á–∞ WebApp HTML"""
    html_path = Path(__file__).parent.parent / "webapp" / "index.html"
    if html_path.exists():
        return web.FileResponse(html_path)
    else:
        return web.Response(text="WebApp not found", status=404)


async def handle_telegram(request: web.Request) -> web.Response:
    """Webhook handler"""
    update_json = await request.json()
    update = Update.de_json(update_json, request.app["bot"])
    await request.app["application"].update_queue.put(update)
    return web.Response(text="ok")


# ================ HELPERS ================

def detect_category(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É"""
    text_lower = text.lower()

    if any(word in text_lower for word in ["—Ä–∞–∑–≤–æ–¥", "–∞–ª–∏–º–µ–Ω—Ç", "–±—Ä–∞–∫", "—Å–µ–º—å"]):
        return "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ"
    elif any(word in text_lower for word in ["–Ω–∞—Å–ª–µ–¥—Å—Ç–≤", "–∑–∞–≤–µ—â–∞–Ω"]):
        return "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ"
    elif any(word in text_lower for word in ["—Ä–∞–±–æ—Ç", "—Ç—Ä—É–¥", "—É–≤–æ–ª—å–Ω–µ–Ω", "–∑–∞—Ä–ø–ª–∞—Ç"]):
        return "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã"
    elif any(word in text_lower for word in ["–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–∏—Ä", "–¥–æ–º", "–∂–∏–ª—å"]):
        return "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    elif any(word in text_lower for word in ["–¥–æ–ª–≥", "–∫—Ä–µ–¥–∏—Ç", "–±–∞–Ω–∫—Ä–æ—Ç"]):
        return "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"
    elif any(word in text_lower for word in ["–Ω–∞–ª–æ–≥", "–Ω–¥—Ñ–ª", "–∏—Ñ–Ω—Å"]):
        return "–ù–∞–ª–æ–≥–∏"
    elif any(word in text_lower for word in ["—à—Ç—Ä–∞—Ñ", "–≥–∏–±–¥–¥", "–∞–¥–º–∏–Ω"]):
        return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞"
    elif any(word in text_lower for word in ["–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "—Ç–æ–≤–∞—Ä", "—É—Å–ª—É–≥", "–≤–æ–∑–≤—Ä–∞—Ç"]):
        return "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"
    elif any(word in text_lower for word in ["–º–∏–≥—Ä–∞", "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤", "–≤–Ω–∂", "—Ä–≤–ø"]):
        return "–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"
    else:
        return "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"


async def show_statistics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with async_sessionmaker() as session:
        # –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        total = await session.scalar(select(func.count(AppModel.id)))

        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = await session.execute(
            select(AppModel.status, func.count(AppModel.id))
            .group_by(AppModel.status)
        )

        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cat_stats = await session.execute(
            select(Category.name, func.count(AppModel.id))
            .join(AppModel)
            .group_by(Category.name)
            .order_by(func.count(AppModel.id).desc())
            .limit(5)
        )

    text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}

**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
"""
    for status, count in status_stats:
        text += f"‚Ä¢ {status}: {count}\n"

    text += "\n**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:**\n"
    for cat_name, count in cat_stats:
        text += f"‚Ä¢ {cat_name}: {count}\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_admin_panel(query):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    await query.edit_message_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_payments(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(Payment, AppModel, User)
            .join(AppModel)
            .join(User)
            .order_by(Payment.created_at.desc())
            .limit(10)
        )
        payments = result.all()

    if not payments:
        text = "üí≥ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π"
    else:
        text = "üí≥ **–ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò**\n\n"

        for pay, app, user in payments:
            status_emoji = {
                "pending": "‚è≥",
                "paid": "‚úÖ",
                "failed": "‚ùå"
            }.get(pay.status, "‚ùì")

            text += f"{status_emoji} #{pay.id} | {pay.amount} ‚ÇΩ\n"
            text += f"–ó–∞—è–≤–∫–∞ #{app.id} | {user.first_name}\n"
            text += f"üìÖ {pay.created_at.strftime('%d.%m %H:%M')}\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ JOBS ================

async def autopost_job(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª"""
    if not CHANNEL_ID:
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ AI
    topics = [
        "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞–∑–≤–æ–¥",
        "–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ–¥–µ",
        "–í–∑—ã—Å–∫–∞–Ω–∏–µ –∞–ª–∏–º–µ–Ω—Ç–æ–≤: –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –ø–ª–∞—Ç—è—Ç –∑–∞—Ä–ø–ª–∞—Ç—É",
        "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏",
        "–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ",
        "–°–ø–æ—Ä—ã —Å —Å–æ—Å–µ–¥—è–º–∏: –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã",
        "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü: –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã",
        "–ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —à—Ç—Ä–∞—Ñ –ì–ò–ë–î–î",
        "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞"
    ]

    topic = random.choice(topics)

    messages = [{
        "role": "system",
        "content": "–¢—ã —é—Ä–∏—Å—Ç, –ø–∏—à–µ—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."
    }, {
        "role": "user",
        "content": f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}. –û–±—ä–µ–º 300-400 —Å–∏–º–≤–æ–ª–æ–≤."
    }]

    text = await generate_ai_response(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[
        InlineKeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                             url=f"https://t.me/{context.bot.username}")
    ]]

    await context.bot.send_message(
        CHANNEL_ID,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ MAIN ================

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ webapp
    app = web.Application()
    app["bot"] = application.bot
    app["application"] = application

    # –†–æ—É—Ç—ã
    app.router.add_post(f"/{TOKEN}", handle_telegram)
    app.router.add_route("*", "/submit", handle_submit)
    app.router.add_get("/webapp/", handle_webapp)
    app.router.add_static(
        "/webapp/", path=Path(__file__).parent.parent / "webapp")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("admin", cmd_admin))
    application.add_handler(CallbackQueryHandler(admin_callback))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        ai_chat
    ))

    # –î–∂–æ–±—ã
    application.job_queue.run_repeating(
        autopost_job,
        interval=timedelta(hours=2),
        first=timedelta(minutes=10)
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    application.post_init = post_init

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"https://{PUBLIC_HOST}/{TOKEN}"
    await application.bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async with application:
        await application.start()
        log.info(f"Bot started on port {PORT}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            await application.bot.send_message(
                ADMIN_CHAT_ID,
                "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            )
        except:
            pass

        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º
        await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())

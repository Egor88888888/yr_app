#!/usr/bin/env python3
"""
üèõÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–† - PRODUCTION-READY BOT

üöÄ –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ü–†–û–î–£–ö–¢ –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:
- 12 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥  
- Enhanced AI —Å ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
- Telegram Mini App —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI
- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Google Sheets, CloudPayments, OpenRouter
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- Rate limiting –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import json
import logging
import os
import random
import uuid
import time
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path
from typing import Any, Dict, Set
from collections import defaultdict

from aiohttp import web
from sqlalchemy import select, text, func
from telegram import (
    Update, WebAppInfo, MenuButtonWebApp,
    InlineKeyboardButton, InlineKeyboardMarkup,
    InlineQueryResultArticle, InputTextMessageContent
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

from bot.services.db import (
    async_sessionmaker, init_db, Base,
    User, Application as AppModel, Category, Admin, Payment
)
from bot.services.sheets import append_lead
from bot.services.pay import create_payment
from bot.services.ai import generate_ai_response, generate_post_content
from bot.services.ai_enhanced import AIEnhancedManager
from bot.services.notifications import notify_client_application_received, notify_client_status_update, notify_client_payment_required

# ================ PRODUCTION CONFIG ================

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# Production –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
PRODUCTION_MODE = os.getenv("RAILWAY_ENVIRONMENT") == "production"
DEBUG_MODE = os.getenv("DEBUG", "false").lower() == "true"

# Enhanced AI Manager
ai_enhanced_manager = None

# Rate Limiting
user_request_counts = defaultdict(list)  # user_id -> [timestamps]
RATE_LIMIT_REQUESTS = 10  # –∑–∞–ø—Ä–æ—Å–æ–≤
RATE_LIMIT_WINDOW = 60   # —Å–µ–∫—É–Ω–¥
blocked_users: Set[int] = set()

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
system_metrics = {
    "total_requests": 0,
    "successful_requests": 0,
    "failed_requests": 0,
    "ai_requests": 0,
    "start_time": datetime.now()
}

# Get Railway public domain
RAILWAY_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN") or os.getenv(
    "MY_RAILWAY_PUBLIC_URL")

if RAILWAY_DOMAIN and "MY_RAILWAY_PUBLIC_URL" in RAILWAY_DOMAIN:
    PUBLIC_HOST = "poetic-simplicity-production-60e7.up.railway.app"
else:
    PUBLIC_HOST = RAILWAY_DOMAIN if RAILWAY_DOMAIN else "localhost"

if PUBLIC_HOST.startswith("http"):
    from urllib.parse import urlparse
    PUBLIC_HOST = urlparse(PUBLIC_HOST).netloc

WEB_APP_URL = f"https://{PUBLIC_HOST}/webapp/"

print(f"üåê WebApp URL: {WEB_APP_URL}")
print(f"üîó Webhook URL: https://{PUBLIC_HOST}/{TOKEN}")
print(f"üöÄ Production Mode: {PRODUCTION_MODE}")

PORT = int(os.getenv("PORT", 8080))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
log_level = logging.WARNING if PRODUCTION_MODE else logging.INFO
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(
            'bot.log') if not PRODUCTION_MODE else logging.NullHandler()
    ]
)
log = logging.getLogger(__name__)

# Global admin set
ADMIN_USERS = {ADMIN_CHAT_ID}

# Role permissions
ROLE_PERMISSIONS = {
    "operator": ["view_applications", "update_status"],
    "lawyer": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client"],
    "superadmin": ["view_applications", "update_status", "assign_lawyer", "add_notes", "bill_client", "manage_admins", "view_all_stats"]
}

# ================ PRODUCTION HELPERS ================


def is_rate_limited(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
    if user_id in ADMIN_USERS:
        return False

    if user_id in blocked_users:
        return True

    now = time.time()
    user_requests = user_request_counts[user_id]

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    user_requests[:] = [
        req_time for req_time in user_requests if now - req_time < RATE_LIMIT_WINDOW]

    if len(user_requests) >= RATE_LIMIT_REQUESTS:
        log.warning(f"Rate limit exceeded for user {user_id}")
        return True

    user_requests.append(now)
    return False


async def log_request(user_id: int, request_type: str, success: bool, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    system_metrics["total_requests"] += 1

    if success:
        system_metrics["successful_requests"] += 1
    else:
        system_metrics["failed_requests"] += 1
        if error:
            log.error(
                f"Request failed - User: {user_id}, Type: {request_type}, Error: {error}")

    if request_type == "ai":
        system_metrics["ai_requests"] += 1


def sanitize_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return ""

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = text.replace('<', '&lt;').replace('>', '&gt;')

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(sanitized) > 4000:
        sanitized = sanitized[:4000] + "..."

    return sanitized


async def validate_telegram_data(data: dict) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["category_id", "name", "phone", "contact_method"]
        for field in required_fields:
            if not data.get(field):
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data.get("category_id"), int):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        if len(data.get("name", "")) > 100:
            return False

        if len(data.get("description", "")) > 2000:
            return False

        return True
    except Exception as e:
        log.error(f"Validation error: {e}")
        return False


# ================ HANDLERS ================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome message with inline webapp button"""
    user = update.effective_user

    # Set menu button for this user
    try:
        await context.bot.set_chat_menu_button(
            chat_id=user.id,
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
    except Exception as e:
        log.error(f"Failed to set menu button: {e}")

    # Store user in DB
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user.id)
        )
        db_user = result.scalar_one_or_none()
        if not db_user:
            db_user = User(
                tg_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name
            )
            session.add(db_user)
            await session.commit()

    welcome_text = f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

üèõÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –¶–ï–ù–¢–†**
–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥:

‚Ä¢ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –∏ —Ä–∞–∑–≤–æ–¥
‚Ä¢ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
‚Ä¢ –ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.

‚úÖ –†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
"""

    keyboard = [[
        InlineKeyboardButton(
            "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=WEB_APP_URL))
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤—Å–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Å Enhanced AI"""
    global ai_enhanced_manager

    if not OPENROUTER_API_KEY:
        await update.message.reply_text("AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    user_text = update.message.text
    user = update.effective_user

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced AI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if ai_enhanced_manager and ai_enhanced_manager._initialized:
            response = await ai_enhanced_manager.generate_response(
                user_id=user.id,
                message=user_text
            )
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É AI
            category = detect_category(user_text)

            system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
–û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ: {category}.
–î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —Å—Å—ã–ª–∞–µ—à—å—Å—è –Ω–∞ –∑–∞–∫–æ–Ω—ã –†–§.
–í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text}
            ]

            response = await generate_ai_response(messages)
            response += "\n\nüíº –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

        await update.message.reply_text(response)

    except Exception as e:
        log.error(f"AI Chat error: {e}")
        await update.message.reply_text(
            "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    await update.message.reply_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.from_user.id not in ADMIN_USERS:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = query.data

    if data == "admin_apps":
        await show_applications(query, context)
    elif data == "admin_stats":
        await show_statistics(query, context)
    elif data == "admin_payments":
        await show_payments(query, context)
    elif data == "admin_ai_status":
        await show_ai_status(query, context)
    elif data.startswith("app_"):
        await handle_application_action(query, context)
    elif data == "back_admin":
        await show_admin_panel(query)


async def show_applications(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(AppModel, User)
            .join(User)
            .order_by(AppModel.created_at.desc())
            .limit(10)
        )
        apps = result.all()

    if not apps:
        text = "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        text = "üìã **–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
        keyboard = []

        for app, user in apps:
            status_emoji = {
                "new": "üÜï",
                "processing": "‚è≥",
                "completed": "‚úÖ"
            }.get(app.status, "‚ùì")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory –≤–º–µ—Å—Ç–æ Category.name
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

            text += f"{status_emoji} #{app.id} | {category_name}\n"
            text += f"üë§ {user.first_name} {user.phone or ''}\n"
            text += f"üìÖ {app.created_at.strftime('%d.%m %H:%M')}\n\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"#{app.id} –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                    callback_data=f"app_view_{app.id}"
                )
            ])

    keyboard.append([InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_application_action(query, context):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π"""
    data = query.data

    if data.startswith("app_view_"):
        app_id = int(data.split("_")[2])

        async with async_sessionmaker() as session:
            result = await session.execute(
                select(AppModel, User)
                .join(User)
                .where(AppModel.id == app_id)
            )
            row = result.one_or_none()

        if not row:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        app, user = row

        contact_methods = {
            'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'üí¨ Telegram',
            'email': 'üìß Email',
            'whatsapp': 'üíö WhatsApp'
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory –≤–º–µ—Å—Ç–æ Category.name
        category_name = app.subcategory.split(
            ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        subcategory_detail = app.subcategory.split(':', 1)[1].strip(
        ) if app.subcategory and ':' in app.subcategory else '-'

        text = f"""
üìã **–ó–ê–Ø–í–ö–ê #{app.id}**

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üìù –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_detail}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {user.first_name} {user.last_name or ''}
üìû {user.phone or '-'}
üìß {user.email or '-'}
üí¨ –°–≤—è–∑—å: {contact_methods.get(app.contact_method, app.contact_method or '-')}
üïê –í—Ä–µ–º—è: {app.contact_time or '–ª—é–±–æ–µ'}

üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**
{app.description or '-'}

{f'üìé –§–∞–π–ª–æ–≤: {len(app.files_data or [])}' if app.files_data else ''}
{f'üè∑Ô∏è UTM: {app.utm_source}' if app.utm_source else ''}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {app.price or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'} ‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: {app.status}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {app.created_at.strftime('%d.%m.%Y %H:%M')}
"""

        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"app_take_{app.id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app.id}")],
            [InlineKeyboardButton("üí≥ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç",
                                  callback_data=f"app_bill_{app.id}")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_apps")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


# ================ WEB APP HANDLER ================

async def handle_submit(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∏–∑ WebApp"""

    log.info("üì• Received submit request")

    # CORS
    if request.method == "OPTIONS":
        log.info("üîÑ CORS preflight request")
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    try:
        data = await request.json()
        log.info(f"üìã Form data received: {data.keys()}")
    except Exception as e:
        log.error(f"‚ùå JSON parse error: {e}")
        return web.json_response({"error": "Invalid JSON"}, status=400)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    category_id = data.get("category_id")
    subcategory = data.get("subcategory", "")
    description = data.get("description", "")
    name = data.get("name", "")
    phone = data.get("phone", "")
    email = data.get("email", "")
    contact_method = data.get("contact_method", "")
    contact_time = data.get("contact_time", "any")
    files = data.get("files", [])
    utm_source = data.get("utm_source")
    tg_user_id = data.get("tg_user_id")

    try:
        async with async_sessionmaker() as session:
            log.info("üíæ Starting database operations")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if tg_user_id:
                log.info(f"üë§ Looking for user with tg_id: {tg_user_id}")
                result = await session.execute(
                    select(User).where(User.tg_id == tg_user_id)
                )
                user = result.scalar_one_or_none()
                if not user:
                    log.info("üë§ Creating new user from Telegram")
                    user = User(tg_id=tg_user_id)
                    session.add(user)
                else:
                    log.info(f"üë§ Found existing user: {user.id}")
            else:
                log.info("üë§ Creating temporary user (no Telegram ID)")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º tg_id
                import time
                import random
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö int32
                max_int32 = 2_000_000_000
                temp_tg_id = -random.randint(1, max_int32)
                user = User(
                    tg_id=temp_tg_id,
                    first_name=name.split()[0] if name else "–ì–æ—Å—Ç—å",
                    phone=phone,
                    email=email
                )
                session.add(user)
                log.info(f"üë§ Created temp user with tg_id: {temp_tg_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if phone:
                user.phone = phone
            if email:
                user.email = email
            if name and not user.first_name:
                user.first_name = name.split()[0]

            # –ö–æ–º–º–∏—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞
            log.info("üíæ Committing user data")
            await session.commit()
            await session.refresh(user)
            log.info(f"‚úÖ User saved with ID: {user.id}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –ë–ï–ó category_id (–µ–≥–æ –Ω–µ—Ç –≤ production –ë–î)
            log.info(f"üìù Creating application for category: {category_id}")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ subcategory
            try:
                cat_result = await session.execute(
                    select(Category).where(Category.id == category_id)
                )
                category_obj = cat_result.scalar_one_or_none()
                category_name = category_obj.name if category_obj else f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category_id}"
            except:
                category_name = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{category_id}"

            app = AppModel(
                user_id=user.id,
                category_id=category_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–∫–ª—é—á–∞–µ–º category_id
                subcategory=f"{category_name}: {subcategory}" if subcategory else category_name,
                description=description,
                contact_method=contact_method,
                contact_time=contact_time,
                files_data=files if files else None,
                utm_source=utm_source,
                status="new"
            )
            session.add(app)
            await session.commit()
            await session.refresh(app)
            log.info(f"‚úÖ Application created with ID: {app.id}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            app.price = Decimal("5000")  # –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            await session.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è Sheets (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é)
            log.info(f"üìÇ Using category: {category_name}")
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Google Sheets
            category = type('Category', (), {'name': category_name})()

    except Exception as e:
        log.error(f"‚ùå Database error: {e}")
        log.error(f"‚ùå Exception type: {type(e)}")
        import traceback
        log.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return web.json_response(
            {"error": f"Database error: {str(e)}"},
            status=500,
            headers={"Access-Control-Allow-Origin": "*"}
        )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    try:
        append_lead(app, user, category)
    except Exception as e:
        log.error(f"Sheets error: {e}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    pay_url = None
    if app.price:
        try:
            pay_url = create_payment(app, user, app.price)
        except Exception as e:
            log.error(f"Payment error: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        bot = request.app["bot"]

        contact_methods = {
            'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
            'telegram': 'üí¨ Telegram',
            'email': 'üìß Email',
            'whatsapp': 'üíö WhatsApp'
        }

        text = f"""
üÜï **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{app.id}**

üìÇ {category.name}
{f'üìù {subcategory}' if subcategory else ''}

üë§ **–ö–ª–∏–µ–Ω—Ç:**
–ò–º—è: {name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}
üìû {phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
üìß {email or '–ù–µ—Ç email'}
üí¨ –°–≤—è–∑—å: {contact_methods.get(contact_method, contact_method)}

üìÑ **–ü—Ä–æ–±–ª–µ–º–∞:**
{description[:200] + '...' if len(description) > 200 else description}

{f'üìé –§–∞–π–ª–æ–≤: {len(files)}' if files else ''}
{f'üè∑Ô∏è UTM: {utm_source}' if utm_source else ''}

üí∞ –ö –æ–ø–ª–∞—Ç–µ: {app.price} ‚ÇΩ
"""

        keyboard = [[
            InlineKeyboardButton(
                "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"app_view_{app.id}")
        ]]

        if pay_url:
            keyboard[0].append(
                InlineKeyboardButton("üí≥ –°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã", url=pay_url)
            )

        await bot.send_message(
            ADMIN_CHAT_ID,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        log.error(f"Admin notify error: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await notify_client_application_received(user, app)
    except Exception as e:
        log.error(f"Client notification error: {e}")

    # –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    log.info(f"‚úÖ Application {app.id} processed successfully")
    response_data = {
        "status": "ok",
        "app_id": app.id,
        "pay_url": pay_url
    }
    log.info(f"üì§ Sending response: {response_data}")
    return web.json_response(response_data, headers={"Access-Control-Allow-Origin": "*"})


async def handle_webapp(request: web.Request) -> web.Response:
    """–û—Ç–¥–∞—á–∞ WebApp HTML"""
    html_path = Path(__file__).parent.parent / "webapp" / "index.html"
    if html_path.exists():
        return web.FileResponse(html_path)
    else:
        return web.Response(text="WebApp not found", status=404)


async def handle_webapp_static(request: web.Request) -> web.Response:
    """Serve enhanced webapp static files"""
    filename = request.match_info['filename']

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    allowed_extensions = {'.js', '.css',
                          '.html', '.ico', '.png', '.jpg', '.svg'}
    file_ext = Path(filename).suffix.lower()

    if file_ext not in allowed_extensions:
        return web.Response(status=404, text="File not found")

    file_path = Path(__file__).parent.parent / "webapp" / filename

    if not file_path.exists():
        return web.Response(status=404, text="File not found")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type
    content_types = {
        '.js': 'application/javascript',
        '.css': 'text/css',
        '.html': 'text/html',
        '.ico': 'image/x-icon',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.svg': 'image/svg+xml'
    }

    content_type = content_types.get(file_ext, 'text/plain')

    return web.FileResponse(
        file_path,
        headers={'Content-Type': content_type}
    )


async def handle_admin(request: web.Request) -> web.Response:
    """–û—Ç–¥–∞—á–∞ Admin Dashboard HTML"""
    html_path = Path(__file__).parent.parent / "webapp" / "admin.html"
    if html_path.exists():
        return web.FileResponse(html_path)
    else:
        return web.Response(text="Admin Dashboard not found", status=404)


async def api_admin_applications(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    async with async_sessionmaker() as session:
        result = await session.execute(
            select(AppModel, User)
            .join(User)
            .order_by(AppModel.created_at.desc())
            .limit(50)
        )
        apps = result.all()

        applications = []
        for app, user in apps:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ subcategory
            category_name = app.subcategory.split(
                ':')[0] if app.subcategory and ':' in app.subcategory else (app.subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

            applications.append({
                'id': app.id,
                'client': f"{user.first_name} {user.last_name or ''}".strip(),
                'category': category_name,
                'status': app.status,
                'date': app.created_at.isoformat(),
                'description': app.description or '',
                'phone': user.phone or '',
                'email': user.email or ''
            })

    return web.json_response(applications, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def api_admin_clients(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    async with async_sessionmaker() as session:
        result = await session.execute(
            select(User, func.count(AppModel.id).label('app_count'))
            .outerjoin(AppModel)
            .group_by(User.id)
            .order_by(User.created_at.desc())
            .limit(50)
        )
        users = result.all()

        clients = []
        for user, app_count in users:
            clients.append({
                'id': user.id,
                'name': f"{user.first_name} {user.last_name or ''}".strip(),
                'phone': user.phone or '',
                'email': user.email or '',
                'applications': app_count,
                'totalPaid': 0  # TODO: Calculate from payments
            })

    return web.json_response(clients, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def api_admin_payments(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    payments = []  # Mock data for now

    return web.json_response(payments, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def api_admin_stats(request: web.Request) -> web.Response:
    """API: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    # CORS
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    async with async_sessionmaker() as session:
        # Total applications
        total_apps = await session.scalar(select(func.count(AppModel.id)))

        # New applications (this week)
        from datetime import datetime, timedelta
        week_ago = datetime.now() - timedelta(days=7)
        new_apps = await session.scalar(
            select(func.count(AppModel.id))
            .where(AppModel.created_at >= week_ago)
        )

        # Total clients
        total_clients = await session.scalar(select(func.count(User.id)))

        # Revenue (mock for now)
        revenue = 147500
        conversion = 23.4

    stats = {
        'newApplications': new_apps or 0,
        'totalClients': total_clients or 0,
        'monthlyRevenue': revenue,
        'conversion': conversion
    }

    return web.json_response(stats, headers={
        "Access-Control-Allow-Origin": "*"
    })


async def handle_telegram(request: web.Request) -> web.Response:
    """Webhook handler"""
    update_json = await request.json()
    update = Update.de_json(update_json, request.app["bot"])
    await request.app["application"].update_queue.put(update)
    return web.Response(text="ok")


# ================ HELPERS ================

def detect_category(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É"""
    text_lower = text.lower()

    if any(word in text_lower for word in ["—Ä–∞–∑–≤–æ–¥", "–∞–ª–∏–º–µ–Ω—Ç", "–±—Ä–∞–∫", "—Å–µ–º—å"]):
        return "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ"
    elif any(word in text_lower for word in ["–Ω–∞—Å–ª–µ–¥—Å—Ç–≤", "–∑–∞–≤–µ—â–∞–Ω"]):
        return "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ"
    elif any(word in text_lower for word in ["—Ä–∞–±–æ—Ç", "—Ç—Ä—É–¥", "—É–≤–æ–ª—å–Ω–µ–Ω", "–∑–∞—Ä–ø–ª–∞—Ç"]):
        return "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã"
    elif any(word in text_lower for word in ["–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–∏—Ä", "–¥–æ–º", "–∂–∏–ª—å"]):
        return "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    elif any(word in text_lower for word in ["–¥–æ–ª–≥", "–∫—Ä–µ–¥–∏—Ç", "–±–∞–Ω–∫—Ä–æ—Ç"]):
        return "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"
    elif any(word in text_lower for word in ["–Ω–∞–ª–æ–≥", "–Ω–¥—Ñ–ª", "–∏—Ñ–Ω—Å"]):
        return "–ù–∞–ª–æ–≥–∏"
    elif any(word in text_lower for word in ["—à—Ç—Ä–∞—Ñ", "–≥–∏–±–¥–¥", "–∞–¥–º–∏–Ω"]):
        return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞"
    elif any(word in text_lower for word in ["–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "—Ç–æ–≤–∞—Ä", "—É—Å–ª—É–≥", "–≤–æ–∑–≤—Ä–∞—Ç"]):
        return "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"
    elif any(word in text_lower for word in ["–º–∏–≥—Ä–∞", "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤", "–≤–Ω–∂", "—Ä–≤–ø"]):
        return "–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"
    else:
        return "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"


async def show_statistics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with async_sessionmaker() as session:
        # –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        total = await session.scalar(select(func.count(AppModel.id)))

        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = await session.execute(
            select(AppModel.status, func.count(AppModel.id))
            .group_by(AppModel.status)
        )

        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –ø–∞—Ä—Å–∏–º –∏–∑ subcategory
        cat_stats = await session.execute(
            select(AppModel.subcategory, func.count(AppModel.id))
            .where(AppModel.subcategory.is_not(None))
            .group_by(AppModel.subcategory)
            .order_by(func.count(AppModel.id).desc())
            .limit(5)
        )

    text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}

**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
"""
    for status, count in status_stats:
        text += f"‚Ä¢ {status}: {count}\n"

    text += "\n**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:**\n"
    for subcategory, count in cat_stats:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
        cat_name = subcategory.split(':')[0] if subcategory and ':' in subcategory else (
            subcategory or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        text += f"‚Ä¢ {cat_name}: {count}\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_admin_panel(query):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_apps"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_users")],
        [InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
    ]

    await query.edit_message_text(
        "üîß **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_payments(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏"""
    async with async_sessionmaker() as session:
        result = await session.execute(
            select(Payment, AppModel, User)
            .join(AppModel)
            .join(User)
            .order_by(Payment.created_at.desc())
            .limit(10)
        )
        payments = result.all()

    if not payments:
        text = "üí≥ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π"
    else:
        text = "üí≥ **–ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò**\n\n"

        for pay, app, user in payments:
            status_emoji = {
                "pending": "‚è≥",
                "paid": "‚úÖ",
                "failed": "‚ùå"
            }.get(pay.status, "‚ùì")

            text += f"{status_emoji} #{pay.id} | {pay.amount} ‚ÇΩ\n"
            text += f"–ó–∞—è–≤–∫–∞ #{app.id} | {user.first_name}\n"
            text += f"üìÖ {pay.created_at.strftime('%d.%m %H:%M')}\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_ai_status(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Enhanced AI"""
    global ai_enhanced_manager

    text = "ü§ñ **–°–¢–ê–¢–£–° ENHANCED AI**\n\n"

    if ai_enhanced_manager is None:
        text += "‚ùå Enhanced AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        text += "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π AI"
    elif not ai_enhanced_manager._initialized:
        text += "‚ö†Ô∏è Enhanced AI —á–∞—Å—Ç–∏—á–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        text += "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º"
    else:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            health = await ai_enhanced_manager.health_check()

            if health.get("status") == "healthy":
                text += "‚úÖ Enhanced AI —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n\n"
            else:
                text += "‚ö†Ô∏è Enhanced AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏\n\n"

            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            text += "**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**\n"
            components = health.get("components", {})

            for name, status in components.items():
                emoji = "‚úÖ" if status.get("status") == "ok" else "‚ùå"
                text += f"{emoji} {name.replace('_', ' ').title()}\n"

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            try:
                analytics = await ai_enhanced_manager.get_analytics_summary()
                if analytics.get("status") != "no_data":
                    text += f"\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    text += f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {analytics.get('total_requests', 0)}\n"
                    text += f"‚ö° –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analytics.get('success_rate', 0):.1%}\n"
                    text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {analytics.get('avg_response_time', 0):.1f}ms\n"
                    if analytics.get('estimated_cost'):
                        text += f"üí∞ –†–∞—Å—Ö–æ–¥—ã: ${analytics.get('estimated_cost', 0):.2f}\n"
            except:
                pass

        except Exception as e:
            text += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ JOBS ================

async def autopost_job(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª"""
    if not CHANNEL_ID:
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ AI
    topics = [
        "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞–∑–≤–æ–¥",
        "–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ–¥–µ",
        "–í–∑—ã—Å–∫–∞–Ω–∏–µ –∞–ª–∏–º–µ–Ω—Ç–æ–≤: –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –ø–ª–∞—Ç—è—Ç –∑–∞—Ä–ø–ª–∞—Ç—É",
        "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏",
        "–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ",
        "–°–ø–æ—Ä—ã —Å —Å–æ—Å–µ–¥—è–º–∏: –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã",
        "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü: –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã",
        "–ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —à—Ç—Ä–∞—Ñ –ì–ò–ë–î–î",
        "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞"
    ]

    topic = random.choice(topics)

    messages = [{
        "role": "system",
        "content": "–¢—ã —é—Ä–∏—Å—Ç, –ø–∏—à–µ—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."
    }, {
        "role": "user",
        "content": f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}. –û–±—ä–µ–º 300-400 —Å–∏–º–≤–æ–ª–æ–≤."
    }]

    text = await generate_ai_response(messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[
        InlineKeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                             url=f"https://t.me/{context.bot.username}")
    ]]

    await context.bot.send_message(
        CHANNEL_ID,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ================ MAIN ================

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    global ai_enhanced_manager

    # üö® –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú Enhanced AI –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    try:
        log.info("‚ö†Ô∏è Enhanced AI temporarily disabled - creating tables first")
        ai_enhanced_manager = None
        print("‚ö†Ô∏è Enhanced AI disabled until database tables are created")
        log.info("Will use basic AI as fallback")
    except Exception as e:
        print(f"‚ùå Failed to initialize Enhanced AI: {e}")
        log.error(f"Enhanced AI initialization error: {e}")
        import traceback
        log.error(f"Enhanced AI traceback: {traceback.format_exc()}")
        log.info("Will use basic AI as fallback")

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await application.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL)
            )
        )
        print("‚úÖ Menu button set successfully")
    except Exception as e:
        print(f"‚ùå Failed to set menu button: {e}")
        log.error(f"Menu button error: {e}")


async def fix_database_schema():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –ë–î –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        async with async_sessionmaker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ category_id –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'category_id'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing category_id column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É category_id
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN category_id INTEGER
                """))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await session.execute(text("""
                    UPDATE applications 
                    SET category_id = 1 
                    WHERE category_id IS NULL
                """))

                # –î–æ–±–∞–≤–ª—è–µ–º NOT NULL constraint
                await session.execute(text("""
                    ALTER TABLE applications 
                    ALTER COLUMN category_id SET NOT NULL
                """))

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD CONSTRAINT fk_applications_category_id 
                    FOREIGN KEY (category_id) REFERENCES categories (id)
                """))

                await session.commit()
                log.info("‚úÖ category_id column added successfully")
                print("‚úÖ Database schema fixed: category_id column added")
            else:
                log.info("‚úÖ category_id column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ subcategory –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'subcategory'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing subcategory column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É subcategory
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN subcategory VARCHAR(120)
                """))

                await session.commit()
                log.info("‚úÖ subcategory column added successfully")
                print("‚úÖ Database schema fixed: subcategory column added")
            else:
                log.info("‚úÖ subcategory column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ contact_method –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'contact_method'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing contact_method column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É contact_method
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN contact_method VARCHAR(50) DEFAULT 'telegram'
                """))

                await session.commit()
                log.info("‚úÖ contact_method column added successfully")
                print("‚úÖ Database schema fixed: contact_method column added")
            else:
                log.info("‚úÖ contact_method column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ contact_time –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'contact_time'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing contact_time column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É contact_time
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN contact_time VARCHAR(50) DEFAULT 'any'
                """))

                await session.commit()
                log.info("‚úÖ contact_time column added successfully")
                print("‚úÖ Database schema fixed: contact_time column added")
            else:
                log.info("‚úÖ contact_time column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ files_data –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'files_data'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing files_data column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É files_data
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN files_data JSON
                """))

                await session.commit()
                log.info("‚úÖ files_data column added successfully")
                print("‚úÖ Database schema fixed: files_data column added")
            else:
                log.info("‚úÖ files_data column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ utm_source –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'utm_source'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing utm_source column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É utm_source
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN utm_source VARCHAR(64)
                """))

                await session.commit()
                log.info("‚úÖ utm_source column added successfully")
                print("‚úÖ Database schema fixed: utm_source column added")
            else:
                log.info("‚úÖ utm_source column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ status –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'status'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing status column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É status
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN status VARCHAR(32) DEFAULT 'new'
                """))

                await session.commit()
                log.info("‚úÖ status column added successfully")
                print("‚úÖ Database schema fixed: status column added")
            else:
                log.info("‚úÖ status column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ price –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'price'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing price column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É price
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN price NUMERIC(10, 2)
                """))

                await session.commit()
                log.info("‚úÖ price column added successfully")
                print("‚úÖ Database schema fixed: price column added")
            else:
                log.info("‚úÖ price column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ created_at –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'created_at'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing created_at column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É created_at
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                """))

                await session.commit()
                log.info("‚úÖ created_at column added successfully")
                print("‚úÖ Database schema fixed: created_at column added")
            else:
                log.info("‚úÖ created_at column exists")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ updated_at –≤ —Ç–∞–±–ª–∏—Ü–µ applications
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                AND column_name = 'updated_at'
            """))

            if not result.scalar_one_or_none():
                log.info("üîß Missing updated_at column, adding it...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É updated_at
                await session.execute(text("""
                    ALTER TABLE applications 
                    ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                """))

                await session.commit()
                log.info("‚úÖ updated_at column added successfully")
                print("‚úÖ Database schema fixed: updated_at column added")
            else:
                log.info("‚úÖ updated_at column exists")

            print("‚úÖ Database schema is up to date")

    except Exception as e:
        log.error(f"‚ùå Database schema fix failed: {e}")
        print(f"‚ö†Ô∏è Database schema fix failed: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É


async def handle_debug_fix_schema(request: web.Request) -> web.Response:
    """Debug endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î"""
    log.info("üîß Debug endpoint hit for schema fix")
    try:
        await fix_database_schema()
        return web.Response(text="Database schema fixed successfully!")
    except Exception as e:
        log.error(f"‚ùå Failed to fix database schema: {e}")
        return web.Response(text=f"Failed to fix database schema: {e}", status=500)


async def handle_debug_check_schema(request: web.Request) -> web.Response:
    """Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã –ë–î"""
    log.info("üîç Debug endpoint hit for schema check")
    try:
        async with async_sessionmaker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã applications
            result = await session.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                ORDER BY ordinal_position
            """))

            columns = result.fetchall()

            response_text = "APPLICATIONS TABLE SCHEMA:\n\n"
            for col in columns:
                response_text += f"- {col[0]} ({col[1]}) nullable={col[2]} default={col[3]}\n"

            return web.Response(text=response_text)
    except Exception as e:
        log.error(f"‚ùå Failed to check database schema: {e}")
        return web.Response(text=f"Failed to check database schema: {e}", status=500)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await fix_database_schema()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ webapp
    app = web.Application()
    app["bot"] = application.bot
    app["application"] = application

    # –†–æ—É—Ç—ã
    app.router.add_post(f"/{TOKEN}", handle_telegram)
    app.router.add_route("*", "/submit", handle_submit)
    app.router.add_get("/webapp/", handle_webapp)
    app.router.add_get("/webapp/{filename}", handle_webapp_static)
    app.router.add_get("/admin/", handle_admin)

    # API —Ä–æ—É—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    app.router.add_route("*", "/api/admin/applications",
                         api_admin_applications)
    app.router.add_route("*", "/api/admin/clients", api_admin_clients)
    app.router.add_route("*", "/api/admin/payments", api_admin_payments)
    app.router.add_route("*", "/api/admin/stats", api_admin_stats)

    # Debug endpoint for schema fix
    app.router.add_get("/debug/fix-schema", handle_debug_fix_schema)
    app.router.add_get("/debug/check-schema", handle_debug_check_schema)

    app.router.add_static(
        "/webapp/", path=Path(__file__).parent.parent / "webapp")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("admin", cmd_admin))
    application.add_handler(CallbackQueryHandler(admin_callback))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        ai_chat
    ))

    # –î–∂–æ–±—ã
    if application.job_queue is not None:
        application.job_queue.run_repeating(
            autopost_job,
            interval=timedelta(hours=2),
            first=timedelta(minutes=10)
        )
        print("‚úÖ Job queue initialized - autopost enabled")
        log.info("Job queue initialized successfully")
    else:
        print("‚ö†Ô∏è Job queue not available - autopost disabled")
        log.warning("Job queue not available, autopost functionality disabled")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    application.post_init = post_init

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"https://{PUBLIC_HOST}/{TOKEN}"
    await application.bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async with application:
        await application.start()
        log.info(f"Bot started on port {PORT}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            await application.bot.send_message(
                ADMIN_CHAT_ID,
                "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            )
        except:
            pass

        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º
        await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())

#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–°–ü–ï–†–¢–ù–û–ô –°–ò–°–¢–ï–ú–´
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ AI
"""

import asyncio
import logging
from bot.services.legal_expert_ai import world_class_legal_ai, LegalCase, LegalCategory, ConsultationType
from bot.services.professional_commenter import professional_commenter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_legal_consultation():
    """–¢–µ—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –Æ–†–ò–î–ò–ß–ï–°–ö–û–ô –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò")
    print("=" * 60)
    
    test_cases = [
        {
            "description": "–ú–µ–Ω—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ —É–≤–æ–ª–∏–ª–∏ —Å —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
            "category": LegalCategory.LABOR_LAW,
            "consultation_type": ConsultationType.EXPRESS,
            "urgency": "high"
        },
        {
            "description": "–•–æ—á—É –ø–æ–¥–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–æ–¥, –µ—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫ –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ?",
            "category": LegalCategory.FAMILY_LAW,
            "consultation_type": ConsultationType.DETAILED,
            "urgency": "medium"
        },
        {
            "description": "–°–†–û–ß–ù–û! –ó–∞–≤—Ç—Ä–∞ —Å—É–¥ –ø–æ —É–≥–æ–ª–æ–≤–Ω–æ–º—É –¥–µ–ª—É, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–≤–æ–∫–∞—Ç–∞!",
            "category": LegalCategory.CRIMINAL_LAW,
            "consultation_type": ConsultationType.EMERGENCY,
            "urgency": "emergency"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç –¢–ï–°–¢ {i}: {test_case['category'].value.upper()}")
        print(f"üìù –í–æ–ø—Ä–æ—Å: {test_case['description']}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–ª–æ
        legal_case = LegalCase(
            user_id=12345,
            category=test_case["category"],
            consultation_type=test_case["consultation_type"],
            description=test_case["description"],
            urgency=test_case["urgency"],
            location="–†–§",
            case_complexity="medium",
            documents_available=False
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            advice = await world_class_legal_ai.analyze_legal_case(legal_case)
            
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ü–û–õ–£–ß–ï–ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø:")
            print(f"üìä –ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑: {advice.legal_analysis[:100]}...")
            print(f"‚öñÔ∏è –ü—Ä–∞–≤–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏: {len(advice.legal_references)}")
            print(f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(advice.recommended_actions)}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {advice.estimated_cost}")
            print(f"‚è∞ –°—Ä–æ–∫–∏: {advice.timeline}")
            print(f"üéØ –ü—Ä–æ–¥–∞–∂–∏: {'–ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' if advice.sales_offer else '–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'}")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        print("-" * 40)

async def test_professional_comments():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
    print("=" * 60)
    
    test_posts = [
        {
            "content": "–ú–æ–∂–Ω–æ –ª–∏ —É–≤–æ–ª–∏—Ç—å –±–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–æ—Ç—Ä—É–¥–Ω–∏—Ü—É –∑–∞ –ø—Ä–æ–≥—É–ª—ã?",
            "topic": "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ"
        },
        {
            "content": "–ù–æ–≤—ã–π –∑–∞–∫–æ–Ω –æ —Å–µ–º–µ–π–Ω–æ–º –Ω–∞—Å–∏–ª–∏–∏ –≤—Å—Ç—É–ø–∏–ª –≤ —Å–∏–ª—É. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –∑–∞ 24 —á–∞—Å–∞.",
            "topic": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ - –Ω–æ–≤–æ—Å—Ç–∏"
        },
        {
            "content": "–†–∞–∑–±–∏—Ä–∞–µ–º –¥–µ–ª–æ: –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥–∏ –∏ –ø–æ–ª—É—á–∏–ª —à—Ç—Ä–∞—Ñ 1 –º–ª–Ω —Ä—É–±–ª–µ–π. –ü—Ä–∞–≤–æ–º–µ—Ä–Ω–æ –ª–∏ —ç—Ç–æ?",
            "topic": "–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ - —Ä–∞–∑–±–æ—Ä —Å–ª—É—á–∞—è"
        },
        {
            "content": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã? –ö–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã?",
            "topic": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
        }
    ]
    
    for i, post in enumerate(test_posts, 1):
        print(f"\nüîç –¢–ï–°–¢ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø {i}")
        print(f"üìã –ü–æ—Å—Ç: {post['content']}")
        print(f"üè∑Ô∏è –¢–µ–º–∞: {post['topic']}")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç
            analysis = await professional_commenter.analyze_post(
                post["content"], 
                post["topic"]
            )
            
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–¢–ê:")
            print(f"   –¢–∏–ø: {analysis.post_type.value}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.legal_category}")
            print(f"   –ê—É–¥–∏—Ç–æ—Ä–∏—è: {analysis.target_audience}")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {analysis.legal_accuracy}")
            print(f"   –ü—Ä–æ–ø—É—Å–∫–∏: {len(analysis.missing_info)}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment = await professional_commenter.generate_professional_comment(analysis)
            
            print(f"\nüí¨ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:")
            print(f"   –¢–æ–Ω: {comment.tone.value}")
            print(f"   –¶–µ–Ω–Ω–æ—Å—Ç—å: {comment.value_added}")
            print(f"   –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {comment.engagement_level}")
            print(f"\nüìù –¢–ï–ö–°–¢ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø:")
            print(f"   {comment.content}")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        print("-" * 40)

async def test_knowledge_base():
    """–¢–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("\nüìö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("=" * 60)
    
    from bot.services.legal_knowledge_base import legal_knowledge
    
    search_queries = [
        "–¥–æ–≥–æ–≤–æ—Ä",
        "–∞–ª–∏–º–µ–Ω—Ç—ã", 
        "—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
        "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
        "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    ]
    
    for query in search_queries:
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        
        results = legal_knowledge.search_norms(query)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(results)} –Ω–æ—Ä–º")
        
        for result in results[:2]:
            print(f"   - {result.code} —Å—Ç.{result.article}: {result.title}")
        
        if not results:
            print("   ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

async def test_sales_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂"""
    print("\nüí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–î–ê–ñ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–¥–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    test_case = LegalCase(
        user_id=12345,
        category=LegalCategory.BUSINESS_LAW,
        consultation_type=ConsultationType.STRATEGY,
        description="–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å –æ—Ç –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤?",
        urgency="medium",
        location="–†–§"
    )
    
    try:
        advice = await world_class_legal_ai.analyze_legal_case(test_case)
        
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–ê–Æ–©–ò–• –≠–õ–ï–ú–ï–ù–¢–û–í:")
        print(f"   –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥: {'‚úÖ' if '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' in advice.sales_offer.lower() else '‚ùå'}")
        print(f"   –£–∫–∞–∑–∞–Ω—ã —Ü–µ–Ω—ã: {'‚úÖ' if any(c.isdigit() for c in advice.sales_offer) else '‚ùå'}")
        print(f"   –ï—Å—Ç—å call-to-action: {'‚úÖ' if '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in advice.sales_offer.lower() or '–∑–≤–æ–Ω–∏—Ç–µ' in advice.sales_offer.lower() else '‚ùå'}")
        print(f"   –£–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {'‚úÖ' if '–æ–ø—ã—Ç' in advice.sales_offer.lower() or '—ç–∫—Å–ø–µ—Ä—Ç' in advice.sales_offer.lower() else '‚ùå'}")
        
        print(f"\nüí¨ –ü–†–û–î–ê–Æ–©–ï–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:")
        print(f"   {advice.sales_offer}")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ö–°–ü–ï–†–¢–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    try:
        await test_legal_consultation()
        await test_professional_comments()
        await test_knowledge_base()
        await test_sales_integration()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print("=" * 80)
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(main())
"""
üîç SIMPLE MONITORING TEST VIA TELEGRAM
–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import logging
import os
from telegram import Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from bot.handlers.production_testing import production_test_command, production_test_callback_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def simple_monitoring_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Telegram"""

    print("üîç Starting Simple Monitoring Test via Telegram")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')

    if not bot_token:
        print("‚ùå BOT_TOKEN not found in environment")
        return

    if not admin_chat_id:
        print("‚ùå ADMIN_CHAT_ID not found in environment")
        return

    print(f"‚úÖ Environment configured")
    print(f"   - Admin Chat ID: {admin_chat_id}")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(bot_token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
        application.add_handler(CommandHandler(
            "test", production_test_command))
        application.add_handler(CallbackQueryHandler(
            production_test_callback_handler,
            pattern="^test_"
        ))

        print("‚úÖ Telegram bot configured")
        print("‚úÖ Production testing handlers registered")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        bot = Bot(token=bot_token)

        startup_message = """üöÄ **PRODUCTION TESTING BOT READY**

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞
‚úÖ –ö–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üß™ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/test - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
‚Ä¢ Quick Check - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ Full Test - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ Monitoring Test - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ Performance Test - —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        await bot.send_message(
            chat_id=admin_chat_id,
            text=startup_message,
            parse_mode="Markdown"
        )

        print("‚úÖ Startup notification sent")
        print("üöÄ Bot is running... Use /test command in Telegram")
        print("üõë Press Ctrl+C to stop")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.run_polling(drop_pending_updates=True)

    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(simple_monitoring_test())

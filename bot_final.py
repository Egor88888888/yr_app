#!/usr/bin/env python3
"""
Telegram bot with Mini-App launched via a single MenuButtonWebApp.
Works on Railway automatically: no manual steps after deploy.
‚Äì aiohttp web-server handles both Telegram webhook POST /<TOKEN>
  and POST /submit from the mini-app.
‚Äì /submit parses payload, notifies admin, answers WebAppQuery to
  close the mini-app.
"""
import asyncio
import json
import logging
import os
import uuid
import random
from aiohttp import web
from telegram import (
    Update,
    WebAppInfo,
    MenuButtonWebApp,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import timedelta
import openai
from typing import Optional
from telegram.constants import ChatAction
import aiohttp
import io
# === Analytics & External parsing ===
from db import init_models, async_sessionmaker
from jobs import collect_subscribers_job, scan_external_channels_job, post_from_external_job
from telethon import TelegramClient

########################### CONFIG ###########################
TOKEN = os.getenv("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # string
# e.g. poetic-simplicity-production-xxx.up.railway.app
PUBLIC_HOST = os.getenv("MY_RAILWAY_PUBLIC_URL")
WEB_APP_URL = "https://egor88888888.github.io/yr_app/"
PORT = int(os.getenv("PORT", 8080))

# === AI & Autoposting ===
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # required for AI
# numeric id as string, optional
TARGET_CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID")

# Normalize channel username; allow numeric IDs as env alternative
raw_username = os.getenv("TARGET_CHANNEL_USERNAME", "strahsprav")
raw_username = "".join(raw_username.split())  # remove any spaces/nbsp

if raw_username.lstrip("-").isdigit():
    TARGET_CHANNEL_ID = raw_username
    TARGET_CHANNEL_USERNAME = None
else:
    TARGET_CHANNEL_USERNAME = "@" + raw_username.lstrip("@")

POST_INTERVAL_HOURS = int(os.getenv("POST_INTERVAL_HOURS", 4))
# === Telethon & analytics config ===
API_ID = int(os.getenv("API_ID", 0))
API_HASH = os.getenv("API_HASH")
##############################################################

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

MEDIA_POOL = [
    # Photos
    {"url": "https://images.pexels.com/photos/701775/pexels-photo-701775.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/806137/pexels-photo-806137.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/5668840/pexels-photo-5668840.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/4425839/pexels-photo-4425839.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/235569/pexels-photo-235569.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/5682738/pexels-photo-5682738.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/672630/pexels-photo-672630.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    {"url": "https://images.pexels.com/photos/3768893/pexels-photo-3768893.jpeg?auto=compress&cs=tinysrgb&w=800", "kind": "photo"},
    # Short thematic video (dashcam)
    {"url": "https://filesamples.com/samples/video/mp4/sample_640x360.mp4", "kind": "video"},
]


def _media_url(item):
    return item["url"] + f"&rand={random.randint(1,999999)}" if "?" in item["url"] else item["url"] + f"?rand={random.randint(1,999999)}"

# ===================== Telegram handlers =====================


async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\" —Ä—è–¥–æ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞‚¨áÔ∏è")


async def debug(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    log.debug("Update: %s", update)

# ====================== HTTP handlers ========================


async def handle_submit(request: web.Request) -> web.Response:
    """Receive data from mini-app, notify admin, answer WebAppQuery."""
    if request.method == "OPTIONS":
        return web.Response(headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
        })

    data = await request.json()
    query_id = data.get("queryId")
    payload = data.get("payload", {})
    log.info("/submit payload=%s", payload)

    # Notify admin
    try:
        problems = ", ".join(payload.get("problems", []))
        name = payload.get("name", "-")
        phone = payload.get("phone", "-")
        desc = payload.get("description", "-")
        text = f"üîî –ó–∞—è–≤–∫–∞\n{name}\n{phone}\n{problems}\n{desc}"
        await request.app["bot"].send_message(chat_id=ADMIN_CHAT_ID, text=text)
    except Exception as e:
        log.error("Admin send failed: %s", e)

    # Close mini-app
    try:
        result = InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
            input_message_content=InputTextMessageContent(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞."),
        )
        await request.app["bot"].answer_web_app_query(query_id, result)
    except Exception as e:
        log.error("answerWebAppQuery failed: %s", e)

    return web.json_response({"status": "ok"}, headers={"Access-Control-Allow-Origin": "*"})


async def handle_telegram(request: web.Request) -> web.Response:
    """Telegram sends updates here."""
    update_json = await request.json()
    await request.app["application"].update_queue.put(Update.de_json(update_json, request.app["bot"]))
    return web.Response(text="ok")

# ====================== Setup helpers ========================


async def setup_menu(bot):
    # –°–¥–µ–ª–∞—Ç—å MenuButtonWebApp –∫–Ω–æ–ø–∫–æ–π –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
    try:
        await bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=WEB_APP_URL),
            ),
        )
    except Exception as e:
        log.error("set_chat_menu_button failed: %s", e)

# ====================== AI helpers ==========================


async def _ai_complete(messages: list[dict], model: str = "gpt-3.5-turbo", max_tokens: int = 800, temperature: float = 0.7):
    """Unified wrapper around OpenRouter chat completion."""
    if not OPENROUTER_API_KEY:
        log.error("OPENROUTER_API_KEY missing; can't generate text")
        return None
    try:
        rsp = await openai.ChatCompletion.acreate(
            model=model,
            messages=messages,
            max_tokens=max_tokens,
            temperature=temperature,
        )
        return rsp.choices[0].message.content.strip()
    except Exception as e:
        log.error("AI completion failed: %s", e)
        return None


# Prompt used by humanizer

HUMANIZE_PROMPT = (
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∞–∂–Ω—ã –¥–≤–µ –≤–µ—â–∏: ¬´–Ω–µ–¥–æ—É–º–µ–Ω–∏–µ¬ª –∏ ¬´—Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å¬ª. "
    "¬´–ù–µ–¥–æ—É–º–µ–Ω–∏–µ¬ª –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –∞ ¬´—Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å¬ª ‚Äî –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –õ—é–¥–∏ —á–∞—Å—Ç–æ –ø–∏—à—É—Ç, —á–µ—Ä–µ–¥—É—è –¥–ª–∏–Ω–Ω—ã–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ "
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –º–∞—à–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ–±—ã—á–Ω–æ –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω—ã. –ó–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –¥–æ–±–∏—Ç—å—Å—è –Ω—É–∂–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É "
    "—Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º, —Å–æ–∑–¥–∞–≤–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å. –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –ù–µ —É–¥–∞–ª—è–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤ –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è."
)


async def humanize(text: str) -> str:
    messages = [
        {"role": "system", "content": HUMANIZE_PROMPT},
        {"role": "user", "content": text},
    ]
    rewritten = await _ai_complete(messages, temperature=0.9, max_tokens=min(800, len(text) + 120))
    return rewritten or text


async def generate_ai_post() -> Optional[str]:
    """Generate diverse Telegram post about our services."""
    site_brief = (
        "–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ '–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å' (strahovayasprav.ru). "
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç –ø–æ—Å–ª–µ –î–¢–ü: –≤—Ä–µ–¥ –∑–¥–æ—Ä–æ–≤—å—é, –≥–∏–±–µ–ª—å, —É—â–µ—Ä–± –∞–≤—Ç–æ, —Å–ø–æ—Ä—ã –û–°–ê–ì–û/–ö–ê–°–ö–û, –û–°–ì–û–ü. "
        "–í—Å–µ–≥–¥–∞ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Å—Ç–∞–∂ >5 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, 400‚Äì600 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º –¥–≤–µ —ç–º–æ–¥–∑–∏."
    )

    mode = random.choice(["promo", "case", "law"])
    if mode == "promo":
        user_prompt = "–°–¥–µ–ª–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø–æ—Å—Ç –æ —Ç–æ–º, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ –±–æ—Ä–æ—Ç—å—Å—è —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∏ –∫–∞–∫ –º—ã –ø–æ–º–æ–≥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –≤—ã–ø–ª–∞—Ç."
    elif mode == "case":
        user_prompt = (
            "–ü—Ä–∏–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–≤—ã–¥—É–º–∞–π –∏–º—è –∏ —Ü–∏—Ñ—Ä—ã, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ). "
            "–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –Ω–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã."
        )
    else:  # law
        user_prompt = (
            "–ü–æ–¥–µ–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º –∏–ª–∏ –≤—ã–¥–µ—Ä–∂–∫–æ–π –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–± –û–°–ê–ì–û –∏–ª–∏ –ö–ê–°–ö–û, –æ–±—ä—è—Å–Ω–∏, –∫–∞–∫ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é."
        )

    messages = [
        {"role": "system", "content": site_brief},
        {"role": "user", "content": user_prompt},
    ]
    text = await _ai_complete(messages, temperature=0.8, max_tokens=600)
    if text:
        text = await humanize(text)
    return text


# ---------- Role detection helper ----------


def _detect_role(user_text: str) -> str:
    """Rudimentary heuristic to classify participant role in –î–¢–ü."""
    text = user_text.lower()
    # pedestrian patterns
    pedestrian_keys = ["–ø–µ—à–µ—Ö–æ–¥", "—Ç—Ä–æ—Ç—É–∞—Ä", "–ø–µ—Ä–µ—Ö–æ–¥–∏–ª",
                       "–ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∞", "–ø–µ—Ä–µ—Ö–æ–¥", "–¥–æ—Ä–æ–≥—É –ø–µ—à–∫–æ–º"]
    if any(k in text for k in pedestrian_keys):
        return "–ø–µ—à–µ—Ö–æ–¥"

    # passenger patterns (public or private transport passenger)
    passenger_keys = ["–ø–∞—Å—Å–∞–∂–∏—Ä", "–º–∞—Ä—à—Ä—É—Ç–∫", "–∞–≤—Ç–æ–±—É—Å",
                      "—Ç—Ä–æ–ª–ª–µ–π–±—É—Å", "—Ç–∞–∫—Å–∏", "—Ä–µ–π—Å–æ–≤", "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω"]
    if any(k in text for k in passenger_keys):
        return "–ø–∞—Å—Å–∞–∂–∏—Ä"

    # driver patterns
    driver_keys = ["–≤–æ–¥–∏—Ç–µ–ª", "–∑–∞ —Ä—É–ª", "—É–ø—Ä–∞–≤–ª—è–ª",
                   "–≤—ë–ª –º–∞—à–∏–Ω", "–≤–µ–ª –∞–≤—Ç–æ–º–æ–±–∏–ª", "–µ—Ö–∞–ª –Ω–∞ —Å–≤–æ—ë–º"]
    if any(k in text for k in driver_keys):
        if any(w in text for w in ["—è –≤–∏–Ω–æ–≤", "–≤–∏–Ω–æ–≤–∞—Ç", "–¥–æ–ø—É—Å—Ç–∏–ª", "–Ω–∞—Ä—É—à–∏–ª"]):
            return "–≤–æ–¥–∏—Ç–µ–ª—å-–≤–∏–Ω–æ–≤–Ω–∏–∫"
        return "–≤–æ–¥–∏—Ç–µ–ª—å-–ø–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π"

    return "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ"


async def ai_private_chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Answer private user messages with AI."""
    if update.message is None or update.message.text is None:
        return
    # show typing
    await ctx.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    private_brief = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ '–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å' (strahovayasprav.ru). "
        "–û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö –ø–æ—Å–ª–µ –î–¢–ü. "
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—ã–µ –≤—ã–¥–µ—Ä–∂–∫–∏ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏–∑ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§, –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω '–û–± –û–°–ê–ì–û', –ó–∞–∫–æ–Ω '–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π'. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –∏ –∑–∞–∫–æ–Ω–∞ –≤ —Å–∫–æ–±–∫–∞—Ö ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: (—Å—Ç. 15 –ó–∞–∫–æ–Ω–∞ '–û–± –û–°–ê–ì–û'). "
        "–°–æ—Ö—Ä–∞–Ω—è–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å: —á–µ—Ä–µ–¥—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –¥–æ–±–∞–≤–ª—è–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏. "
        "–ó–∞–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞: \n1) –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–±–ª–µ–º—ã (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). \n2) –¢–æ—á–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–µ–π –∏ –∑–∞–∫–æ–Ω–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã). \n3) –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ 5 —à–∞–≥–æ–≤). \n4) –ò—Ç–æ–≥ –∏ –º—è–≥–∫–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. "
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, —á—ë—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–π —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞: –≤–æ–¥–∏—Ç–µ–ª—å-–≤–∏–Ω–æ–≤–Ω–∏–∫, –≤–æ–¥–∏—Ç–µ–ª—å-–ø–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π, –ø–∞—Å—Å–∞–∂–∏—Ä, –ø–µ—à–µ—Ö–æ–¥. –ï—Å–ª–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ —ç—Ç–æ –Ω–µ—è—Å–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. –¢–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –≤—ã–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏. "
        "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º—è–≥–∫–æ –ø—Ä–∏–≥–ª–∞—à–∞–π: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\" ‚Äî –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏'. "
        "–ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞."
    )
    messages = [
        {"role": "system", "content": private_brief},
    ]

    role = _detect_role(update.message.text)
    if role != "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ":
        messages.append(
            {"role": "system", "content": f"–ö–ª–∏–µ–Ω—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {role}. –û—Ç–≤–µ—á–∞–π —Å —É—á—ë—Ç–æ–º —ç—Ç–æ–π —Ä–æ–ª–∏."})

    messages.append({"role": "user", "content": update.message.text})
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
    answer = await _ai_complete(messages, model="gpt-4o-mini", temperature=0.45, max_tokens=1000)
    if not answer:
        # Fallback static reply if AI failed (no key, network error, etc.)
        fallback = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\" ‚Äî –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏"
        await update.message.reply_text(fallback)
        return

    # First humanize, then guarantee CTA line
    answer = await humanize(answer)
    cta = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\" ‚Äî –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏"
    if cta not in answer:
        answer = f"{answer}\n\n{cta}"
    await update.message.reply_text(answer)


async def ai_post_job(ctx: ContextTypes.DEFAULT_TYPE):
    """Periodic job: post AI-generated text to target channel."""
    log.info("[ai_post_job] tick")
    channel_id = ctx.bot_data.get("TARGET_CHANNEL_ID")
    if not channel_id:
        log.warning(
            "[ai_post_job] TARGET_CHANNEL_ID not resolved; skip posting")
        return

    text = await generate_ai_post()
    if not text:
        log.warning("[ai_post_job] generate_ai_post returned None")
        return

    bot_username = ctx.bot.username or ""  # safe fallback
    startapp_link = f"https://t.me/{bot_username}?startapp"
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=startapp_link)],
        [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –æ–Ω–ª–∞–π–Ω",
                              url=f"https://t.me/{bot_username}?start=channel")]
    ])
    ok = await send_media(ctx.bot, channel_id, text, markup)
    if ok:
        log.info("[ai_post_job] Post sent to channel %s", channel_id)
    else:
        log.warning("[ai_post_job] Failed to send media; fallback posted")

# ================== Manual posting command ==================


async def cmd_post_ai(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Admin command to generate and post AI content to channel immediately."""
    log.info("/post command from %s", update.effective_user.id)
    if str(update.effective_user.id) != str(ADMIN_CHAT_ID):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return

    channel_id = ctx.bot_data.get("TARGET_CHANNEL_ID")
    if not channel_id:
        await update.message.reply_text("‚ùó Channel ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥.")
        return

    await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    text = await generate_ai_post()
    if not text:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        return

    bot_username = ctx.bot.username or ""
    startapp_link = f"https://t.me/{bot_username}?startapp"
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=startapp_link)],
        [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –æ–Ω–ª–∞–π–Ω",
                              url=f"https://t.me/{bot_username}?start=channel")]
    ])
    await send_media(ctx.bot, channel_id, text, markup)
    await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

# ================== Set channel command =====================


async def cmd_set_channel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Command /set_channel executed INSIDE target channel to register its ID."""
    chat = update.effective_chat
    if chat.type != "channel":
        await update.effective_message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ.")
        return

    ctx.bot_data["TARGET_CHANNEL_ID"] = chat.id
    await update.effective_message.reply_text("‚úÖ –ö–∞–Ω–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /post –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞.")
    log.info("Channel registered via /set_channel: %s", chat.id)

# ===== Alt registration via private chat =====


async def cmd_set_channel_id(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """/set_channel_id <numeric_id> ‚Äî admin sets channel id manually in private chat."""
    if str(update.effective_user.id) != str(ADMIN_CHAT_ID):
        return
    if not ctx.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_channel_id -1001234567890")
        return
    try:
        ch_id = int(ctx.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        return
    ctx.bot_data["TARGET_CHANNEL_ID"] = ch_id
    await update.message.reply_text(f"‚úÖ Channel ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ch_id}")
    log.info("Channel ID set manually: %s", ch_id)


async def handle_forward(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Capture forwarded channel message to register channel id."""
    if update.message and update.message.forward_from_chat and update.message.forward_from_chat.type == 'channel':
        ch_id = update.message.forward_from_chat.id
        ctx.bot_data["TARGET_CHANNEL_ID"] = ch_id
        await update.message.reply_text(f"‚úÖ Channel –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: {ch_id}")
        log.info("Channel registered via forward: %s", ch_id)

# ---------- Media helpers ----------


async def fetch_bytes(url: str, timeout: int = 10) -> bytes | None:
    """Download media and return bytes or None."""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    return await resp.read()
    except Exception as e:
        log.warning("fetch_bytes failed for %s: %s", url, e)
    return None


async def send_media(bot, chat_id: int, caption: str, reply_markup):
    """Send photo or video with fallback to text-only."""
    tried_urls = set()
    max_attempts = min(5, len(MEDIA_POOL))
    for _ in range(max_attempts):
        # pick media that hasn't been tried yet to avoid repeat attempts
        media_candidates = [
            m for m in MEDIA_POOL if m["url"] not in tried_urls]
        if not media_candidates:
            break
        media = random.choice(media_candidates)
        tried_urls.add(media["url"])

        data = await fetch_bytes(_media_url(media))
        if not data:
            continue  # try another media file

        file_name = "media.jpg" if media["kind"] == "photo" else "media.mp4"
        input_file = InputFile(io.BytesIO(data), filename=file_name)
        try:
            if media["kind"] == "photo":
                await bot.send_photo(chat_id=chat_id, photo=input_file, caption=caption, reply_markup=reply_markup)
            else:
                await bot.send_video(chat_id=chat_id, video=input_file, caption=caption, reply_markup=reply_markup)
            return True  # success
        except Exception as e:
            log.warning("send_%s failed: %s", media["kind"], e)
    # fallback
    await bot.send_message(chat_id=chat_id, text=caption, reply_markup=reply_markup)
    return False

# ========================= Main ==============================


async def main_async():
    if not all([TOKEN, ADMIN_CHAT_ID, PUBLIC_HOST]):
        log.critical(
            "Missing env vars: YOUR_BOT_TOKEN / ADMIN_CHAT_ID / MY_RAILWAY_PUBLIC_URL")
        return

    application = Application.builder().token(TOKEN).updater(None).build()

    # === Init database ===
    await init_models()
    application.bot_data["db_sessionmaker"] = async_sessionmaker

    # === Telethon client ===
    telethon_client = None
    if API_ID and API_HASH:
        try:
            telethon_client = TelegramClient("analytics", API_ID, API_HASH)
            await telethon_client.start(bot_token=TOKEN)
            application.bot_data["telethon"] = telethon_client
            log.info("Telethon client started for analytics")
        except Exception as e:
            log.error(
                "Telethon init failed: %s. Analytics & external posting disabled.", e)
            telethon_client = None

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler(["postai", "post"], cmd_post_ai))
    application.add_handler(CommandHandler(
        "set_channel", cmd_set_channel, filters.ChatType.CHANNEL))
    application.add_handler(CommandHandler(
        "set_channel_id", cmd_set_channel_id, filters.ChatType.PRIVATE))
    application.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.FORWARDED, handle_forward))
    application.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, ai_private_chat))
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND, debug))

    # aiohttp app
    app = web.Application()
    app["bot"] = application.bot
    app["application"] = application
    app.router.add_post(f"/{TOKEN}", handle_telegram)
    app.router.add_route("*", "/submit", handle_submit)

    # === Configure OpenRouter ===
    if OPENROUTER_API_KEY:
        openai.api_key = OPENROUTER_API_KEY
        openai.api_base = "https://openrouter.ai/api/v1"

    # === Resolve channel ID (once) ===
    target_channel_id = None
    if TARGET_CHANNEL_ID:
        target_channel_id = int(TARGET_CHANNEL_ID)
    else:
        try:
            chat = await application.bot.get_chat(TARGET_CHANNEL_USERNAME)
            target_channel_id = chat.id
            log.info("Resolved @%s -> %s",
                     TARGET_CHANNEL_USERNAME, target_channel_id)
        except Exception as e:
            log.error("Cannot resolve channel username %s: %s",
                      TARGET_CHANNEL_USERNAME, e)

    application.bot_data["TARGET_CHANNEL_ID"] = target_channel_id

    # Set webhook & default menu button
    await setup_menu(application.bot)
    await application.bot.set_webhook(url=f"https://{PUBLIC_HOST}/{TOKEN}")
    log.info("Webhook set to https://%s/%s", PUBLIC_HOST, TOKEN)

    # === Schedule autoposting job ===
    if target_channel_id:
        application.job_queue.run_repeating(
            ai_post_job,
            interval=timedelta(hours=POST_INTERVAL_HOURS),
            first=timedelta(minutes=1),
            name="ai_posting",
        )
        log.info("Autoposting job scheduled every %s hours",
                 POST_INTERVAL_HOURS)

    # === Schedule analytics jobs ===
    if telethon_client:
        application.job_queue.run_repeating(
            collect_subscribers_job,
            interval=timedelta(days=1),
            first=timedelta(minutes=5),
            name="collect_subscribers",
        )
        application.job_queue.run_repeating(
            scan_external_channels_job,
            interval=timedelta(minutes=10),
            first=timedelta(seconds=30),
            name="scan_external_channels",
        )
        application.job_queue.run_repeating(
            post_from_external_job,
            interval=timedelta(minutes=10),
            first=timedelta(minutes=1),
            name="post_external_content",
        )

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    async with application:
        await application.start()
        log.info("Bot & HTTP server running on port %s", PORT)
        # Notify admin that bot started and autoposting scheduled
        try:
            await application.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.")
        except Exception as e:
            log.warning("Cannot notify admin: %s", e)
        # run forever
        await asyncio.Event().wait()


def main():
    asyncio.run(main_async())


if __name__ == "__main__":
    main()

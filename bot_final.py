#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ê–Ø –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å GitHub Pages
"""
import json
import logging
import os
import asyncio
from telegram import Update, WebAppInfo, MenuButton, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)


async def setup_web_app(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GitHub Pages"""
    try:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú GITHUB PAGES –ü–†–ê–í–ò–õ–¨–ù–û
        web_app_url = "https://egor88888888.github.io/yr_app/"
        web_app = WebAppInfo(url=web_app_url)
        menu_button = MenuButtonWebApp(
            text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=web_app)

        await application.bot.set_chat_menu_button(menu_button=menu_button)
        logger.info(f"‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {web_app_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! üèõÔ∏è\n\n"
        "–Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."
    )


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏"""
    logger.info("üéØ –ü–û–õ–£–ß–ï–ù–ê –ó–ê–Ø–í–ö–ê –û–¢ –í–ï–ë–ê!")
    user = update.effective_user

    if not update.effective_message or not update.effective_message.web_app_data:
        logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
        return

    logger.info(f"üìÑ –î–∞–Ω–Ω—ã–µ: {update.effective_message.web_app_data.data}")

    try:
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return

    if not ADMIN_CHAT_ID:
        logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return

    try:
        data = json.loads(update.effective_message.web_app_data.data)
        problems = ", ".join(data.get('problems', ['–ù–µ —É–∫–∞–∑–∞–Ω–æ']))
        name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        description = data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        admin_message = f"""üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!

üë§ –ö–ª–∏–µ–Ω—Ç: {name} (ID: {user.id})
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {problems}

üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏:
{description}

‚è∞ –í—Ä–µ–º—è: {update.effective_message.date}"""

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        logger.info("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        import traceback
        traceback.print_exc()


async def debug_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(
        f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"üì® –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(update.message)}")
    logger.info(f"üì® –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {update.message}")

    if update.message and hasattr(update.message, 'web_app_data'):
        logger.info(
            f"üåê –ê—Ç—Ä–∏–±—É—Ç web_app_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {update.message.web_app_data}")
        if update.message.web_app_data:
            logger.info(
                f"üåê WEB APP DATA –Ω–∞–π–¥–µ–Ω–∞: {update.message.web_app_data.data}")
        else:
            logger.info("üåê web_app_data None")
    else:
        logger.info("üåê web_app_data –∞—Ç—Ä–∏–±—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.critical("‚ùå YOUR_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    if ADMIN_CHAT_ID:
        logger.info(f"‚úÖ ADMIN_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {ADMIN_CHAT_ID}")
    else:
        logger.warning(
            "‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞—è–≤–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.")

    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND, debug_all_messages))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        asyncio.get_event_loop().run_until_complete(setup_web_app(application))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –±–æ—Ç–∞...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –¥–ª—è Railway
    if os.environ.get('RAILWAY_ENVIRONMENT'):
        MY_PUBLIC_URL = os.environ.get("MY_RAILWAY_PUBLIC_URL")
        if MY_PUBLIC_URL:
            webhook_url = f"https://{MY_PUBLIC_URL}/{TOKEN}"
            port = int(os.environ.get('PORT', 8080))
            logger.info(f"üåê Webhook: {webhook_url}")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=TOKEN,
                webhook_url=webhook_url
            )
        else:
            logger.error("‚ùå MY_RAILWAY_PUBLIC_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        logger.info("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º polling")
        application.run_polling()


if __name__ == "__main__":
    main()

import json
import logging
import os
import asyncio
from telegram import Update, WebAppInfo, MenuButton, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
# –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–®–£ –£–ù–ò–ö–ê–õ–¨–ù–£–Æ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –î–õ–Ø –ü–£–ë–õ–ò–ß–ù–û–ì–û –ê–î–†–ï–°–ê
MY_PUBLIC_URL = os.environ.get("MY_RAILWAY_PUBLIC_URL")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ---


async def setup_web_app(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub Pages –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        web_app_url = "https://egor88888888.github.io/yr_app/"
        web_app = WebAppInfo(url=web_app_url)
        menu_button = MenuButtonWebApp(
            text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=web_app)

        await application.bot.set_chat_menu_button(menu_button=menu_button)
        logger.info(f"–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {web_app_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ä–æ–º –≤–µ—Ä—Å–∏–∏."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! (v6.4)\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, "
        "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.",
    )


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("--- v6.4: –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É ---")
    user = update.effective_user

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if update.effective_message and update.effective_message.web_app_data:
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {update.effective_message.web_app_data.data}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
        return

    try:
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        logger.info("v6.4 | –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"v6.4 | –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return

    if not ADMIN_CHAT_ID:
        logger.warning(
            "v6.4 | ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    try:
        data = json.loads(update.effective_message.web_app_data.data)
        problems_text = ", ".join(data.get('problems', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))
        name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        description = data.get('description', '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ')

        admin_message = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (v6.4)!\n\n"
            f"–û—Ç: {name} (ID: {user.id})\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ü—Ä–æ–±–ª–µ–º—ã: {problems_text}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_CHAT_ID}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        logger.info("v6.4 | –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(
            f"v6.4 | –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}, –î–µ—Ç–∞–ª–∏: {str(e)}")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TOKEN:
        logger.critical(
            "–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è YOUR_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    if not MY_PUBLIC_URL:
        logger.critical(
            "–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MY_RAILWAY_PUBLIC_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ 'Variables'.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_CHAT_ID
    if ADMIN_CHAT_ID:
        logger.info(f"ADMIN_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {ADMIN_CHAT_ID}")
    else:
        logger.warning(
            "‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞—è–≤–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    webhook_full_url = f"https://{MY_PUBLIC_URL}/{TOKEN}"
    logger.info(f"–ü–æ–ª–Ω—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞: {webhook_full_url}")

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, web_app_data))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        asyncio.get_event_loop().run_until_complete(setup_web_app(application))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

    port = int(os.environ.get('PORT', 8080))
    logger.info(f"–ë–æ—Ç (v6.4) –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=webhook_full_url
    )


if __name__ == "__main__":
    main()

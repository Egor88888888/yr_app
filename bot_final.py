#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ê–Ø –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å GitHub Pages
"""
import json
import logging
import os
import asyncio
from telegram import Update, WebAppInfo, MenuButton, MenuButtonWebApp, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)


async def setup_web_app(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GitHub Pages"""
    try:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú GITHUB PAGES –ü–†–ê–í–ò–õ–¨–ù–û
        web_app_url = "https://egor88888888.github.io/yr_app/"
        web_app = WebAppInfo(url=web_app_url)
        menu_button = MenuButtonWebApp(
            text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=web_app)

        await application.bot.set_chat_menu_button(menu_button=menu_button)
        logger.info(f"‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {web_app_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user

    greeting_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! üèõÔ∏è\n\n"
        "–Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\", —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É."
    )

    # –ö–Ω–æ–ø–∫–∞-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp ‚Äî –ò–ú–ï–ù–ù–û –æ–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tg.sendData.
    web_app_url = "https://egor88888888.github.io/yr_app/"
    kb = [
        [
            KeyboardButton(
                text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=web_app_url),
            )
        ]
    ]

    reply_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)

    await update.message.reply_html(greeting_text, reply_markup=reply_markup)


# /form ‚Äî –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π WebApp –µ—â—ë —Ä–∞–∑."""
    web_app_url = "https://egor88888888.github.io/yr_app/"
    kb = [[KeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                          web_app=WebAppInfo(url=web_app_url))]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏"""
    logger.info("üéØüéØüéØ WEB_APP_DATA HANDLER –í–´–ó–í–ê–ù!")
    logger.info(f"üîç Update –æ–±—ä–µ–∫—Ç: {update}")
    logger.info(f"üîç Update.effective_message: {update.effective_message}")
    logger.info(f"üîç Update.effective_user: {update.effective_user}")

    user = update.effective_user
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} - {user.full_name}")

    if not update.effective_message:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ù–û: update.effective_message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        return

    if not update.effective_message.web_app_data:
        logger.error(
            "‚ùå –ö–†–ò–¢–ò–ß–ù–û: update.effective_message.web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        logger.error(f"‚ùå –ù–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å: {update.effective_message}")
        return

    logger.info(f"üìÑ RAW web_app_data: {update.effective_message.web_app_data}")
    logger.info(
        f"üìÑ WEB APP –î–ê–ù–ù–´–ï: {update.effective_message.web_app_data.data}")
    logger.info(
        f"üìÑ –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {len(update.effective_message.web_app_data.data)}")

    try:
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return

    if not ADMIN_CHAT_ID:
        logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return

    try:
        logger.info("üîÑ –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ...")
        data = json.loads(update.effective_message.web_app_data.data)
        logger.info(f"üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        problems = ", ".join(data.get('problems', ['–ù–µ —É–∫–∞–∑–∞–Ω–æ']))
        name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        description = data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        logger.info(
            f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: problems={problems}, name={name}, phone={phone}")

        admin_message = f"""üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!

üë§ –ö–ª–∏–µ–Ω—Ç: {name} (ID: {user.id})
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {problems}

üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏:
{description}

‚è∞ –í—Ä–µ–º—è: {update.effective_message.date}"""

        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ —á–∞—Ç: {ADMIN_CHAT_ID}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        logger.info("‚úÖ‚úÖ‚úÖ –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£!")
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        import traceback
        logger.error(f"‚ùå Stack trace: {traceback.format_exc()}")
        traceback.print_exc()


async def debug_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("=" * 50)
    logger.info(
        f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"üì® –¢–∏–ø update: {type(update)}")
    logger.info(f"üì® –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(update.message)}")
    logger.info(f"üì® –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ update.message: {update.message}")

    if update.message:
        logger.info(f"üì® Message ID: {update.message.message_id}")
        logger.info(f"üì® Text: {getattr(update.message, 'text', 'NO TEXT')}")
        logger.info(
            f"üì® Caption: {getattr(update.message, 'caption', 'NO CAPTION')}")

        if hasattr(update.message, 'web_app_data'):
            logger.info(
                f"üåê web_app_data –∞—Ç—Ä–∏–±—É—Ç –°–£–©–ï–°–¢–í–£–ï–¢: {update.message.web_app_data}")
            if update.message.web_app_data:
                logger.info(
                    f"üåêüåêüåê WEB APP DATA –ù–ê–ô–î–ï–ù–ê: {update.message.web_app_data.data}")
                logger.info(
                    f"üåê –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {len(update.message.web_app_data.data) if update.message.web_app_data.data else 0}")
            else:
                logger.info("üåê web_app_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ None")
        else:
            logger.info("üåê web_app_data –∞—Ç—Ä–∏–±—É—Ç –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ web_app_data
        try:
            direct_access = update.message.web_app_data
            logger.info(f"üîç –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ web_app_data: {direct_access}")
        except AttributeError as e:
            logger.info(f"üîç –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {e}")
    else:
        logger.info("üì® update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    logger.info("=" * 50)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.critical("‚ùå YOUR_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    if ADMIN_CHAT_ID:
        logger.info(f"‚úÖ ADMIN_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {ADMIN_CHAT_ID}")
    else:
        logger.warning(
            "‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞—è–≤–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.")

    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("form", form))
    application.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND, debug_all_messages))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û event-loop,
    # –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω `application.run_webhook`.
    # 1. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
    # 2. –î–µ–ª–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–º (set_event_loop)
    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º coroutine –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–∞–ø–ø–∞
    # 4. –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –æ–Ω –æ—Å—Ç–∞–ª—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω run_webhook.
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(setup_web_app(application))
        # –í–ê–ñ–ù–û: –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop, –∏–Ω–∞—á–µ run_webhook –ø–æ—Ç–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª.
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –±–æ—Ç–∞...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –¥–ª—è Railway
    if os.environ.get('RAILWAY_ENVIRONMENT'):
        MY_PUBLIC_URL = os.environ.get("MY_RAILWAY_PUBLIC_URL")
        if MY_PUBLIC_URL:
            webhook_url = f"https://{MY_PUBLIC_URL}/{TOKEN}"
            port = int(os.environ.get('PORT', 8080))
            logger.info(f"üåê Webhook: {webhook_url}")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=TOKEN,
                webhook_url=webhook_url
            )
        else:
            logger.error("‚ùå MY_RAILWAY_PUBLIC_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        logger.info("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º polling")
        application.run_polling()


if __name__ == "__main__":
    main()

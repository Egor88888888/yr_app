import json
import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("YOUR_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é, —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
PUBLIC_URL = os.environ.get("MY_PUBLIC_DOMAIN")


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ä–æ–º –≤–µ—Ä—Å–∏–∏."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! (v4.4)\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, "
        "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.",
    )


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("--- v4.4: –ó–ê–ü–£–©–ï–ù–ê –§–£–ù–ö–¶–ò–Ø WEB_APP_DATA ---")
    user = update.effective_user
    data = json.loads(update.effective_message.web_app_data.data)
    
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

    if ADMIN_CHAT_ID:
        try:
            problems_text = ", ".join(data.get('problems', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))
            admin_message = (
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (v4.4)!\n"
                f"–û—Ç: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({user.id})\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–ü—Ä–æ–±–ª–µ–º—ã: {problems_text}\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ')}"
            )
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
            logger.info("v4.4 | –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            logger.error(f"v4.4 | –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TOKEN:
        logger.critical("–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # --- –ù–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ---
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π MY_PUBLIC_DOMAIN. –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{PUBLIC_URL}'")

    if not PUBLIC_URL:
        logger.critical("–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MY_PUBLIC_DOMAIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ 'Variables'.")
        return
        
    webhook_full_url = f"https://{PUBLIC_URL}/{TOKEN}"
    logger.info(f"–ü–æ–ª–Ω—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞: {webhook_full_url}")

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"–ë–æ—Ç (v4.4) –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=webhook_full_url
    )


if __name__ == "__main__":
    main()

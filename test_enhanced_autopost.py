#!/usr/bin/env python3
"""
üß™ TEST ENHANCED AUTOPOST SYSTEM
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


async def test_enhanced_posts():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–æ–≤"""

    print("üöÄ Testing Enhanced Autopost System...")
    print("=" * 60)

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        os.environ.setdefault('AZURE_OPENAI_API_KEY', 'test_key')
        os.environ.setdefault('AZURE_OPENAI_ENDPOINT', 'test_endpoint')
        os.environ.setdefault('DATABASE_URL', 'sqlite:///test.db')

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PostGenerator
        from bot.services.content_intelligence.post_generator import PostGenerator

        generator = PostGenerator()

        print("üìù Testing post templates and structure...")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
        print(f"‚úÖ Templates loaded: {len(generator.enhanced_templates)}")
        print(
            f"‚úÖ Resource database: {len(generator.resource_database)} categories")
        print(
            f"‚úÖ Common problems: {len(generator.common_problems)} categories")

        print("\nüìã Available templates:")
        for template_name in generator.enhanced_templates.keys():
            print(f"  ‚Ä¢ {template_name}")

        print("\nüîó Resource categories:")
        for category, resources in generator.resource_database.items():
            print(f"  ‚Ä¢ {category}: {len(resources)} resources")

        print("\n‚ö†Ô∏è Problem categories:")
        for category, problems in generator.common_problems.items():
            print(f"  ‚Ä¢ {category}: {len(problems)} problems")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        print(f"\nüß™ Testing helper methods...")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        consumer_resources = generator._get_relevant_resources(
            'consumer_protection')
        print(
            f"‚úÖ Consumer resources: {len(consumer_resources.split(chr(10)))} items")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        legal_problems = generator._get_relevant_problems('legal_procedures')
        print(f"‚úÖ Legal problems: {len(legal_problems.split(chr(10)))} items")

        # –¢–µ—Å—Ç fallback –ø–æ—Å—Ç–∞
        test_topic = {
            'title': 'Test Legal Topic',
            'category': 'test_category',
            'type': 'step_by_step_guide'
        }

        fallback_post = await generator._create_fallback_post(test_topic)
        print(f"‚úÖ Fallback post generated: {len(fallback_post)} characters")

        print(f"\nüìÑ Sample fallback post:")
        print("-" * 40)
        print(fallback_post)
        print("-" * 40)

        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        quality_score = 0
        if "üéØ" in fallback_post:
            quality_score += 1
        if "‚ö†Ô∏è" in fallback_post:
            quality_score += 1
        if "üîó" in fallback_post:
            quality_score += 1
        if "üìû" in fallback_post:
            quality_score += 1
        if any(site in fallback_post for site in ['gosuslugi.ru', 'consultant.ru']):
            quality_score += 1

        print(f"üìä Quality Score: {quality_score}/5 ‚≠ê")

        if quality_score >= 4:
            print("‚úÖ HIGH QUALITY STRUCTURE")
        elif quality_score >= 3:
            print("‚ö° GOOD QUALITY STRUCTURE")
        else:
            print("‚ö†Ô∏è NEEDS IMPROVEMENT")

        print("\n" + "=" * 60)
        print("üéâ Enhanced Autopost Structure Test PASSED!")
        print("=" * 60)

        return True

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        print(f"Error details:\n{traceback.format_exc()}")
        return False


async def test_template_formatting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""

    print("\nüß™ Testing Template Formatting...")

    try:
        from bot.services.content_intelligence.post_generator import PostGenerator

        generator = PostGenerator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_content = {
            'title': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä',
            'step_algorithm': '''1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—á–µ–∫–∏, –¥–æ–≥–æ–≤–æ—Ä—ã)
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ª–∏—á–Ω–æ
3. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
4. –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –ª–µ—Ç
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π''',
            'potential_problems': '''‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ —Å—Ä–æ–∫–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è''',
            'useful_resources': '''üõ°Ô∏è –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä: rospotrebnadzor.ru
üèõÔ∏è –ì–æ—Å—É—Å–ª—É–≥–∏: gosuslugi.ru
üìñ –ì–∞—Ä–∞–Ω—Ç: garant.ru''',
            'practical_tips': '''‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–∞—Ç—ã –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π'''
        }

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
        for template_name, template in generator.enhanced_templates.items():
            print(f"\nüìã Testing template: {template_name}")

            try:
                formatted = generator._format_enhanced_post(
                    test_content, template_name)
                print(f"‚úÖ Length: {len(formatted)} chars")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                has_title = '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É' in formatted
                has_emojis = any(emoji in formatted for emoji in [
                                 'üéØ', '‚öñÔ∏è', 'üí°', 'üö®'])
                has_structure = any(section in formatted for section in [
                                    '–ê–õ–ì–û–†–ò–¢–ú', '–ü–†–û–ë–õ–ï–ú–´', '–†–ï–°–£–†–°–´'])

                print(f"   Title: {'‚úÖ' if has_title else '‚ùå'}")
                print(f"   Emojis: {'‚úÖ' if has_emojis else '‚ùå'}")
                print(f"   Structure: {'‚úÖ' if has_structure else '‚ùå'}")

            except Exception as e:
                print(f"‚ùå Template {template_name} failed: {e}")

        print("\n‚úÖ Template formatting test completed!")
        return True

    except Exception as e:
        print(f"‚ùå Template test failed: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("üß™ ENHANCED AUTOPOST SYSTEM TESTS")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    test1_result = await test_enhanced_posts()

    # –¢–µ—Å—Ç 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    test2_result = await test_template_formatting()

    print(f"\n{'=' * 60}")
    print("üìä FINAL TEST RESULTS:")
    print(f"Structure Test: {'‚úÖ PASSED' if test1_result else '‚ùå FAILED'}")
    print(f"Template Test: {'‚úÖ PASSED' if test2_result else '‚ùå FAILED'}")

    if test1_result and test2_result:
        print("\nüéâ ALL TESTS PASSED! System ready for deployment.")
        return 0
    else:
        print("\n‚ùå Some tests failed. Check implementation.")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

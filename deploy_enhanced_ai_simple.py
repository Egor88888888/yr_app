#!/usr/bin/env python3
"""
üöÄ ENHANCED AI SIMPLE DEPLOYMENT

–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Enhanced AI –º–∏–≥—Ä–∞—Ü–∏–π.
–†–∞–±–æ—Ç–∞–µ—Ç —Å SQLite –∏ PostgreSQL.
"""

import asyncio
import os
import sys
import subprocess
from datetime import datetime


async def deploy_enhanced_ai():
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ–ø–ª–æ–π Enhanced AI"""

    print("üöÄ Enhanced AI Simple Deployment")
    print("=" * 40)
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå ERROR: DATABASE_URL not set")
        sys.exit(1)

    is_sqlite = "sqlite" in database_url.lower()
    is_postgres = "postgres" in database_url.lower()

    print(
        f"üîó Database: {'SQLite' if is_sqlite else 'PostgreSQL' if is_postgres else 'Unknown'}")

    try:
        # –®–∞–≥ 1: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        print("\nüîß Step 1: Applying Enhanced AI migration...")
        await apply_migration()

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        print("\nüìä Step 2: Verifying tables...")
        await check_tables(is_sqlite)

        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º Enhanced AI
        print("\nüß™ Step 3: Testing Enhanced AI...")
        await test_enhanced_ai()

        print("\nüéâ Enhanced AI deployment completed successfully!")
        print("‚úÖ System is ready to use")

    except Exception as e:
        print(f"\n‚ùå Deployment failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


async def apply_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç Enhanced AI –º–∏–≥—Ä–∞—Ü–∏—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        result = subprocess.run(
            ["alembic", "current"],
            capture_output=True, text=True
        )

        if result.returncode == 0:
            print(f"üìã Current revision: {result.stdout.strip()}")
        else:
            print("‚ö†Ô∏è Could not check current revision, proceeding anyway...")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Enhanced AI
        print("üîÑ Running migration...")
        result = subprocess.run(
            ["alembic", "upgrade", "01_enhanced_ai"],
            capture_output=True, text=True, check=True
        )

        print("‚úÖ Migration completed successfully")
        if result.stdout.strip():
            print(f"üìù Output: {result.stdout.strip()}")

    except subprocess.CalledProcessError as e:
        if "already at" in e.stdout or "already at" in e.stderr:
            print("‚úÖ Migration already applied")
        else:
            print(f"‚ùå Migration failed: {e}")
            print(f"STDOUT: {e.stdout}")
            print(f"STDERR: {e.stderr}")
            raise


async def check_tables(is_sqlite=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ Enhanced AI —Ç–∞–±–ª–∏—Ü"""
    from bot.services.db import async_sessionmaker
    from sqlalchemy import text

    enhanced_ai_tables = [
        'user_profiles', 'dialogue_sessions', 'dialogue_messages',
        'message_embeddings', 'category_embeddings', 'ai_metrics',
        'user_preferences', 'training_data'
    ]

    async with async_sessionmaker() as session:
        # –†–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ë–î
        if is_sqlite:
            # SQLite: –∏—Å–ø–æ–ª—å–∑—É–µ–º sqlite_master
            query = "SELECT name FROM sqlite_master WHERE type='table'"
        else:
            # PostgreSQL: –∏—Å–ø–æ–ª—å–∑—É–µ–º information_schema
            query = """
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            """

        result = await session.execute(text(query))
        existing_tables = [row[0] for row in result.fetchall()]

        print(f"üìä Found {len(existing_tables)} tables total")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Enhanced AI —Ç–∞–±–ª–∏—Ü—ã
        missing_tables = []
        for table in enhanced_ai_tables:
            if table in existing_tables:
                print(f"‚úÖ {table}")
            else:
                print(f"‚ùå {table} - MISSING")
                missing_tables.append(table)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ applications
        if is_sqlite:
            # SQLite: PRAGMA table_info
            result = await session.execute(text("PRAGMA table_info(applications)"))
            columns = [row[1]
                       for row in result.fetchall()]  # row[1] is column name
        else:
            # PostgreSQL: information_schema
            result = await session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'applications'
            """))
            columns = [row[0] for row in result.fetchall()]

        for col in ['notes', 'assigned_admin']:
            if col in columns:
                print(f"‚úÖ applications.{col}")
            else:
                print(f"‚ùå applications.{col} - MISSING")
                missing_tables.append(f"applications.{col}")

        if missing_tables:
            raise Exception(f"Missing tables/columns: {missing_tables}")

        print("‚úÖ All Enhanced AI tables and columns verified")


async def test_enhanced_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Enhanced AI —Å–∏—Å—Ç–µ–º—É"""
    try:
        from bot.services.ai_enhanced.core.ai_manager import AIEnhancedManager

        print("üîß Initializing Enhanced AI...")
        ai_manager = AIEnhancedManager()
        await ai_manager.initialize()

        print("üè• Health check...")
        health = await ai_manager.health_check()
        status = health.get('status', 'unknown')
        print(f"‚úÖ Health: {status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = health.get('components', {})
        healthy_components = 0
        for name, comp_status in components.items():
            if comp_status.get('status') == 'ok':
                healthy_components += 1

        print(f"üìä Components: {healthy_components}/{len(components)} healthy")

        print("‚úÖ Enhanced AI system tested successfully")

    except Exception as e:
        print(f"‚ùå Enhanced AI test failed: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π, –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª
        print("‚ö†Ô∏è Continuing anyway - Enhanced AI may work in production")


if __name__ == "__main__":
    asyncio.run(deploy_enhanced_ai())

"""
üîç MONITORING SYSTEM TEST
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import os
import logging
from telegram import Bot
from bot.services.production_monitoring_system import ProductionMonitoringSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def test_monitoring_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""

    print("üîç Starting Production Monitoring System Test")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')

    if not bot_token:
        print("‚ùå BOT_TOKEN not found in environment")
        return

    if not admin_chat_id:
        print("‚ùå ADMIN_CHAT_ID not found in environment")
        return

    print(f"‚úÖ Environment variables configured")
    print(f"   - Bot Token: {'*' * 10}{bot_token[-5:]}")
    print(f"   - Admin Chat ID: {admin_chat_id}")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = Bot(token=bot_token)
        print("\nü§ñ Creating Telegram Bot...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        bot_info = await bot.get_me()
        print(f"‚úÖ Bot connected: @{bot_info.username}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\nüîç Creating Production Monitoring System...")
        monitoring_system = ProductionMonitoringSystem(bot, admin_chat_id)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health checks
        print("\nüè• Testing Health Checks...")

        health_checks = [
            "autopost_system",
            "comments_system",
            "smm_integration",
            "telegram_api",
            "database",
            "memory_usage",
            "response_time"
        ]

        for check_name in health_checks:
            try:
                check_function = monitoring_system.health_checks.get(
                    check_name)
                if check_function:
                    result = await check_function()
                    status = result.get("status", "unknown")
                    status_emoji = {
                        "healthy": "üü¢",
                        "warning": "üü°",
                        "degraded": "üü†",
                        "error": "üî¥",
                        "unknown": "‚ö™"
                    }.get(status, "‚ö™")

                    print(f"   {status_emoji} {check_name}: {status}")

                    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                    if status in ["error", "warning"] and result.get("details"):
                        details = result["details"]
                        if "error" in details:
                            print(f"      Error: {details['error']}")
                else:
                    print(f"   ‚ö™ {check_name}: check function not found")

            except Exception as e:
                print(f"   üî¥ {check_name}: Exception - {e}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dashboard
        print("\nüìä Testing Monitoring Dashboard...")
        dashboard = await monitoring_system.get_monitoring_dashboard()

        print(f"   - Monitoring Active: {dashboard['monitoring_active']}")
        print(f"   - Total Systems: {dashboard['total_systems']}")
        print(f"   - Total Checks: {dashboard['total_checks']}")
        print(f"   - Total Alerts: {dashboard['total_alerts']}")
        print(f"   - Active Alerts: {dashboard['active_alerts_count']}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
        print("\nüö® Testing Alert System...")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        from bot.services.production_monitoring_system import AlertLevel
        await monitoring_system._send_admin_alert(
            AlertLevel.INFO,
            "monitoring_test",
            "üß™ Test alert from monitoring system test"
        )
        print("   ‚úÖ Test alert sent successfully")

        # –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\n‚ö° Testing Automatic Monitoring (10 seconds)...")
        await monitoring_system.start_monitoring()
        print("   üöÄ Monitoring started")

        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        await asyncio.sleep(10)

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitoring_system.stop_monitoring()
        print("   üõë Monitoring stopped")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è dashboard
        final_dashboard = await monitoring_system.get_monitoring_dashboard()
        print(f"\nüìà Final Results:")
        print(
            f"   - Total Checks Performed: {final_dashboard['total_checks']}")
        print(
            f"   - Total Alerts Generated: {final_dashboard['total_alerts']}")

        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
        if final_dashboard['system_health']:
            print(f"   - System Health Summary:")
            for system, health in final_dashboard['system_health'].items():
                status_emoji = {
                    "healthy": "üü¢",
                    "warning": "üü°",
                    "degraded": "üü†",
                    "down": "üî¥",
                    "unknown": "‚ö™"
                }.get(health["status"], "‚ö™")
                print(f"     {status_emoji} {system}: {health['status']}")

        print("\nüéâ Monitoring System Test Completed Successfully!")
        print("=" * 50)

    except Exception as e:
        print(f"\n‚ùå Test Failed: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_monitoring_system()


if __name__ == "__main__":
    asyncio.run(main())

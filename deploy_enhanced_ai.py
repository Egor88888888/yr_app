#!/usr/bin/env python3
"""
üöÄ ENHANCED AI DEPLOYMENT SCRIPT

–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é Enhanced AI —Ç–∞–±–ª–∏—Ü –≤ production –±–µ–∑–æ–ø–∞—Å–Ω–æ.
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, rollback –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.
"""

import asyncio
import os
import sys
from datetime import datetime


async def deploy_enhanced_ai():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è Enhanced AI"""

    print("üöÄ Enhanced AI Deployment Script")
    print("=" * 50)
    print(f"‚è∞ Started at: {datetime.now()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment
    if not os.getenv("DATABASE_URL"):
        print("‚ùå ERROR: DATABASE_URL not set")
        sys.exit(1)

    database_url = os.getenv("DATABASE_URL")
    is_production = "railway" in database_url.lower(
    ) or "postgres" in database_url.lower()

    print(f"üîó Database: {'PRODUCTION' if is_production else 'LOCAL'}")
    print(f"üìä URL: {database_url[:50]}...")

    if is_production:
        confirm = input(
            "\n‚ö†Ô∏è  This is PRODUCTION! Continue? (type 'YES' to confirm): ")
        if confirm != "YES":
            print("‚ùå Deployment cancelled")
            sys.exit(0)

    try:
        # Step 1: Check current database state
        print("\nüìã Step 1: Checking database state...")
        await check_database_state()

        # Step 2: Apply Enhanced AI migration
        print("\nüîß Step 2: Applying Enhanced AI migration...")
        await apply_enhanced_ai_migration()

        # Step 3: Test Enhanced AI initialization
        print("\nüß™ Step 3: Testing Enhanced AI...")
        await test_enhanced_ai_system()

        # Step 4: Final verification
        print("\n‚úÖ Step 4: Final verification...")
        await verify_deployment()

        print("\nüéâ Enhanced AI deployment completed successfully!")
        print("‚úÖ System is ready for production use")

    except Exception as e:
        print(f"\n‚ùå Deployment failed: {e}")
        print("üîÑ Consider rollback if needed")
        import traceback
        traceback.print_exc()
        sys.exit(1)


async def check_database_state():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î"""
    from bot.services.db import async_sessionmaker
    from sqlalchemy import text

    async with async_sessionmaker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        result = await session.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """))
        tables = [row[0] for row in result.fetchall()]

        print(f"üìä Found {len(tables)} existing tables")

        enhanced_ai_tables = [
            'user_profiles', 'dialogue_sessions', 'dialogue_messages',
            'message_embeddings', 'category_embeddings', 'ai_metrics',
            'user_preferences', 'training_data'
        ]

        existing_enhanced_tables = [
            t for t in enhanced_ai_tables if t in tables]
        missing_enhanced_tables = [
            t for t in enhanced_ai_tables if t not in tables]

        if existing_enhanced_tables:
            print(
                f"‚ö†Ô∏è  Some Enhanced AI tables already exist: {existing_enhanced_tables}")

        if missing_enhanced_tables:
            print(f"‚ûï Need to create: {missing_enhanced_tables}")

        return missing_enhanced_tables


async def apply_enhanced_ai_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é Enhanced AI"""
    import subprocess

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏
        result = subprocess.run(
            ["alembic", "current"],
            capture_output=True, text=True, check=True
        )
        current_revision = result.stdout.strip()
        print(f"üìã Current migration: {current_revision}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Enhanced AI
        print("üîÑ Applying Enhanced AI migration...")
        result = subprocess.run(
            ["alembic", "upgrade", "01_enhanced_ai"],
            capture_output=True, text=True, check=True
        )

        print("‚úÖ Migration applied successfully")
        print(result.stdout)

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Migration failed: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        raise


async def test_enhanced_ai_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Enhanced AI —Å–∏—Å—Ç–µ–º—É"""
    try:
        from bot.services.ai_enhanced.core.ai_manager import AIEnhancedManager

        print("üîß Initializing Enhanced AI...")
        ai_manager = AIEnhancedManager()
        await ai_manager.initialize()

        print("üè• Checking health...")
        health = await ai_manager.health_check()
        print(f"‚úÖ Health status: {health.get('status', 'unknown')}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = health.get('components', {})
        for name, status in components.items():
            emoji = "‚úÖ" if status.get('status') == 'ok' else "‚ö†Ô∏è"
            print(f"  {emoji} {name}: {status.get('status', 'unknown')}")

        print("‚úÖ Enhanced AI system tested successfully")

    except Exception as e:
        print(f"‚ùå Enhanced AI test failed: {e}")
        raise


async def verify_deployment():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è"""
    from bot.services.db import async_sessionmaker
    from sqlalchemy import text

    async with async_sessionmaker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ Enhanced AI —Ç–∞–±–ª–∏—Ü—ã
        enhanced_ai_tables = [
            'user_profiles', 'dialogue_sessions', 'dialogue_messages',
            'message_embeddings', 'category_embeddings', 'ai_metrics',
            'user_preferences', 'training_data'
        ]

        for table in enhanced_ai_tables:
            try:
                result = await session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                count = result.scalar()
                print(f"‚úÖ {table}: {count} records")
            except Exception as e:
                print(f"‚ùå {table}: ERROR - {e}")
                raise

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ applications
        result = await session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'applications' 
            AND column_name IN ('notes', 'assigned_admin')
        """))
        added_columns = [row[0] for row in result.fetchall()]

        for col in ['notes', 'assigned_admin']:
            if col in added_columns:
                print(f"‚úÖ applications.{col}: OK")
            else:
                print(f"‚ùå applications.{col}: MISSING")
                raise Exception(f"Missing column: {col}")


if __name__ == "__main__":
    asyncio.run(deploy_enhanced_ai())

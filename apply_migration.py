#!/usr/bin/env python3
"""
üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ö–° –ë–î: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram ID overflow

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ INTEGER ‚Üí BIGINT –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö tg_id
"""

import asyncio
import os
from sqlalchemy import text
from bot.services.db import async_sessionmaker, async_engine


async def apply_telegram_id_fix():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞ –¥–ª—è Telegram ID overflow"""

    print("üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –§–ò–ö–°–ê –ë–î...")
    print("üìã –ü—Ä–æ–±–ª–µ–º–∞: PostgreSQL INTEGER overflow –¥–ª—è –±–æ–ª—å—à–∏—Ö Telegram ID")
    print("‚úÖ –†–µ—à–µ–Ω–∏–µ: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è tg_id –∫–æ–ª–æ–Ω–æ–∫ –≤ BIGINT")
    print()

    try:
        async with async_engine.begin() as conn:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∫–æ–ª–æ–Ω–æ–∫
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫...")

            result = await conn.execute(text("""
                SELECT column_name, data_type, table_name 
                FROM information_schema.columns 
                WHERE column_name = 'tg_id' 
                AND table_schema = 'public'
                ORDER BY table_name;
            """))

            current_types = result.fetchall()
            print("üìä –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã tg_id –∫–æ–ª–æ–Ω–æ–∫:")
            for row in current_types:
                print(
                    f"   ‚Ä¢ {row.table_name}.{row.column_name}: {row.data_type}")

            print()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            migrations = [
                ("users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                ("admins", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
            ]

            for table_name, description in migrations:
                print(f"üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {description} ({table_name}.tg_id)...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                table_check = await conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '{table_name}'
                    );
                """))

                if not table_check.scalar():
                    print(
                        f"   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
                await conn.execute(text(f"""
                    ALTER TABLE {table_name} 
                    ALTER COLUMN tg_id TYPE BIGINT;
                """))

                print(f"   ‚úÖ {table_name}.tg_id ‚Üí BIGINT")

            print()
            print("üéØ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await conn.execute(text("""
                SELECT column_name, data_type, table_name 
                FROM information_schema.columns 
                WHERE column_name = 'tg_id' 
                AND table_schema = 'public'
                ORDER BY table_name;
            """))

            new_types = result.fetchall()
            print("üìä –ù–æ–≤—ã–µ —Ç–∏–ø—ã tg_id –∫–æ–ª–æ–Ω–æ–∫:")
            for row in new_types:
                print(
                    f"   ‚Ä¢ {row.table_name}.{row.column_name}: {row.data_type}")

            print()
            print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–ê!")
            print("üéâ –¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ Telegram ID!")
            print(f"üìà –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –¥–æ {2**63-1:,}")

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False

    return True


async def test_large_telegram_id():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º Telegram ID"""

    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–õ–¨–®–ò–• TELEGRAM ID...")

    test_id = 6922033571  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π ID –∏–∑ –ª–æ–≥–æ–≤

    try:
        async with async_sessionmaker() as session:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º ID
            await session.execute(text("""
                INSERT INTO users (tg_id, first_name, preferred_contact, created_at, updated_at)
                VALUES (:tg_id, 'Test User', 'telegram', NOW(), NOW())
                ON CONFLICT (tg_id) 
                DO UPDATE SET updated_at = NOW()
            """), {"tg_id": test_id})

            await session.commit()

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Telegram ID: {test_id:,}")
            print("üéØ –§–∏–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
        return False

    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("=" * 60)
    print("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ö–° –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("üìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram ID overflow")
    print("=" * 60)
    print()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if await apply_telegram_id_fix():
        print()
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        await test_large_telegram_id()
        print()
        print("üéâ –í–°–ï –ì–û–¢–û–í–û! –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ Telegram ID!")
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        return 1

    return 0

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main()))

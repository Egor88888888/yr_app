# üê≥ PRODUCTION DOCKER COMPOSE
# –ü–æ–ª–Ω–∞—è production –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞

version: "3.8"

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jurbot_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=postgresql://jurbot:${POSTGRES_PASSWORD}@db:5432/jurbot
      - ADMIN_CHAT_ID=${ADMIN_CHAT_ID}
      - TARGET_CHANNEL_ID=${TARGET_CHANNEL_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - CLOUDPAYMENTS_PUBLIC_ID=${CLOUDPAYMENTS_PUBLIC_ID}
      - CLOUDPAYMENTS_API_SECRET=${CLOUDPAYMENTS_API_SECRET}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - jurbot_network
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8000/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: jurbot_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=jurbot
      - POSTGRES_USER=jurbot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - jurbot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jurbot -d jurbot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jurbot_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - jurbot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jurbot_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl
    depends_on:
      - app
    networks:
      - jurbot_network

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: jurbot_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - jurbot_network

  # Metrics Visualization (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: jurbot_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - jurbot_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  jurbot_network:
    driver: bridge

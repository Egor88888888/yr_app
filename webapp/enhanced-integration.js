/**
 * Enhanced Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ–æ—Ä–º–æ–π
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–æ–≤—ã–µ UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π
 */

class EnhancedIntegration {
    constructor() {
        this.originalFormData = window.formData || {};
        this.isInitialized = false;
        this.animations = new Map();
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    async init() {
        if (this.isInitialized) return;
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            this.setup();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    setup() {
        this.enhanceCategories();
        this.enhanceFormValidation();
        this.enhanceStepTransitions();
        this.enhanceProgressIndicator();
        this.integrateTelegramWebApp();
        this.setupKeyboardNavigation();
        
        this.isInitialized = true;
        console.log('üöÄ Enhanced UX integration activated');
    }

    /**
     * –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
     */
    enhanceCategories() {
        const categoryContainer = document.getElementById('categories');
        if (!categoryContainer) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        this.addCategorySearch();
        
        // –£–ª—É—á—à–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryCards = categoryContainer.querySelectorAll('.category-card');
        categoryCards.forEach((card, index) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
            card.classList.add('category-card-enhanced', 'micro-interaction');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);

            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            const originalHandler = card.onclick;
            card.onclick = (e) => {
                this.handleCategorySelection(card, e);
                if (originalHandler) originalHandler.call(card, e);
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            this.addCategoryTooltip(card);
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    addCategorySearch() {
        const stepContainer = document.getElementById('step-1');
        if (!stepContainer) return;

        const searchContainer = document.createElement('div');
        searchContainer.className = 'mb-6';
        searchContainer.innerHTML = `
            <div class="relative">
                <input 
                    type="text" 
                    id="category-search" 
                    placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..." 
                    class="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                <div class="absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
            </div>
        `;

        const titleElement = stepContainer.querySelector('h2');
        titleElement.parentNode.insertBefore(searchContainer, titleElement.nextSibling.nextSibling);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
        const searchInput = searchContainer.querySelector('#category-search');
        searchInput.addEventListener('input', (e) => {
            this.filterCategories(e.target.value);
        });
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –ø–æ–∏—Å–∫—É
     */
    filterCategories(searchTerm) {
        const categories = document.querySelectorAll('.category-card');
        const term = searchTerm.toLowerCase();

        categories.forEach(card => {
            const text = card.querySelector('.text').textContent.toLowerCase();
            const matches = text.includes(term);
            
            card.style.transition = 'all 0.3s ease';
            if (matches) {
                card.style.display = 'flex';
                card.style.opacity = '1';
                card.style.transform = 'scale(1)';
            } else {
                card.style.opacity = '0.3';
                card.style.transform = 'scale(0.95)';
                if (term) {
                    setTimeout(() => {
                        if (!card.querySelector('.text').textContent.toLowerCase().includes(term)) {
                            card.style.display = 'none';
                        }
                    }, 300);
                } else {
                    card.style.display = 'flex';
                }
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    addCategoryTooltip(card) {
        const categoryName = card.dataset.name;
        const descriptions = {
            '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ': '–†–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã, —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞, –±—Ä–∞—á–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã',
            '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ': '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, –∑–∞–≤–µ—â–∞–Ω–∏—è, –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã',
            '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã': '–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ, –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ç—Ä—É–¥–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã, –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤',
            '–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã': '–ñ–ö–•, –ø–æ–∫—É–ø–∫–∞-–ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Å–ø–æ—Ä—ã —Å —Å–æ—Å–µ–¥—è–º–∏',
            '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü': '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞, —Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤',
            '–ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏': '–ù–∞–ª–æ–≥–æ–≤—ã–µ —Å–ø–æ—Ä—ã, –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏, –ª—å–≥–æ—Ç—ã',
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞': '–®—Ç—Ä–∞—Ñ—ã –ì–ò–ë–î–î, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è',
            '–ê—Ä–±–∏—Ç—Ä–∞–∂ / –±–∏–∑–Ω–µ—Å': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã, –¥–æ–≥–æ–≤–æ—Ä—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞',
            '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π': '–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏',
            '–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ': '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ, –í–ù–ñ, –†–í–ü, –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã',
            '–£–≥–æ–ª–æ–≤–Ω—ã–µ –¥–µ–ª–∞': '–ó–∞—â–∏—Ç–∞ –ø–æ —É–≥–æ–ª–æ–≤–Ω—ã–º –¥–µ–ª–∞–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Å—É–¥–µ',
            '–î—Ä—É–≥–æ–µ': '–î—Ä—É–≥–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã'
        };

        const description = descriptions[categoryName] || '–ü–æ–¥—Ä–æ–±–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è';
        
        card.classList.add('tooltip');
        const tooltipElement = document.createElement('span');
        tooltipElement.className = 'tooltiptext';
        tooltipElement.textContent = description;
        card.appendChild(tooltipElement);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    handleCategorySelection(card, event) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        document.querySelectorAll('.category-card').forEach(c => {
            c.classList.remove('selected');
        });

        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        card.classList.add('selected');

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
        card.style.animation = 'pulse 0.6s ease-in-out';
        
        // –≠—Ñ—Ñ–µ–∫—Ç ripple
        this.createRippleEffect(card, event);

        setTimeout(() => {
            card.style.animation = '';
        }, 600);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const customEvent = new CustomEvent('categorySelected', {
            detail: {
                categoryId: parseInt(card.dataset.id),
                categoryName: card.dataset.name
            }
        });
        document.dispatchEvent(customEvent);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
     */
    createRippleEffect(element, event) {
        const rect = element.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = event.clientX - rect.left - size / 2;
        const y = event.clientY - rect.top - size / 2;

        const ripple = document.createElement('div');
        ripple.style.cssText = `
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.6);
            transform: scale(0);
            animation: ripple 0.6s ease-out;
            left: ${x}px;
            top: ${y}px;
            width: ${size}px;
            height: ${size}px;
            pointer-events: none;
        `;

        element.style.position = 'relative';
        element.style.overflow = 'hidden';
        element.appendChild(ripple);

        setTimeout(() => ripple.remove(), 600);
    }

    /**
     * –£–ª—É—á—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
     */
    enhanceFormValidation() {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
        const fields = ['subcategory', 'description', 'name', 'phone', 'email', 'contact-method'];
        
        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—è
                this.wrapFormField(field);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è textarea
                if (field.tagName === 'TEXTAREA') {
                    this.addCharacterCounter(field);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                if (fieldId === 'phone') {
                    this.addPhoneMask(field);
                }
            }
        });
    }

    /**
     * –û–±–µ—Ä—Ç–∫–∞ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
     */
    wrapFormField(field) {
        if (field.closest('.form-field')) return; // –£–∂–µ –æ–±–µ—Ä–Ω—É—Ç–æ

        const wrapper = document.createElement('div');
        wrapper.className = 'form-field floating-label';
        
        field.parentNode.insertBefore(wrapper, field);
        wrapper.appendChild(field);

        // –î–æ–±–∞–≤–ª—è–µ–º floating label
        const label = field.previousElementSibling;
        if (label && label.tagName === 'LABEL') {
            wrapper.appendChild(label);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
     */
    addCharacterCounter(textarea) {
        const maxLength = 2000;
        const counter = document.createElement('div');
        counter.className = 'character-counter text-sm text-gray-500 mt-1 text-right';
        
        const updateCounter = () => {
            const length = textarea.value.length;
            counter.textContent = `${length}/${maxLength}`;
            
            if (length > maxLength * 0.9) {
                counter.classList.add('text-yellow-500');
            } else {
                counter.classList.remove('text-yellow-500');
            }
            
            if (length > maxLength) {
                counter.classList.add('text-red-500');
            } else {
                counter.classList.remove('text-red-500');
            }
        };

        textarea.addEventListener('input', updateCounter);
        textarea.parentNode.appendChild(counter);
        updateCounter();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    addPhoneMask(phoneField) {
        phoneField.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, '');
            
            if (value.startsWith('8')) {
                value = '7' + value.slice(1);
            }
            
            if (value.startsWith('7')) {
                const formatted = value.replace(/^7(\d{3})(\d{3})(\d{2})(\d{2}).*/, '+7 ($1) $2-$3-$4');
                if (formatted !== value) {
                    e.target.value = formatted;
                }
            }
        });
    }

    /**
     * –£–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
     */
    enhanceStepTransitions() {
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ nextStep –∏ prevStep
        const originalNextStep = window.nextStep;
        const originalPrevStep = window.prevStep;

        window.nextStep = () => {
            const currentStepEl = document.querySelector('.step:not(.hidden)');
            if (currentStepEl) {
                currentStepEl.classList.add('step-transition-exit');
            }
            
            setTimeout(() => {
                if (originalNextStep) originalNextStep();
                
                const newStepEl = document.querySelector('.step:not(.hidden)');
                if (newStepEl) {
                    newStepEl.classList.add('step-transition-enter');
                    setTimeout(() => {
                        newStepEl.classList.remove('step-transition-enter');
                        if (currentStepEl) {
                            currentStepEl.classList.remove('step-transition-exit');
                        }
                    }, 500);
                }
            }, 250);
        };

        window.prevStep = () => {
            const currentStepEl = document.querySelector('.step:not(.hidden)');
            if (currentStepEl) {
                currentStepEl.classList.add('step-transition-exit');
            }
            
            setTimeout(() => {
                if (originalPrevStep) originalPrevStep();
                
                const newStepEl = document.querySelector('.step:not(.hidden)');
                if (newStepEl) {
                    newStepEl.classList.add('step-transition-enter');
                    setTimeout(() => {
                        newStepEl.classList.remove('step-transition-enter');
                        if (currentStepEl) {
                            currentStepEl.classList.remove('step-transition-exit');
                        }
                    }, 500);
                }
            }, 250);
        };
    }

    /**
     * –£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    enhanceProgressIndicator() {
        const progressBar = document.getElementById('progress-bar');
        if (!progressBar) return;

        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const originalUpdateUI = window.updateUI;
        if (originalUpdateUI) {
            window.updateUI = function() {
                originalUpdateUI.call(this);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—É
                const currentStep = window.currentStep || 1;
                const progress = (currentStep * 25);
                
                progressBar.style.transition = 'width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            };
        }
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram WebApp
     */
    integrateTelegramWebApp() {
        if (window.Telegram?.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
            tg.setHeaderColor('#667eea');
            
            // –í–∫–ª—é—á–∞–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            const originalHandleCategorySelection = this.handleCategorySelection;
            this.handleCategorySelection = function(card, event) {
                tg.HapticFeedback.impactOccurred('light');
                originalHandleCategorySelection.call(this, card, event);
            };

            // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤
            const originalNextStep = window.nextStep;
            if (originalNextStep) {
                window.nextStep = function() {
                    tg.HapticFeedback.impactOccurred('medium');
                    originalNextStep.call(this);
                };
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboardNavigation() {
        document.addEventListener('keydown', (e) => {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Å—Ç—Ä–µ–ª–∫–∞–º–∏
            if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
                const categories = document.querySelectorAll('.category-card');
                const selected = document.querySelector('.category-card.selected');
                
                if (categories.length > 0) {
                    let currentIndex = selected ? Array.from(categories).indexOf(selected) : -1;
                    
                    if (e.key === 'ArrowRight') {
                        currentIndex = (currentIndex + 1) % categories.length;
                    } else {
                        currentIndex = currentIndex <= 0 ? categories.length - 1 : currentIndex - 1;
                    }
                    
                    categories.forEach(c => c.classList.remove('selected'));
                    categories[currentIndex].classList.add('selected');
                    categories[currentIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    
                    e.preventDefault();
                }
            }
            
            // Enter –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (e.key === 'Enter') {
                const selected = document.querySelector('.category-card.selected');
                if (selected && !selected.closest('.step.hidden')) {
                    selected.click();
                    e.preventDefault();
                }
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–π
     */
    injectAnimationStyles() {
        if (document.getElementById('enhanced-animations')) return;

        const style = document.createElement('style');
        style.id = 'enhanced-animations';
        style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
            
            .animate-fade-in {
                animation: fadeIn 0.3s ease-in-out;
            }
            
            .character-counter {
                transition: color 0.3s ease;
            }
        `;
        
        document.head.appendChild(style);
    }
}

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let enhancedIntegration;

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        enhancedIntegration = new EnhancedIntegration();
        window.enhancedIntegration = enhancedIntegration;
    });
} else {
    enhancedIntegration = new EnhancedIntegration();
    window.enhancedIntegration = enhancedIntegration;
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.EnhancedIntegration = EnhancedIntegration; 
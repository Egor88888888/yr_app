/*
=======================================================
üîß –ü–†–û–°–¢–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò
=======================================================
*/

'use strict';

// –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
const CATEGORIES = [
    { id: 1, name: "–°–µ–º–µ–π–Ω–æ–µ", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
    { id: 2, name: "–ë–∏–∑–Ω–µ—Å", icon: "üè¢" },
    { id: 3, name: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", icon: "üè†" },
    { id: 4, name: "–¢—Ä—É–¥–æ–≤–æ–µ", icon: "üíº" },
    { id: 5, name: "–ù–∞–ª–æ–≥–æ–≤–æ–µ", icon: "üí∞" },
    { id: 6, name: "–ê–¥–º–∏–Ω.", icon: "üìã" },
    { id: 7, name: "–£–≥–æ–ª–æ–≤–Ω–æ–µ", icon: "‚öñÔ∏è" },
    { id: 8, name: "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ", icon: "üìù" },
    { id: 9, name: "IP", icon: "üí°" },
    { id: 10, name: "–ú–∏–≥—Ä–∞—Ü–∏—è", icon: "‚úàÔ∏è" },
    { id: 11, name: "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", icon: "üõ°Ô∏è" },
    { id: 12, name: "–î—Ä—É–≥–æ–µ", icon: "üîÑ" }
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
window.currentStep = 1;
window.formData = {
    category_id: null,
    category_name: "",
    subcategory: "",
    description: "",
    name: "",
    phone: "",
    email: "",
    contact_method: "",
    contact_time: "any"
};

// –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
function validateStep() {
    console.log('üîç Validating step:', window.currentStep);
    
    const nextBtn = document.getElementById('next-btn');
    if (!nextBtn) {
        console.error('‚ùå Next button not found!');
        return;
    }
    
    let isValid = false;
    
    switch (window.currentStep) {
        case 1:
            isValid = !!window.formData.category_id;
            console.log('Step 1 - Category selected:', window.formData.category_id, 'Valid:', isValid);
            break;
            
        case 2:
            const desc = window.formData.description || '';
            isValid = desc.trim().length >= 3; // –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–æ 3 —Å–∏–º–≤–æ–ª–æ–≤
            console.log('Step 2 - Description:', `"${desc}"`, 'Length:', desc.trim().length, 'Valid:', isValid);
            break;
            
        case 3:
            isValid = window.formData.name.trim() && 
                     window.formData.phone.trim() && 
                     window.formData.contact_method;
            console.log('Step 3 - All fields:', {
                name: window.formData.name.trim(),
                phone: window.formData.phone.trim(), 
                contact: window.formData.contact_method
            }, 'Valid:', isValid);
            break;
            
        case 4:
            isValid = true;
            break;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    nextBtn.disabled = !isValid;
    nextBtn.style.opacity = isValid ? '1' : '0.5';
    nextBtn.style.pointerEvents = isValid ? 'auto' : 'none';
    nextBtn.style.cursor = isValid ? 'pointer' : 'not-allowed';
    
    console.log('‚úÖ Button updated:', {
        disabled: nextBtn.disabled,
        opacity: nextBtn.style.opacity,
        pointerEvents: nextBtn.style.pointerEvents
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    console.log('üîÑ Updating UI for step:', window.currentStep);
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —à–∞–≥–∏
    document.querySelectorAll('.ultra-step').forEach(step => {
        step.classList.remove('active');
        step.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
    const currentStepEl = document.getElementById(`step-${window.currentStep}`);
    if (currentStepEl) {
        currentStepEl.classList.add('active');
        currentStepEl.classList.remove('hidden');
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const indicator = document.getElementById('step-indicator');
    if (indicator) {
        indicator.textContent = `–®–∞–≥ ${window.currentStep} –∏–∑ 4`;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
        progressBar.style.width = `${(window.currentStep / 4) * 100}%`;
    }
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const backBtn = document.getElementById('back-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (backBtn) {
        backBtn.style.display = window.currentStep > 1 ? 'block' : 'none';
    }
    
    if (nextBtn) {
        nextBtn.textContent = window.currentStep === 4 ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí';
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    validateStep();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function nextStep() {
    console.log('‚û°Ô∏è Next step clicked from step:', window.currentStep);
    
    if (window.currentStep === 4) {
        submitForm();
        return;
    }
    
    if (window.currentStep < 4) {
        window.currentStep++;
        updateUI();
    }
}

function prevStep() {
    console.log('‚¨ÖÔ∏è Previous step clicked from step:', window.currentStep);
    
    if (window.currentStep > 1) {
        window.currentStep--;
        updateUI();
    }
}

// –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectCategory(id, name) {
    console.log('üìã Category selected:', id, name);
    
    // –£–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    document.querySelectorAll('.ultra-category').forEach(el => 
        el.classList.remove('selected'));
    
    // –í—ã–¥–µ–ª–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    document.querySelector(`[data-id="${id}"]`)?.classList.add('selected');
    
    window.formData.category_id = id;
    window.formData.category_name = name;
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä
    const selectedDiv = document.getElementById('selected-category');
    const selectedName = document.getElementById('selected-category-name');
    if (selectedDiv && selectedName) {
        selectedName.textContent = name;
        selectedDiv.classList.remove('hidden');
    }
    
    validateStep();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
async function submitForm() {
    console.log('üì§ Submitting form:', window.formData);
    
    const nextBtn = document.getElementById('next-btn');
    nextBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    nextBtn.disabled = true;
    
    try {
        const response = await fetch('/submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(window.formData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Submit successful:', result);
            showSuccess(result);
        } else {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }
    } catch (error) {
        console.error('‚ùå Submit error:', error);
        alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
        nextBtn.textContent = '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
        nextBtn.disabled = false;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
function showSuccess(result) {
    console.log('üéâ Showing success page with result:', result);
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —à–∞–≥–∏
    document.querySelectorAll('.ultra-step').forEach(step => step.classList.add('hidden'));
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
    const successStep = document.getElementById('success');
    if (successStep) {
        successStep.classList.remove('hidden');
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞
        updateSuccessContent(result);
    }
    
    // –°–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const navigation = document.querySelector('.ultra-navigation');
    if (navigation) {
        navigation.style.display = 'none';
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –≤ Telegram
    sendClientNotification(result);
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞
function updateSuccessContent(result) {
    const applicationId = result?.application_id || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    const payUrl = result?.pay_url;
    
    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const successTitle = document.querySelector('.ultra-success-title');
    const successText = document.querySelector('.ultra-success-text');
    const paymentSection = document.getElementById('payment-section');
    const payButton = document.getElementById('pay-button');
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å ID –∑–∞—è–≤–∫–∏
    if (successTitle) {
        successTitle.innerHTML = `–ó–∞—è–≤–∫–∞ #${applicationId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üéâ`;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if (successText) {
        const contactMethod = {
            'telegram': 'üí¨ Telegram',
            'phone': 'üìû —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–º—É –∑–≤–æ–Ω–∫—É',
            'whatsapp': 'üíö WhatsApp',
            'email': 'üìß Email'
        }[window.formData.contact_method] || '–≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É —Å–≤—è–∑–∏';
        
        const contactTime = {
            'any': '–≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è',
            'morning': '—É—Ç—Ä–æ–º (9:00-12:00)',
            'afternoon': '–¥–Ω—ë–º (12:00-17:00)',
            'evening': '–≤–µ—á–µ—Ä–æ–º (17:00-21:00)'
        }[window.formData.contact_time] || '–≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è';
        
        successText.innerHTML = `
            <div style="text-align: left; background: rgba(102, 126, 234, 0.1); padding: 20px; border-radius: 12px; margin: 20px 0;">
                <div style="font-weight: 600; margin-bottom: 12px; color: #2d3748;">üìã –î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</div>
                <div style="margin-bottom: 8px;"><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${window.formData.category_name}</div>
                <div style="margin-bottom: 8px;"><strong>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</strong> ${contactMethod}</div>
                <div style="margin-bottom: 8px;"><strong>–í—Ä–µ–º—è:</strong> ${contactTime}</div>
                <div><strong>ID –∑–∞—è–≤–∫–∏:</strong> #${applicationId}</div>
            </div>
            
            <div style="background: rgba(17, 153, 142, 0.1); padding: 20px; border-radius: 12px; margin: 20px 0;">
                <div style="font-weight: 600; margin-bottom: 12px; color: #2d3748;">‚è±Ô∏è –ß—Ç–æ –¥–∞–ª—å—à–µ:</div>
                <div style="margin-bottom: 8px;">‚úÖ <strong>–°–µ–π—á–∞—Å:</strong> –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞ —é—Ä–∏—Å—Ç—É</div>
                <div style="margin-bottom: 8px;">üìû <strong>–í —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç:</strong> –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ ${contactMethod.toLowerCase()}</div>
                <div style="margin-bottom: 8px;">‚öñÔ∏è <strong>–ü–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</strong> –ü–æ–ª—É—á–∏—Ç–µ –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã</div>
                <div>üíé <strong>–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ:</strong> –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</div>
            </div>
        `;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
    if (paymentSection && payButton && payUrl && payUrl !== "# –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞") {
        paymentSection.classList.remove('hidden');
        payButton.href = payUrl;
        payButton.onclick = () => {
            console.log('üí≥ Payment button clicked:', payUrl);
            if (window.Telegram?.WebApp) {
                window.Telegram.WebApp.openLink(payUrl);
            } else {
                window.open(payUrl, '_blank');
            }
        };
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –≤ Telegram (—á–µ—Ä–µ–∑ –±–æ—Ç–∞)
async function sendClientNotification(result) {
    try {
        const response = await fetch('/notify-client', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                application_id: result?.application_id,
                user_data: window.formData
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ Client notification sent');
        } else {
            console.log('‚ö†Ô∏è Client notification failed, but that\'s okay');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Client notification error (non-critical):', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Simple app starting...');
    
    // –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const container = document.getElementById('categories');
    if (container) {
        container.innerHTML = CATEGORIES.map(cat => `
            <div class="ultra-category" 
                 data-id="${cat.id}" 
                 onclick="selectCategory(${cat.id}, '${cat.name}')">
                <div class="ultra-category-emoji">${cat.icon}</div>
                <div class="ultra-category-text">${cat.name}</div>
            </div>
        `).join('');
    }
    
    // –°–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('back-btn')?.addEventListener('click', prevStep);
    document.getElementById('next-btn')?.addEventListener('click', nextStep);
    
    // –°–æ–±—ã—Ç–∏—è –ø–æ–ª–µ–π
    document.getElementById('description')?.addEventListener('input', (e) => {
        window.formData.description = e.target.value;
        
        const counter = document.getElementById('description-counter');
        if (counter) counter.textContent = e.target.value.length;
        
        console.log('üìù Description updated:', `"${e.target.value}"`);
        validateStep();
    });
    
    document.getElementById('subcategory')?.addEventListener('input', (e) => {
        window.formData.subcategory = e.target.value;
        validateStep();
    });
    
    document.getElementById('name')?.addEventListener('input', (e) => {
        window.formData.name = e.target.value;
        validateStep();
    });
    
    document.getElementById('phone')?.addEventListener('input', (e) => {
        window.formData.phone = e.target.value;
        validateStep();
    });
    
    document.getElementById('email')?.addEventListener('input', (e) => {
        window.formData.email = e.target.value;
        validateStep();
    });
    
    document.getElementById('contact-method')?.addEventListener('change', (e) => {
        window.formData.contact_method = e.target.value;
        validateStep();
    });
    
    document.getElementById('contact-time')?.addEventListener('change', (e) => {
        window.formData.contact_time = e.target.value;
        validateStep();
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    updateUI();
    
    console.log('‚úÖ Simple app initialized');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.selectCategory = selectCategory;
window.nextStep = nextStep;
window.prevStep = prevStep;
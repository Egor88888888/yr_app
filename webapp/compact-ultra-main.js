/*
=======================================================
üöÄ –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –£–õ–¨–¢–†–ê-–°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
=======================================================
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
*/

'use strict';

// Telegram WebApp Integration
const tg = window.Telegram?.WebApp || {
    initDataUnsafe: {},
    initData: '',
    MainButton: { show(){}, hide(){}, setText(){}, onClick(){} },
    BackButton: { show(){}, hide(){}, onClick(){} },
    HapticFeedback: { 
        impactOccurred(){}, 
        notificationOccurred(){}, 
        selectionChanged(){} 
    },
    close() { window.close(); },
    ready() {},
    expand() {}
};

tg.ready();
tg.expand?.();

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const CATEGORIES = [
    { id: 1, name: "–°–µ–º–µ–π–Ω–æ–µ", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
    { id: 2, name: "–ë–∏–∑–Ω–µ—Å", icon: "üè¢" },
    { id: 3, name: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", icon: "üè†" },
    { id: 4, name: "–¢—Ä—É–¥–æ–≤–æ–µ", icon: "üíº" },
    { id: 5, name: "–ù–∞–ª–æ–≥–æ–≤–æ–µ", icon: "üí∞" },
    { id: 6, name: "–ê–¥–º–∏–Ω.", icon: "üìã" },
    { id: 7, name: "–£–≥–æ–ª–æ–≤–Ω–æ–µ", icon: "‚öñÔ∏è" },
    { id: 8, name: "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ", icon: "üìù" },
    { id: 9, name: "IP", icon: "üí°" },
    { id: 10, name: "–ú–∏–≥—Ä–∞—Ü–∏—è", icon: "‚úàÔ∏è" },
    { id: 11, name: "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", icon: "üõ°Ô∏è" },
    { id: 12, name: "–î—Ä—É–≥–æ–µ", icon: "üîÑ" }
];

// –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class CompactApp {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {
            category_id: null,
            category_name: "",
            subcategory: "",
            description: "",
            name: "",
            phone: "",
            email: "",
            contact_method: "",
            contact_time: "any",
            files: []
        };
        this.init();
    }

    init() {
        this.renderCategories();
        this.setupEvents();
        this.updateUI();
    }

    setupEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.getElementById('back-btn')?.addEventListener('click', () => this.prevStep());
        document.getElementById('next-btn')?.addEventListener('click', () => this.nextStep());
        
        // –§–æ—Ä–º–∞
        document.addEventListener('input', (e) => {
            if (this.formData.hasOwnProperty(e.target.id)) {
                this.formData[e.target.id] = e.target.value;
                this.validate();
            }
        });
        
        // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        document.getElementById('description')?.addEventListener('input', (e) => {
            const counter = document.getElementById('description-counter');
            if (counter) counter.textContent = e.target.value.length;
        });
        
        // –§–∞–π–ª—ã
        document.getElementById('files')?.addEventListener('change', (e) => {
            this.handleFiles(e.target.files);
        });
    }

    renderCategories() {
        const container = document.getElementById('categories');
        if (!container) return;

        container.innerHTML = CATEGORIES.map(cat => `
            <div class="ultra-category" 
                 data-id="${cat.id}" 
                 onclick="app.selectCategory(${cat.id}, '${cat.name}')">
                <div class="ultra-category-emoji">${cat.icon}</div>
                <div class="ultra-category-text">${cat.name}</div>
            </div>
        `).join('');
    }

    selectCategory(id, name) {
        // –£–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        document.querySelectorAll('.ultra-category').forEach(el => 
            el.classList.remove('selected'));
        
        // –í—ã–¥–µ–ª–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        document.querySelector(`[data-id="${id}"]`)?.classList.add('selected');
        
        this.formData.category_id = id;
        this.formData.category_name = name;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä
        const selectedDiv = document.getElementById('selected-category');
        const selectedName = document.getElementById('selected-category-name');
        if (selectedDiv && selectedName) {
            selectedName.textContent = name;
            selectedDiv.classList.remove('hidden');
        }
        
        this.validate();
        tg.HapticFeedback?.selectionChanged();
    }

    handleFiles(files) {
        const fileList = document.getElementById('file-list');
        if (!fileList || !files.length) return;

        Array.from(files).slice(0, 5).forEach(file => {
            if (file.size > 10 * 1024 * 1024) return; // 10MB limit
            
            const fileDiv = document.createElement('div');
            fileDiv.style.cssText = `
                display: flex; 
                align-items: center; 
                gap: 8px; 
                padding: 8px; 
                background: #f8f9fa; 
                border-radius: 8px; 
                margin-bottom: 8px;
                font-size: 12px;
            `;
            
            fileDiv.innerHTML = `
                <span>üìÑ</span>
                <span>${file.name}</span>
                <span style="margin-left: auto; color: #666;">
                    ${(file.size / 1024).toFixed(0)}KB
                </span>
            `;
            
            fileList.appendChild(fileDiv);
            this.formData.files.push(file);
        });
    }

    validate() {
        const nextBtn = document.getElementById('next-btn');
        if (!nextBtn) return;

        let isValid = false;
        
        switch (this.currentStep) {
            case 1:
                isValid = !!this.formData.category_id;
                break;
            case 2:
                isValid = this.formData.description.length > 10;
                break;
            case 3:
                isValid = this.formData.name && 
                         this.formData.phone && 
                         this.formData.contact_method;
                break;
            case 4:
                isValid = true;
                break;
        }
        
        nextBtn.disabled = !isValid;
        nextBtn.style.opacity = isValid ? '1' : '0.5';
    }

    prevStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateUI();
            tg.HapticFeedback?.impactOccurred('light');
        }
    }

    nextStep() {
        if (this.currentStep === 4) {
            this.submit();
            return;
        }
        
        if (this.currentStep < this.totalSteps) {
            this.currentStep++;
            this.updateUI();
            tg.HapticFeedback?.impactOccurred('light');
        }
    }

    updateUI() {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —à–∞–≥–∏
        document.querySelectorAll('.ultra-step').forEach(step => {
            step.classList.remove('active');
            step.classList.add('hidden');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
        const currentStepEl = document.getElementById(`step-${this.currentStep}`);
        if (currentStepEl) {
            currentStepEl.classList.add('active');
            currentStepEl.classList.remove('hidden');
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        const indicator = document.getElementById('step-indicator');
        if (indicator) {
            indicator.textContent = `–®–∞–≥ ${this.currentStep} –∏–∑ ${this.totalSteps}`;
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progressBar = document.getElementById('progress-bar');
        if (progressBar) {
            progressBar.style.width = `${(this.currentStep / this.totalSteps) * 100}%`;
        }
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const backBtn = document.getElementById('back-btn');
        const nextBtn = document.getElementById('next-btn');
        
        if (backBtn) {
            backBtn.style.display = this.currentStep > 1 ? 'block' : 'none';
        }
        
        if (nextBtn) {
            nextBtn.textContent = this.currentStep === 4 ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí';
        }
        
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (this.currentStep === 4) {
            this.renderReview();
        }
        
        this.validate();
    }

    renderReview() {
        const reviewContent = document.getElementById('review-content');
        if (!reviewContent) return;
        
        const categoryName = this.formData.category_name || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
        const contactMethod = this.formData.contact_method ? 
            {'telegram': 'üí¨ Telegram', 'phone': 'üìû –ó–≤–æ–Ω–æ–∫', 'whatsapp': 'üíö WhatsApp', 'email': 'üìß Email'}[this.formData.contact_method] : 
            '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
        
        reviewContent.innerHTML = `
            <div style="background: #f8f9fa; border-radius: 12px; padding: 16px; margin-bottom: 16px;">
                <div style="font-weight: 600; margin-bottom: 8px;">üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</div>
                <div style="color: #666; margin-bottom: 12px;">${categoryName}</div>
                
                <div style="font-weight: 600; margin-bottom: 8px;">üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã:</div>
                <div style="color: #666; margin-bottom: 4px;">${this.formData.name}</div>
                <div style="color: #666; margin-bottom: 4px;">${this.formData.phone}</div>
                <div style="color: #666; margin-bottom: 12px;">${contactMethod}</div>
                
                ${this.formData.description ? `
                    <div style="font-weight: 600; margin-bottom: 8px;">üìù –û–ø–∏—Å–∞–Ω–∏–µ:</div>
                    <div style="color: #666; font-size: 14px;">${this.formData.description.substring(0, 100)}${this.formData.description.length > 100 ? '...' : ''}</div>
                ` : ''}
            </div>
        `;
    }

    async submit() {
        const nextBtn = document.getElementById('next-btn');
        if (!nextBtn) return;
        
        nextBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        nextBtn.disabled = true;
        
        try {
            const response = await fetch('/submit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ...this.formData,
                    tg_user_id: tg.initDataUnsafe?.user?.id,
                    tg_username: tg.initDataUnsafe?.user?.username
                })
            });
            
            if (response.ok) {
                this.showSuccess();
                tg.HapticFeedback?.notificationOccurred('success');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        } catch (error) {
            console.error('Submit error:', error);
            nextBtn.textContent = '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
            nextBtn.disabled = false;
            tg.HapticFeedback?.notificationOccurred('error');
        }
    }

    showSuccess() {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —à–∞–≥–∏
        document.querySelectorAll('.ultra-step').forEach(step => {
            step.classList.add('hidden');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
        const successStep = document.getElementById('success');
        if (successStep) {
            successStep.classList.remove('hidden');
        }
        
        // –°–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navigation = document.querySelector('.ultra-navigation');
        if (navigation) {
            navigation.style.display = 'none';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new CompactApp();
    window.app = app; // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
});

// CSS –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è ripple —ç—Ñ—Ñ–µ–∫—Ç–∞
if (!document.getElementById('premium-styles')) {
    const style = document.createElement('style');
    style.id = 'premium-styles';
    style.textContent = `
        @keyframes premiumRipple {
            to { transform: scale(4); opacity: 0; }
        }
        .ultra-step { 
            transition: all 0.3s ease; 
        }
        .ultra-step.active { 
            animation: fadeInUp 0.4s ease; 
        }
        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    `;
    document.head.appendChild(style);
}
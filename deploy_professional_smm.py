#!/usr/bin/env python3
"""
üöÄ PROFESSIONAL SMM DEPLOYMENT SCRIPT
Deploys enhanced Telegram bot with Professional SMM System
"""

from bot.services.db import init_db
from bot.services.ai_enhanced import AIEnhancedManager
from bot.services.smm_integration import initialize_smm_integration, start_smm_system
from telegram.ext import Application
import os
import sys
from pathlib import Path
from datetime import datetime
import logging
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–í–´–ú –î–ï–õ–û–ú
from dotenv import load_dotenv
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('professional_smm_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


async def initialize_professional_smm_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å Professional SMM System"""

    try:
        logger.info("üöÄ Starting Professional SMM Bot initialization...")

        # 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("üì± Creating Telegram application...")
        token = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('BOT_TOKEN')
        if not token:
            raise ValueError("TELEGRAM_BOT_TOKEN or BOT_TOKEN not set")

        application = Application.builder().token(token).build()

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üíæ Initializing database...")
        await init_db()

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Manager
        logger.info("üß† Initializing Enhanced AI Manager...")
        ai_manager = AIEnhancedManager()
        await ai_manager.initialize()

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SMM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        logger.info("üìä Initializing Professional SMM System...")
        smm_integration = await initialize_smm_integration(
            bot=application.bot,
            ai_manager=ai_manager
        )

        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º SMM —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–æ–Ω–µ
        logger.info("üéØ Starting SMM automation...")
        smm_task = asyncio.create_task(start_smm_system())

        # 6. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        async def post_init(application: Application) -> None:
            """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
            logger.info("‚úÖ Professional SMM Bot fully initialized!")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            try:
                status = await smm_integration.get_smm_analytics_report(days_back=1)
                logger.info(
                    f"üìà SMM System Status: {status.get('system_status', {})}")
            except Exception as e:
                logger.warning(f"Could not generate initial SMM report: {e}")

        async def post_shutdown(application: Application) -> None:
            """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
            logger.info("üõë Shutting down Professional SMM Bot...")

            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SMM —Å–∏—Å—Ç–µ–º—É
                await smm_integration.stop_smm_system()
                logger.info("üìä SMM System stopped")
            except Exception as e:
                logger.error(f"Error during shutdown: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.post_init = post_init
        application.post_shutdown = post_shutdown

        return application, smm_task

    except Exception as e:
        logger.error(f"‚ùå Failed to initialize Professional SMM Bot: {e}")
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env_vars = ['TELEGRAM_BOT_TOKEN', 'BOT_TOKEN']
        if not any(os.getenv(var) for var in required_env_vars):
            logger.error("‚ùå Missing TELEGRAM_BOT_TOKEN or BOT_TOKEN")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        application, smm_task = await initialize_professional_smm_bot()

        logger.info("üéâ Professional SMM Bot is starting...")
        logger.info(f"üïê Start time: {datetime.now().isoformat()}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ SMM —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try:
            await asyncio.gather(
                application.run_polling(drop_pending_updates=True),
                smm_task,
                return_exceptions=True
            )
        except KeyboardInterrupt:
            logger.info("üëã Received shutdown signal")
        except Exception as e:
            logger.error(f"‚ùå Runtime error: {e}")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if application.running:
                await application.stop()

            # –û—Ç–º–µ–Ω—è–µ–º SMM –∑–∞–¥–∞—á—É
            if not smm_task.done():
                smm_task.cancel()
                try:
                    await smm_task
                except asyncio.CancelledError:
                    logger.info("üõë SMM task cancelled")

        logger.info("‚úÖ Professional SMM Bot stopped gracefully")

    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Interrupted by user")
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
        sys.exit(1)
